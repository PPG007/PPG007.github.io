import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as s,o as a}from"./app-rQI8KFp-.js";const l={};function o(n,e){return a(),t("div",null,e[0]||(e[0]=[s('<h1 id="code-review" tabindex="-1"><a class="header-anchor" href="#code-review"><span>Code Review</span></a></h1><h2 id="commit-message" tabindex="-1"><a class="header-anchor" href="#commit-message"><span>Commit Message</span></a></h2><p>格式要求：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-text"><span class="line"><span>${scope}:</span><span class="space"> </span><span>${subject}</span></span>\n<span class="line"><span>//注意空行</span></span>\n<span class="line"><span>${description}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>${scope}：必需，一般是项目目录、模块或组件的名字，用来描述本次commit的影响范围。 <ul><li>使用小驼峰格式。</li><li>嵌套层级使用 <code>/</code> 表示。</li><li>涉及多个目录可以使用 <code>,</code> 分隔。</li><li>无意义的层级应该省略。</li><li>使用 <code>base</code> 表示基础结构、框架相关的改动，用 <code>misc</code> 表示杂项改动，用 <code>all</code> 表示大范围重构。</li></ul></li><li>${subject}：必需，描述干什么和为什么。 <ul><li>80个字符以内的简要说明，首字母小写，祈使句，不加句号。</li><li>不要写废话，要具体到改了什么。</li></ul></li><li>${description}：可选，详细说明。</li></ul><h2 id="流程" tabindex="-1"><a class="header-anchor" href="#流程"><span>流程</span></a></h2><ul><li>提交者发起 MR，assign 给同级同事： <ul><li>代码变动要尽量小且专注于一个任务，不要攒的很大或者是多个任务。</li><li>需要一次性提交大量不需要 review 的文件的分两次 commit，不需要review的放在第一个 commit。</li><li>如果冲突由提交者 <code>merge</code> 或 <code>rebase</code>。</li></ul></li><li>审查者 review 代码： <ul><li>对各项要求进行检查，有疑问的地方留评论。</li><li>如果提交者已经对之前的评论做出了修复，审查者需要确认后 resolve thread。</li><li>review 完成后 assign 给提交者处理。</li></ul></li><li>提交者响应评论： <ul><li>确实有问题的进行修复，检查其他地方是否还有类似问题一并修改。</li><li>不同意的可以讨论。</li><li>完成后 assign 给审查者再次 review，不需要额外留评论。</li></ul></li><li>审查无误后，将 MR assign 给 Leader 或项目维护者进行二次 review 合并。</li></ul>',7)]))}const d=i(l,[["render",o]]),m=JSON.parse('{"path":"/git/docs/code_review.html","title":"Code Review","lang":"zh-CN","frontmatter":{"description":"Code Review Commit Message 格式要求： ${scope}：必需，一般是项目目录、模块或组件的名字，用来描述本次commit的影响范围。 使用小驼峰格式。 嵌套层级使用 / 表示。 涉及多个目录可以使用 , 分隔。 无意义的层级应该省略。 使用 base 表示基础结构、框架相关的改动，用 misc 表示杂项改动，用 all 表示...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Code Review\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-13T01:18:18.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/git/docs/code_review.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"Code Review"}],["meta",{"property":"og:description","content":"Code Review Commit Message 格式要求： ${scope}：必需，一般是项目目录、模块或组件的名字，用来描述本次commit的影响范围。 使用小驼峰格式。 嵌套层级使用 / 表示。 涉及多个目录可以使用 , 分隔。 无意义的层级应该省略。 使用 base 表示基础结构、框架相关的改动，用 misc 表示杂项改动，用 all 表示..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-13T01:18:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-13T01:18:18.000Z"}]]},"git":{"createdTime":1640492808000,"updatedTime":1747099098000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"},{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":1}]},"readingTime":{"minutes":1.36,"words":407},"filePathRelative":"git/docs/code_review.md","excerpt":"\\n<h2>Commit Message</h2>\\n<p>格式要求：</p>","autoDesc":true}');export{d as comp,m as data};
