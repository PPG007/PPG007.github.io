import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,d as n,o as a}from"./app-rQI8KFp-.js";const l={};function r(o,e){return a(),i("div",null,e[0]||(e[0]=[n('<h1 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span>事件</span></a></h1><h2 id="eventtarget-接口" tabindex="-1"><a class="header-anchor" href="#eventtarget-接口"><span>EventTarget 接口</span></a></h2><ul><li>addEventListener()：用于当前节点或对象上，添加一个事件监听器，这个函数接受三个参数： <ul><li>type：事件名称，大小写敏感。</li><li>listener：监听函数，事件发生时会被调用。</li><li>一个监听器配置对象，该对象有以下属性： <ul><li>capture：布尔值，设为 true 表示监听函数在捕获阶段就会触发，默认值为 false，在冒泡阶段触发。</li><li>once：布尔值，如果设置为 true，表示监听函数执行一次就会自动移除，默认为 false。</li><li>passive：布尔值，设为 true 时表示禁止监听函数调用 <code>preventDefault()</code> 方法，默认为 false。</li><li>signal：属性值为一个 AbortSignal 对象，为监听器设置了一个信号通道，用来在需要时发出信号，移除监听函数。</li></ul></li></ul></li><li>removeEventListener()：移除添加的事件监听函数，接受的参数和 addEventListener() 一致，但是不能取消匿名函数的监听。</li><li>dispatchEvent()：在当前节点上触发指定事件，从而触发监听函数的执行，参数是一个 Event 对象实例。</li></ul><h2 id="事件模型" tabindex="-1"><a class="header-anchor" href="#事件模型"><span>事件模型</span></a></h2><p>事件的传播：</p><p>一个事件发生后，会在子元素和父元素之间传播，这个传播分为三个阶段：</p><ul><li>从 window 对象传导到目标节点，称为<em>捕获阶段</em>。</li><li>在目标节点上触发，称为<em>目标阶段</em>。</li><li>从目标节点传导会 window 对象，称为<em>冒泡阶段</em>。</li></ul><p>事件的代理：</p><p>由父节点的监听函数同一处理多个子元素的事件称为事件的代理。</p><p>如果希望事件到某个节点为止不再传播，可以使用事件对象的 <code>event.stopPropagation()</code> 方法阻止事件的传播。</p><p>如果想要彻底取消一个事件，使用 <code>stopImmediatePropagation()</code> 方法。</p><h2 id="event-对象" tabindex="-1"><a class="header-anchor" href="#event-对象"><span>Event 对象</span></a></h2><p>Event 构造函数接受两个参数：</p><ul><li>第一个参数 type 是字符串表示事件的名称。</li><li>第二个参数 options 是一个对象，表示事件对象的配置： <ul><li>bubbles：布尔值，可选，默认 false，表示事件对象是否冒泡。</li><li>cancelable：布尔值，可选，默认 false，表示事件是否可以被取消，即 <code>Event.preventDefault()</code>。</li></ul></li></ul><p>实例方法：</p><ul><li>Event.preventDefault()：取消浏览器对当前事件的默认行为，前提是事件对象的 cancelable 属性为 true，此方法知识取消事件对当前元素的默认影响，不会阻止事件的传播。</li><li>Event.stopPropagation()：阻止事件继续传播，防止再触发定义在别的节点上的监听函数，不包括在当前节点上其他事件监听函数。</li><li>Event.stopImmediatePropagation()：阻止同一个事件的其他监听函数被调用，不管监听函数定义在当前节点还是其他节点。</li><li>Event.composedPath()：返回一个数组，成员是事件的最底层节点和依次冒泡所经过的所有上层节点。</li></ul>',16)]))}const c=t(l,[["render",r]]),d=JSON.parse('{"path":"/javascript/docs/event.html","title":"事件","lang":"zh-CN","frontmatter":{"description":"事件 EventTarget 接口 addEventListener()：用于当前节点或对象上，添加一个事件监听器，这个函数接受三个参数： type：事件名称，大小写敏感。 listener：监听函数，事件发生时会被调用。 一个监听器配置对象，该对象有以下属性： capture：布尔值，设为 true 表示监听函数在捕获阶段就会触发，默认值为 fals...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"事件\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-13T01:18:18.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/javascript/docs/event.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"事件"}],["meta",{"property":"og:description","content":"事件 EventTarget 接口 addEventListener()：用于当前节点或对象上，添加一个事件监听器，这个函数接受三个参数： type：事件名称，大小写敏感。 listener：监听函数，事件发生时会被调用。 一个监听器配置对象，该对象有以下属性： capture：布尔值，设为 true 表示监听函数在捕获阶段就会触发，默认值为 fals..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-13T01:18:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-13T01:18:18.000Z"}]]},"git":{"createdTime":1640441337000,"updatedTime":1747099098000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"},{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":1}]},"readingTime":{"minutes":2.37,"words":712},"filePathRelative":"javascript/docs/event.md","excerpt":"\\n<h2>EventTarget 接口</h2>\\n<ul>\\n<li>addEventListener()：用于当前节点或对象上，添加一个事件监听器，这个函数接受三个参数：\\n<ul>\\n<li>type：事件名称，大小写敏感。</li>\\n<li>listener：监听函数，事件发生时会被调用。</li>\\n<li>一个监听器配置对象，该对象有以下属性：\\n<ul>\\n<li>capture：布尔值，设为 true 表示监听函数在捕获阶段就会触发，默认值为 false，在冒泡阶段触发。</li>\\n<li>once：布尔值，如果设置为 true，表示监听函数执行一次就会自动移除，默认为 false。</li>\\n<li>passive：布尔值，设为 true 时表示禁止监听函数调用 <code>preventDefault()</code> 方法，默认为 false。</li>\\n<li>signal：属性值为一个 AbortSignal 对象，为监听器设置了一个信号通道，用来在需要时发出信号，移除监听函数。</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>removeEventListener()：移除添加的事件监听函数，接受的参数和 addEventListener() 一致，但是不能取消匿名函数的监听。</li>\\n<li>dispatchEvent()：在当前节点上触发指定事件，从而触发监听函数的执行，参数是一个 Event 对象实例。</li>\\n</ul>","autoDesc":true}');export{c as comp,d as data};
