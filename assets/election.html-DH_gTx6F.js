import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,d as i,o as a}from"./app-rQI8KFp-.js";const p={};function r(l,e){return a(),o("div",null,e[0]||(e[0]=[i('<h1 id="选举机制" tabindex="-1"><a class="header-anchor" href="#选举机制"><span>选举机制</span></a></h1><h2 id="第一次启动时选举机制" tabindex="-1"><a class="header-anchor" href="#第一次启动时选举机制"><span>第一次启动时选举机制</span></a></h2><p>假设有五台服务器：</p><ol><li>第一台服务器启动，发起一次选举，投自己一票，此时这台服务器票数不够一半（3），选举无法完成，服务器保持 LOOKING。</li><li>第二台服务器启动，发起选举，两台服务器先把票投给自己并交换信息，第一台服务器发现第二台服务器的 myid 比自己大，就将票重新投给了第二台服务器，此时第一台 0 票，第二台 2 票，此时还是没有服务器达到一半票数（3），全部保持 LOOKING。</li><li>第三台服务器启动，发起一次选举，与上面相同，票都到了三号服务器，此时达到了半数以上，三号服务器成为 leader，状态为 LEADING，1、2 号服务器状态为 FOLLOWING。</li><li>第四台服务器启动，发起一次选举，此时服务器 1、2、3 不是 LOOKING 状态，不会更改选票信息。服务器四有一票，服从多数把票投给三号服务器，状态变为 FOLLOWING。</li><li>第五台服务器启动，与第四台服务器流程相同。</li></ol><h2 id="非第一次启动时的选举机制" tabindex="-1"><a class="header-anchor" href="#非第一次启动时的选举机制"><span>非第一次启动时的选举机制</span></a></h2><p>当 ZooKeeper 集群中一台服务器出现以下两种情况之一，就会开始进入 Leader 选举：</p><ul><li>服务器初始化启动。</li><li>服务器运行期间无法和 Leader 保持连接。</li></ul><p>当一台服务器进入选举流程时，集群可能的状态：</p><ul><li>集群中已经有 Leader。</li><li>集群中确实没有 Leader。</li></ul><p>SID：服务器 ID，与 myid 一致，唯一标识。</p><p>ZXID：事务 ID，用来标识一次服务器状态的变更。</p><p>Epoch：每个 Leader 任期中的代号，每次投完一次票这个值就会增加。</p><p>现在假设 3、5 号服务器掉线，1、2、4 号服务器开始选举。</p><p>选举规则：</p><ul><li>Epoch 大的直接胜出。</li><li>Epoch 相同，ZXID 大的胜出。</li><li>ZXID 相同，SID 大的胜出。</li></ul>',15)]))}const d=t(p,[["render",r]]),s=JSON.parse('{"path":"/zookeeper/docs/election.html","title":"选举机制","lang":"zh-CN","frontmatter":{"description":"选举机制 第一次启动时选举机制 假设有五台服务器： 第一台服务器启动，发起一次选举，投自己一票，此时这台服务器票数不够一半（3），选举无法完成，服务器保持 LOOKING。 第二台服务器启动，发起选举，两台服务器先把票投给自己并交换信息，第一台服务器发现第二台服务器的 myid 比自己大，就将票重新投给了第二台服务器，此时第一台 0 票，第二台 2 票...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"选举机制\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2021-12-28T13:51:24.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/zookeeper/docs/election.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"选举机制"}],["meta",{"property":"og:description","content":"选举机制 第一次启动时选举机制 假设有五台服务器： 第一台服务器启动，发起一次选举，投自己一票，此时这台服务器票数不够一半（3），选举无法完成，服务器保持 LOOKING。 第二台服务器启动，发起选举，两台服务器先把票投给自己并交换信息，第一台服务器发现第二台服务器的 myid 比自己大，就将票重新投给了第二台服务器，此时第一台 0 票，第二台 2 票..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2021-12-28T13:51:24.000Z"}],["meta",{"property":"article:modified_time","content":"2021-12-28T13:51:24.000Z"}]]},"git":{"createdTime":1640699484000,"updatedTime":1640699484000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"}]},"readingTime":{"minutes":1.7,"words":510},"filePathRelative":"zookeeper/docs/election.md","excerpt":"\\n<h2>第一次启动时选举机制</h2>\\n<p>假设有五台服务器：</p>","autoDesc":true}');export{d as comp,s as data};
