import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as i,o as s}from"./app-rQI8KFp-.js";const n="/assets/@SuppressWarings%E7%9A%84%E5%8F%AF%E9%80%89%E5%8F%82%E6%95%B0-C4I5pO_K.jpg",r={};function p(o,e){return s(),t("div",null,e[0]||(e[0]=[i('<h1 id="内置注解" tabindex="-1"><a class="header-anchor" href="#内置注解"><span>内置注解</span></a></h1><h2 id="override" tabindex="-1"><a class="header-anchor" href="#override"><span>@Override</span></a></h2><p>表示当前方法覆盖了父类的方法。</p><p>此注释只适用于修饰方法，表示一个方法声明打算重写超类中的另一个方法声明。如果方法利用此注释类型进行注解但没有重写超类方法，则编译器会生成一条错误消息。</p><h2 id="deprecated" tabindex="-1"><a class="header-anchor" href="#deprecated"><span>@Deprecated</span></a></h2><p>表示方法已经过时,方法上有横线，使用时会有警告。</p><p>此注释可用于修饰方法、属性、类，表示不鼓励程序员使用这样的元素，通常是因为它很危险或存在更好的选择。在使用不被赞成的程序元素或在不被赞成的代码中执行重写时，编译器会发出警告。</p><h2 id="suppresswarings" tabindex="-1"><a class="header-anchor" href="#suppresswarings"><span>@SuppressWarings</span></a></h2><p>用来抑制编译时的警告信息。与前两个注释有所不同，你需要添加一个参数才能正确使用，这些参数值都是已经定义好了的，我们选择性的使用就好了</p><p><img src="'+n+'" alt="@SuppressWarings的可选参数"></p><p>例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-java"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">@</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">SuppressWarnings</span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">(</span><span style="--shiki-dark:#D19A66;--shiki-light:#000000;">value</span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">{“unchecked”</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">“deprecation”})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',12)]))}const h=a(r,[["render",p]]),l=JSON.parse('{"path":"/annotation-and-reflection/docs/builtin_annotation.html","title":"内置注解","lang":"zh-CN","frontmatter":{"prev":{"text":"首页","link":"/annotation-and-reflection"},"description":"内置注解 @Override 表示当前方法覆盖了父类的方法。 此注释只适用于修饰方法，表示一个方法声明打算重写超类中的另一个方法声明。如果方法利用此注释类型进行注解但没有重写超类方法，则编译器会生成一条错误消息。 @Deprecated 表示方法已经过时,方法上有横线，使用时会有警告。 此注释可用于修饰方法、属性、类，表示不鼓励程序员使用这样的元素，通...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内置注解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-08-15T09:32:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/annotation-and-reflection/docs/builtin_annotation.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"内置注解"}],["meta",{"property":"og:description","content":"内置注解 @Override 表示当前方法覆盖了父类的方法。 此注释只适用于修饰方法，表示一个方法声明打算重写超类中的另一个方法声明。如果方法利用此注释类型进行注解但没有重写超类方法，则编译器会生成一条错误消息。 @Deprecated 表示方法已经过时,方法上有横线，使用时会有警告。 此注释可用于修饰方法、属性、类，表示不鼓励程序员使用这样的元素，通..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-15T09:32:39.000Z"}],["meta",{"property":"article:modified_time","content":"2022-08-15T09:32:39.000Z"}]]},"git":{"createdTime":1640699484000,"updatedTime":1660555959000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"},{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":1}]},"readingTime":{"minutes":0.94,"words":283},"filePathRelative":"annotation-and-reflection/docs/builtin_annotation.md","excerpt":"\\n<h2>@Override</h2>\\n<p>表示当前方法覆盖了父类的方法。</p>","autoDesc":true}');export{h as comp,l as data};
