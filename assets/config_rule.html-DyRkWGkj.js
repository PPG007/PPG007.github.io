import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,d as i,o as r}from"./app-rQI8KFp-.js";const n="/assets/configuration-CiS7ZrYa.jpg",a="/assets/dubbo-config-override-DAGMxqlv.jpg",s="/assets/config-load-CnyVDTRj.svg",p={};function c(l,e){return r(),o("div",null,e[0]||(e[0]=[i('<h1 id="dubbo-配置规则" tabindex="-1"><a class="header-anchor" href="#dubbo-配置规则"><span>Dubbo 配置规则</span></a></h1><h2 id="配置覆盖优先级" tabindex="-1"><a class="header-anchor" href="#配置覆盖优先级"><span>配置覆盖优先级</span></a></h2><p>从 Dubbo 支持的配置来源说起，默认有 6 种配置来源：</p><ul><li>JVM System Properties：JVM -D 参数</li><li>System environment：JVM 进程的环境变量</li><li>Externalized Configuration：外部化配置，从配置中心读取</li><li>Application Configuration：应用的属性配置，从 Spring 应用的 Environment 中提取 &quot;dubbo&quot; 打头的属性集。</li><li>API、XML、注解等编程接口采集的配置可以被理解成配置来源的一种，是直接面向用户编程的配置采集方式。</li><li>从 classpath 读取配置文件：dubbo.properties。</li></ul><p><img src="'+n+'" alt="覆盖关系"></p><p>从虚拟机参数到本地文件优先级依次降低</p><h2 id="配置原则" tabindex="-1"><a class="header-anchor" href="#配置原则"><span>配置原则</span></a></h2><ul><li>作服务的提供者，比服务使用方更清楚服务性能参数，如调用的超时时间，合理的重试次数，等等。</li><li>在 Provider 配置后，Consumer 不配置则会使用 Provider 的配置值，即 Provider 配置可以作为 Consumer 的缺省值。否则，Consumer 会使用 Consumer 端的全局设置，这对于 Provider 不可控的，并且往往是不合理的。</li></ul><h2 id="不同粒度配置的覆盖关系" tabindex="-1"><a class="header-anchor" href="#不同粒度配置的覆盖关系"><span>不同粒度配置的覆盖关系</span></a></h2><p><img src="'+a+'" alt="dubbo-config-override"></p><ul><li>方法级优先，接口级次之，全局配置再次之。</li><li>如果级别一样，则消费方优先，提供方次之。</li></ul><h2 id="配置加载流程" tabindex="-1"><a class="header-anchor" href="#配置加载流程"><span>配置加载流程</span></a></h2><p><img src="'+s+'" alt="配置加载流程"></p>',13)]))}const u=t(p,[["render",c]]),b=JSON.parse('{"path":"/dubbo/docs/config_rule.html","title":"Dubbo 配置规则","lang":"zh-CN","frontmatter":{"description":"Dubbo 配置规则 配置覆盖优先级 从 Dubbo 支持的配置来源说起，默认有 6 种配置来源： JVM System Properties：JVM -D 参数 System environment：JVM 进程的环境变量 Externalized Configuration：外部化配置，从配置中心读取 Application Configurati...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dubbo 配置规则\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-08-15T09:32:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/dubbo/docs/config_rule.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"Dubbo 配置规则"}],["meta",{"property":"og:description","content":"Dubbo 配置规则 配置覆盖优先级 从 Dubbo 支持的配置来源说起，默认有 6 种配置来源： JVM System Properties：JVM -D 参数 System environment：JVM 进程的环境变量 Externalized Configuration：外部化配置，从配置中心读取 Application Configurati..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-15T09:32:39.000Z"}],["meta",{"property":"article:modified_time","content":"2022-08-15T09:32:39.000Z"}]]},"git":{"createdTime":1640616004000,"updatedTime":1660555959000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"},{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":1}]},"readingTime":{"minutes":1.11,"words":332},"filePathRelative":"dubbo/docs/config_rule.md","excerpt":"\\n<h2>配置覆盖优先级</h2>\\n<p>从 Dubbo 支持的配置来源说起，默认有 6 种配置来源：</p>","autoDesc":true}');export{u as comp,b as data};
