import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as t,o as e}from"./app-rQI8KFp-.js";const o={};function p(n,s){return e(),a("div",null,s[0]||(s[0]=[t('<h1 id="安装和编译" tabindex="-1"><a class="header-anchor" href="#安装和编译"><span>安装和编译</span></a></h1><p>安装命令：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-shell"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">sudo</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">apt-get</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">install</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">protobuf-compiler</span></span>\n<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">go</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">install</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">google.golang.org/protobuf/cmd/protoc-gen-go@latest</span></span>\n<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">go</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">install</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装 Protobuf 后，如果执行 <code>protoc</code> 命令出现 <code>Protobuf cannot find shared libraries</code> 的错误，可以执行：<code>sudo ldconfig</code> 命令解决。</p><p>编译命令：</p><ul><li>对于没有定义 rpc 服务的 proto 文件，使用命令：<code>protoc -I ${包含 proto 文件的文件夹} --go_out=${out_dir} ${要编译的文件}</code> 编译。</li><li>对于定义了 rpc 服务的 proto 文件，使用命令：<code>protoc -I ${包含 proto 文件的文件夹} --go_out=${out_dir} --go-grpc_out=${out_dir} ${要编译的文件}</code> 编译。</li><li>对于同时定义了普通 message 和 rpc 服务的 proto 文件，使用命令：<code>protoc -I ${包含 proto 文件的文件夹} --go_out=${out_dir} --go-grpc_out=${out_dir} ${要编译的文件}</code> 编译。</li></ul><p>示例：<code>protoc -I ./proto/ --go_out=pb --go-grpc_out=pb proto/*.proto</code>。</p>',7)]))}const c=i(o,[["render",p]]),d=JSON.parse('{"path":"/grpc-and-protobuf/docs/protobuf/installAndComplie.html","title":"安装和编译","lang":"zh-CN","frontmatter":{"description":"安装和编译 安装命令： 安装 Protobuf 后，如果执行 protoc 命令出现 Protobuf cannot find shared libraries 的错误，可以执行：sudo ldconfig 命令解决。 编译命令： 对于没有定义 rpc 服务的 proto 文件，使用命令：protoc -I ${包含 proto 文件的文件夹} --g...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"安装和编译\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-05-06T04:31:30.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/grpc-and-protobuf/docs/protobuf/installAndComplie.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"安装和编译"}],["meta",{"property":"og:description","content":"安装和编译 安装命令： 安装 Protobuf 后，如果执行 protoc 命令出现 Protobuf cannot find shared libraries 的错误，可以执行：sudo ldconfig 命令解决。 编译命令： 对于没有定义 rpc 服务的 proto 文件，使用命令：protoc -I ${包含 proto 文件的文件夹} --g..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-05-06T04:31:30.000Z"}],["meta",{"property":"article:modified_time","content":"2022-05-06T04:31:30.000Z"}]]},"git":{"createdTime":1651811490000,"updatedTime":1651811490000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@qq.com","commits":1,"url":"https://github.com/PPG007"}]},"readingTime":{"minutes":0.66,"words":198},"filePathRelative":"grpc-and-protobuf/docs/protobuf/installAndComplie.md","excerpt":"\\n<p>安装命令：</p>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" style=\\"--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF\\"><pre class=\\"shiki shiki-themes one-dark-pro light-plus vp-code\\"><code class=\\"language-shell\\"><span class=\\"line\\"><span style=\\"--shiki-dark:#61AFEF;--shiki-light:#795E26\\">sudo</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#98C379;--shiki-light:#A31515\\">apt-get</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#98C379;--shiki-light:#A31515\\">install</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#98C379;--shiki-light:#A31515\\">protobuf-compiler</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-dark:#61AFEF;--shiki-light:#795E26\\">go</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#98C379;--shiki-light:#A31515\\">install</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#98C379;--shiki-light:#A31515\\">google.golang.org/protobuf/cmd/protoc-gen-go@latest</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-dark:#61AFEF;--shiki-light:#795E26\\">go</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#98C379;--shiki-light:#A31515\\">install</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#98C379;--shiki-light:#A31515\\">google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{c as comp,d as data};
