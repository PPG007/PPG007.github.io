import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,d as e,o as n}from"./app-rQI8KFp-.js";const p={};function l(t,s){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="日志" tabindex="-1"><a class="header-anchor" href="#日志"><span>日志</span></a></h1><p>Laravel 日志记录是基于 channel 的，每个 channel 代表一种写入日志的方式，例如 <code>single</code> 将日志写入到单个文件中，日志消息可能会根据严重程度写入到多个 channel 中。</p><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h2><p>TODO:</p><h2 id="记录日志" tabindex="-1"><a class="header-anchor" href="#记录日志"><span>记录日志</span></a></h2><h3 id="设置上下文" tabindex="-1"><a class="header-anchor" href="#设置上下文"><span>设置上下文</span></a></h3><p>使用 <code>withContext</code> 方法可以设置上下文，例如在 First 中间件中设置 requestId：</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-php"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Log</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">withContext</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">([</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;reqId&#39;</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=&gt;</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">$reqId</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置共享上下文" tabindex="-1"><a class="header-anchor" href="#设置共享上下文"><span>设置共享上下文</span></a></h3><p>如果想在所有的 channel 中共享上下文，可以使用 <code>shareContext</code> 方法：</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-php"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Log</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">shareContext</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">([</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;reqId&#39;</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=&gt;</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">$reqId</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后调用处可以指定某个 channel：</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-php"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">public</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">function</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">report</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">()</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Log</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">channel</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;stderr&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">)-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">warning</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;demo&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13)]))}const c=a(p,[["render",l]]),d=JSON.parse('{"path":"/laravel/docs/log.html","title":"日志","lang":"zh-CN","frontmatter":{"description":"日志 Laravel 日志记录是基于 channel 的，每个 channel 代表一种写入日志的方式，例如 single 将日志写入到单个文件中，日志消息可能会根据严重程度写入到多个 channel 中。 配置 TODO: 记录日志 设置上下文 使用 withContext 方法可以设置上下文，例如在 First 中间件中设置 requestId： ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"日志\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-03T09:31:49.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/laravel/docs/log.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"日志"}],["meta",{"property":"og:description","content":"日志 Laravel 日志记录是基于 channel 的，每个 channel 代表一种写入日志的方式，例如 single 将日志写入到单个文件中，日志消息可能会根据严重程度写入到多个 channel 中。 配置 TODO: 记录日志 设置上下文 使用 withContext 方法可以设置上下文，例如在 First 中间件中设置 requestId： ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-03T09:31:49.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-03T09:31:49.000Z"}]]},"git":{"createdTime":1748943109000,"updatedTime":1748943109000,"contributors":[{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":1}]},"readingTime":{"minutes":0.51,"words":154},"filePathRelative":"laravel/docs/log.md","excerpt":"\\n<p>Laravel 日志记录是基于 channel 的，每个 channel 代表一种写入日志的方式，例如 <code>single</code> 将日志写入到单个文件中，日志消息可能会根据严重程度写入到多个 channel 中。</p>","autoDesc":true}');export{c as comp,d as data};
