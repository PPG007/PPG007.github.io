import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,d as e,o}from"./app-rQI8KFp-.js";const a={};function n(i,t){return o(),r("div",null,t[0]||(t[0]=[e('<h1 id="各配置项、标签说明" tabindex="-1"><a class="header-anchor" href="#各配置项、标签说明"><span>各配置项、标签说明</span></a></h1><h2 id="dubbo-application" tabindex="-1"><a class="header-anchor" href="#dubbo-application"><span>dubbo:application</span></a></h2><p>对应配置类<em>org.apache.dubbo.config.ApplicationConfig</em></p><p>属性：</p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>name</td><td>String</td><td><em>必填</em></td><td>当前应用名称，用于注册中心计算应用间依赖关系，注意：消费者和提供者应用名不要一样</td><td></td></tr><tr><td>version</td><td>String</td><td></td><td>当前应用的版本</td><td></td></tr><tr><td>owner</td><td>String</td><td></td><td>应用负责人，用于服务治理，请填写负责人公司邮箱前缀</td><td></td></tr><tr><td>organization</td><td>String</td><td></td><td>组织名称(BU或部门)，用于注册中心区分服务来源，此配置项建议不要使用autoconfig，直接写死在配置中</td><td></td></tr><tr><td>architecture</td><td>String</td><td></td><td>用于服务分层对应的架构。如，intl、china。不同的架构使用不同的分层。</td><td></td></tr><tr><td>environment</td><td>String</td><td></td><td>应用环境，如：develop/test/product，不同环境使用不同的缺省值，以及作为只用于开发测试功能的限制条件</td><td></td></tr><tr><td>compiler</td><td>String</td><td></td><td>Java字节码编译器，用于动态类的生成，可选：jdk或javassist</td><td>javassist</td></tr><tr><td>logger</td><td>String</td><td></td><td>日志输出方式，可选：slf4j,jcl,log4j,log4j2,jdk</td><td>slf4j</td></tr></tbody></table><h2 id="dubbo-registry" tabindex="-1"><a class="header-anchor" href="#dubbo-registry"><span>dubbo:registry</span></a></h2><p>注册中心配置</p><p>对应的配置类： <em>org.apache.dubbo.config.RegistryConfig</em></p><p>可以有多个</p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>id</td><td>string</td><td></td><td>注册中心引用BeanId，可以在&lt;dubbo:service registry=&quot;&quot;&gt;或&lt;dubbo:reference registry=&quot;&quot;&gt;中引用此ID</td><td></td></tr><tr><td>address</td><td>string</td><td><em>必填</em></td><td>注册中心服务器地址，如果地址没有端口缺省为9090，同一集群内的多个地址用逗号分隔，如：ip:port,ip:port，不同集群的注册中心，请配置多个<a href="dubbo:registry" target="_blank" rel="noopener noreferrer">dubbo:registry</a>标签</td><td></td></tr><tr><td>protocol</td><td>string</td><td></td><td>注册中心地址协议，支持<code>dubbo</code>, <code>multicast</code>, <code>zookeeper</code>, <code>redis</code>, <code>consul(2.7.1)</code>, <code>sofa(2.7.2)</code>, <code>etcd(2.7.2)</code>, <code>nacos(2.7.2)</code>等协议</td><td>dubbo</td></tr><tr><td>port</td><td>int</td><td></td><td>注册中心缺省端口，当address没有带端口时使用此端口做为缺省值</td><td>9090</td></tr><tr><td>username</td><td>string</td><td></td><td>登录注册中心用户名，如果注册中心不需要验证可不填</td><td></td></tr><tr><td>password</td><td>string</td><td></td><td>登录注册中心密码，如果注册中心不需要验证可不填</td><td></td></tr><tr><td>transport</td><td>string</td><td></td><td>网络传输方式，可选mina,netty</td><td>netty</td></tr><tr><td>timeout</td><td>int</td><td></td><td>注册中心请求超时时间(毫秒)</td><td>5000</td></tr><tr><td>session</td><td>int</td><td></td><td>注册中心会话超时时间(毫秒)，用于检测提供者非正常断线后的脏数据，比如用心跳检测的实现，此时间就是心跳间隔，不同注册中心实现不一样。</td><td>60000</td></tr><tr><td>file</td><td>string</td><td></td><td>使用文件缓存注册中心地址列表及服务提供者列表，应用重启时将基于此文件恢复，注意：两个注册中心不能使用同一文件存储</td><td></td></tr><tr><td>wait</td><td>int</td><td></td><td>停止时等待通知完成时间(毫秒)</td><td>0</td></tr><tr><td>check</td><td>boolean</td><td></td><td>注册中心不存在时，是否报错</td><td>true</td></tr><tr><td>register</td><td>boolean</td><td></td><td>是否向此注册中心注册服务，如果设为false，将只订阅，不注册</td><td>true</td></tr><tr><td>subscribe</td><td>boolean</td><td></td><td>是否向此注册中心订阅服务，如果设为false，将只注册，不订阅</td><td>true</td></tr><tr><td>dynamic</td><td>boolean</td><td></td><td>服务是否动态注册，如果设为false，注册后将显示为disable状态，需人工启用，并且服务提供者停止时，也不会自动取消注册，需人工禁用。</td><td>true</td></tr><tr><td>group</td><td>string</td><td></td><td>服务注册分组，跨组的服务不会相互影响，也无法相互调用，适用于环境隔离</td><td>dubbo</td></tr><tr><td>simplified</td><td>boolean</td><td></td><td>注册到注册中心的URL是否采用精简模式的（与低版本兼容）</td><td>false</td></tr><tr><td>extra-keys</td><td>string</td><td></td><td>在simplified=true时，extraKeys允许你在默认参数外将额外的key放到URL中，格式：“interface,key1,key2”。</td><td></td></tr></tbody></table><h2 id="dubbo-protocol" tabindex="-1"><a class="header-anchor" href="#dubbo-protocol"><span>dubbo:protocol</span></a></h2><p>服务提供者协议配置</p><p>对应的配置类：<em>org.apache.dubbo.config.ProtocolConfig</em></p><p>可以有多个，在dubbo:service中通过protocol指定</p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>id</td><td>string</td><td></td><td>协议BeanId，可以在&lt;dubbo:service protocol=&quot;&quot;&gt;中引用此ID，如果ID不填，缺省和name属性值一样，重复则在name后加序号</td><td>dubbo</td></tr><tr><td>name</td><td>string</td><td><em>必填</em></td><td>协议名称</td><td>dubbo</td></tr><tr><td>port</td><td>int</td><td></td><td>服务端口</td><td>dubbo协议缺省端口为20880，rmi协议缺省端口为1099，http和hessian协议缺省端口为80；如果<strong>没有</strong>配置port，则自动采用默认端口，如果配置为**-1**，则会分配一个没有被占用的端口。</td></tr><tr><td>host</td><td>string</td><td></td><td></td><td>自动查找本机IP</td></tr><tr><td>threadpool</td><td>string</td><td></td><td>线程池类型，可选：fixed/cached</td><td>fixed</td></tr><tr><td>threads</td><td>int</td><td></td><td>服务线程池大小(固定大小)</td><td>200</td></tr><tr><td>iothreads</td><td>int</td><td></td><td>io线程池大小(固定大小)</td><td>cpu个数+1</td></tr><tr><td>payload</td><td>int</td><td></td><td>请求及响应数据包大小限制，单位：字节</td><td>8388608(=8M)</td></tr><tr><td>accepts</td><td>int</td><td></td><td>服务提供方最大可接受连接数</td><td>0</td></tr><tr><td>codec</td><td>string</td><td></td><td>协议编码方式</td><td>dubbo</td></tr><tr><td>serialization</td><td>string</td><td></td><td>协议序列化方式，当协议支持多种序列化方式时使用，比如：dubbo协议的dubbo,hessian2,java,compactedjava，以及http协议的json等</td><td>dubbo协议缺省为hessian2，rmi协议缺省为java，http协议缺省为json</td></tr><tr><td>accesslog</td><td>string/boolean</td><td></td><td>设为true，将向logger中输出访问日志，也可填写访问日志文件路径，直接把访问日志输出到指定文件</td><td></td></tr><tr><td>path</td><td>string</td><td></td><td>提供者上下文路径，为服务path的前缀</td><td></td></tr><tr><td>transporter</td><td>string</td><td></td><td>协议的服务端和客户端实现类型，比如：dubbo协议的mina,netty等，可以分拆为server和client配置</td><td>dubbo协议缺省为netty</td></tr></tbody></table><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>server</td><td>string</td><td></td><td>协议的服务器端实现类型，比如：dubbo协议的mina,netty等，http协议的jetty,servlet等</td><td>dubbo协议缺省为netty，http协议缺省为servlet</td></tr><tr><td>client</td><td>string</td><td></td><td>协议的客户端实现类型，比如：dubbo协议的mina,netty等</td><td>dubbo协议缺省为netty</td></tr><tr><td>dispatcher</td><td>string</td><td></td><td>协议的消息派发方式，用于指定线程模型，比如：dubbo协议的all, direct, message, execution, connection等</td><td>dubbo协议缺省为all</td></tr><tr><td>queues</td><td>int</td><td></td><td>线程池队列大小，当线程池满时，排队等待执行的队列大小，建议不要设置，当线程池满时应立即失败，重试其它服务提供机器，而不是排队，除非有特殊需求。</td><td>0</td></tr><tr><td>charset</td><td>string</td><td></td><td>序列化编码</td><td>UTF-8</td></tr><tr><td>buffer</td><td>int</td><td></td><td>网络读写缓冲区大小</td><td>8192</td></tr><tr><td>heartbeat</td><td>int</td><td></td><td>心跳间隔，对于长连接，当物理层断开时，比如拔网线，TCP的FIN消息来不及发送，对方收不到断开事件，此时需要心跳来帮助检查连接是否已断开</td><td>0</td></tr><tr><td>telnet</td><td>string</td><td></td><td>所支持的telnet命令，多个命令用逗号分隔</td><td></td></tr><tr><td>register</td><td>boolean</td><td></td><td>该协议的服务是否注册到注册中心</td><td>true</td></tr><tr><td>contextpath</td><td>string</td><td></td><td></td><td>缺省为空串</td></tr></tbody></table><h2 id="dubbo-service" tabindex="-1"><a class="header-anchor" href="#dubbo-service"><span>dubbo:service</span></a></h2><p>服务提供者暴露服务配置</p><p>对应的配置类：<em>org.apache.dubbo.config.ServiceConfig</em></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>interface</td><td>class</td><td><em>必填</em></td><td>服务接口名</td><td></td></tr><tr><td>ref</td><td>object</td><td><em>必填</em></td><td>服务对象实现引用</td><td></td></tr><tr><td>version</td><td>string</td><td>可选</td><td>服务版本，建议使用两位数字版本，如：1.0，通常在接口不兼容时版本号才需要升级</td><td>0.0.0</td></tr><tr><td>group</td><td>string</td><td>可选</td><td>服务分组，当一个接口有多个实现，可以用分组区分</td><td></td></tr><tr><td>path</td><td>string</td><td>可选</td><td>服务路径 (注意：1.0不支持自定义路径，总是使用接口名，如果有1.0调2.0，配置服务路径可能不兼容)</td><td>缺省为接口名</td></tr><tr><td>delay</td><td>int</td><td>可选</td><td>延迟注册服务时间(毫秒) ，设为-1时，表示延迟到Spring容器初始化完成时暴露服务</td><td>0</td></tr><tr><td>timeout</td><td>int</td><td>可选</td><td>远程服务调用超时时间(毫秒)</td><td>1000</td></tr><tr><td>retries</td><td>int</td><td>可选</td><td>远程服务调用重试次数，不包括第一次调用，不需要重试请设为0</td><td>2</td></tr><tr><td>connections</td><td>int</td><td>可选</td><td>对每个提供者的最大连接数，rmi、http、hessian等短连接协议表示限制连接数，dubbo等长连接协表示建立的长连接个数</td><td>100</td></tr><tr><td>loadbalance</td><td>string</td><td>可选</td><td>负载均衡策略，可选值：random,roundrobin,leastactive，分别表示：随机，轮询，最少活跃调用</td><td>random</td></tr><tr><td>async</td><td>boolean</td><td>可选</td><td>是否缺省异步执行，不可靠异步，只是忽略返回值，不阻塞执行线程</td><td>false</td></tr><tr><td>local</td><td>class/boolean</td><td>可选</td><td>设为true，表示使用缺省代理类名，即：接口名 + Local后缀，已废弃，请使用stub</td><td>false</td></tr><tr><td>stub</td><td>class/boolean</td><td>可选</td><td>设为true，表示使用缺省代理类名，即：接口名 + Stub后缀，服务接口客户端本地代理类名，用于在客户端执行本地逻辑，如本地缓存等，该本地代理类的构造函数必须允许传入远程代理对象，构造函数如：public XxxServiceStub(XxxService xxxService)</td><td>false</td></tr><tr><td>mock</td><td>class/boolean</td><td>可选</td><td>设为true，表示使用缺省Mock类名，即：接口名 + Mock后缀，服务接口调用失败Mock实现类，该Mock类必须有一个无参构造函数，与Local的区别在于，Local总是被执行，而Mock只在出现非业务异常(比如超时，网络异常等)时执行，Local在远程调用之前执行，Mock在远程调用后执行。</td><td>false</td></tr><tr><td>token</td><td>string/boolean</td><td>可选</td><td>令牌验证，为空表示不开启，如果为true，表示随机生成动态令牌，否则使用静态令牌，令牌的作用是防止消费者绕过注册中心直接访问，保证注册中心的授权功能有效，如果使用点对点调用，需关闭令牌功能</td><td>false</td></tr><tr><td>registry</td><td>string</td><td>可选</td><td>向指定注册中心注册，在多个注册中心时使用，值为<a href="dubbo:registry" target="_blank" rel="noopener noreferrer">dubbo:registry</a>的id属性，多个注册中心ID用逗号分隔，如果不想将该服务注册到任何registry，可将值设为N/A</td><td>缺省向所有registry注册</td></tr><tr><td>provider</td><td>string</td><td>可选</td><td>指定provider，值为<a href="dubbo:provider" target="_blank" rel="noopener noreferrer">dubbo:provider</a>的id属性</td><td>缺省使用第一个provider配置</td></tr><tr><td>deprecated</td><td>boolean</td><td>可选</td><td>服务是否过时，如果设为true，消费方引用时将打印服务过时警告error日志</td><td>false</td></tr><tr><td>dynamic</td><td>boolean</td><td>可选</td><td>服务是否动态注册，如果设为false，注册后将显示后disable状态，需人工启用，并且服务提供者停止时，也不会自动取消册，需人工禁用。</td><td>true</td></tr><tr><td>accesslog</td><td>string/boolean</td><td>可选</td><td>设为true，将向logger中输出访问日志，也可填写访问日志文件路径，直接把访问日志输出到指定文件</td><td>false</td></tr><tr><td>owner</td><td>string</td><td>可选</td><td>服务负责人，用于服务治理，请填写负责人公司邮箱前缀</td><td></td></tr><tr><td>document</td><td>string</td><td>可选</td><td>服务文档URL</td><td></td></tr><tr><td>weight</td><td>int</td><td>可选</td><td>服务权重</td><td></td></tr><tr><td>executes</td><td>int</td><td>可选</td><td>服务提供者每服务每方法最大可并行执行请求数</td><td>0</td></tr><tr><td>proxy</td><td>string</td><td>可选</td><td>生成动态代理方式，可选：jdk/javassist</td><td>javassist</td></tr><tr><td>cluster</td><td>string</td><td>可选</td><td>集群方式，可选：failover/failfast/failsafe/failback/forking</td><td>failover</td></tr><tr><td>filter</td><td>string</td><td>可选</td><td>服务提供方远程调用过程拦截器名称，多个名称用逗号分隔</td><td>default</td></tr><tr><td>listener</td><td>string</td><td>可选</td><td>服务提供方导出服务监听器名称，多个名称用逗号分隔</td><td>default</td></tr><tr><td>protocol</td><td>string</td><td>可选</td><td>使用指定的协议暴露服务，在多协议时使用，值为<a href="dubbo:protocol" target="_blank" rel="noopener noreferrer">dubbo:protocol</a>的id属性，多个协议ID用逗号分隔</td><td></td></tr><tr><td>layer</td><td>string</td><td>可选</td><td>服务提供者所在的分层。如：biz、dao、intl:web、china:acton。</td><td></td></tr><tr><td>register</td><td>boolean</td><td>可选</td><td>该协议的服务是否注册到注册中心</td><td>true</td></tr></tbody></table><h2 id="dubbo-monitor" tabindex="-1"><a class="header-anchor" href="#dubbo-monitor"><span>dubbo:monitor</span></a></h2><p>监控中心配置。</p><p>对应的配置类：<em>org.apache.dubbo.config.MonitorConfig</em></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>protocol</td><td>string</td><td>可选</td><td>监控中心协议，如果为protocol=“registry”，表示从注册中心发现监控中心地址，否则直连监控中心。</td><td>dubbo</td></tr><tr><td>address</td><td>string</td><td>可选</td><td>直连监控中心服务器地址，address=“10.20.130.230:12080”</td><td>N/A</td></tr></tbody></table><h2 id="dubbo-reference" tabindex="-1"><a class="header-anchor" href="#dubbo-reference"><span>dubbo:reference</span></a></h2><p>服务消费者引用服务配置。</p><p>对应的配置类：<em>org.apache.dubbo.config.ReferenceConfig</em></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th><th>缺省值</th></tr></thead><tbody><tr><td>id</td><td>string</td><td><em>必填</em></td><td>服务引用BeanId</td><td></td></tr><tr><td>interface</td><td>class</td><td><em>必填</em></td><td>服务接口名</td><td></td></tr><tr><td>version</td><td>string</td><td>可选</td><td>服务版本，与服务提供者的版本一致</td><td></td></tr><tr><td>group</td><td>string</td><td>可选</td><td>服务分组，当一个接口有多个实现，可以用分组区分，必需和服务提供方一致</td><td></td></tr><tr><td>timeout</td><td>long</td><td>可选</td><td>服务方法调用超时时间(毫秒)</td><td>缺省使用<a href="dubbo:consumer" target="_blank" rel="noopener noreferrer">dubbo:consumer</a>的timeout</td></tr><tr><td>retries</td><td>int</td><td>可选</td><td>远程服务调用重试次数，不包括第一次调用，不需要重试请设为0</td><td>缺省使用<a href="dubbo:consumer" target="_blank" rel="noopener noreferrer">dubbo:consumer</a>的retries</td></tr><tr><td>connections</td><td>int</td><td>可选</td><td>对每个提供者的最大连接数，rmi、http、hessian等短连接协议表示限制连接数，dubbo等长连接协表示建立的长连接个数</td><td>缺省使用<a href="dubbo:consumer" target="_blank" rel="noopener noreferrer">dubbo:consumer</a>的connections</td></tr><tr><td>loadbalance</td><td>string</td><td>可选</td><td>负载均衡策略，可选值：random,roundrobin,leastactive，分别表示：随机，轮询，最少活跃调用</td><td>缺省使用<a href="dubbo:consumer" target="_blank" rel="noopener noreferrer">dubbo:consumer</a>的loadbalance</td></tr><tr><td>async</td><td>boolean</td><td>可选</td><td>是否异步执行，不可靠异步，只是忽略返回值，不阻塞执行线程</td><td>缺省使用<a href="dubbo:consumer" target="_blank" rel="noopener noreferrer">dubbo:consumer</a>的async</td></tr><tr><td>generic</td><td>boolean</td><td>可选</td><td>是否缺省泛化接口，如果为泛化接口，将返回GenericService</td><td>缺省使用<a href="dubbo:consumer" target="_blank" rel="noopener noreferrer">dubbo:consumer</a>的generic</td></tr><tr><td>check</td><td>boolean</td><td>可选</td><td>启动时检查提供者是否存在，true报错，false忽略</td><td>缺省使用<a href="dubbo:consumer" target="_blank" rel="noopener noreferrer">dubbo:consumer</a>的check</td></tr><tr><td>url</td><td>string</td><td>可选</td><td>点对点直连服务提供者地址，将绕过注册中心</td><td></td></tr><tr><td>stub</td><td>class/boolean</td><td>可选</td><td>服务接口客户端本地代理类名，用于在客户端执行本地逻辑，如本地缓存等，该本地代理类的构造函数必须允许传入远程代理对象，构造函数如：public XxxServiceLocal(XxxService xxxService)</td><td></td></tr><tr><td>mock</td><td>class/boolean</td><td>可选</td><td>服务接口调用失败Mock实现类名，该Mock类必须有一个无参构造函数，与Local的区别在于，Local总是被执行，而Mock只在出现非业务异常(比如超时，网络异常等)时执行，Local在远程调用之前执行，Mock在远程调用后执行。</td><td></td></tr><tr><td>cache</td><td>string/boolean</td><td>可选</td><td>以调用参数为key，缓存返回结果，可选：lru, threadlocal, jcache等</td><td></td></tr><tr><td>validation</td><td>boolean</td><td>可选</td><td>是否启用JSR303标准注解验证，如果启用，将对方法参数上的注解进行校验</td><td></td></tr><tr><td>proxy</td><td>boolean</td><td>可选</td><td>选择动态代理实现策略，可选：javassist, jdk</td><td>javassist</td></tr><tr><td>client</td><td>string</td><td>可选</td><td>客户端传输类型设置，如Dubbo协议的netty或mina。</td><td></td></tr><tr><td>registry</td><td>string</td><td>可选</td><td>从指定注册中心注册获取服务列表，在多个注册中心时使用，值为<a href="dubbo:registry" target="_blank" rel="noopener noreferrer">dubbo:registry</a>的id属性，多个注册中心ID用逗号分隔</td><td>缺省将从所有注册中心获服务列表后合并结果</td></tr><tr><td>owner</td><td>string</td><td>可选</td><td>调用服务负责人，用于服务治理，请填写负责人公司邮箱前缀</td><td></td></tr><tr><td>actives</td><td>int</td><td>可选</td><td>每服务消费者每服务每方法最大并发调用数</td><td>0</td></tr><tr><td>cluster</td><td>string</td><td>可选</td><td>集群方式，可选：failover/failfast/failsafe/failback/forking</td><td>failover</td></tr><tr><td>filter</td><td>string</td><td>可选</td><td>服务消费方远程调用过程拦截器名称，多个名称用逗号分隔</td><td>default</td></tr><tr><td>listener</td><td>string</td><td>可选</td><td>服务消费方引用服务监听器名称，多个名称用逗号分隔</td><td>default</td></tr><tr><td>layer</td><td>string</td><td>可选</td><td>服务调用者所在的分层。如：biz、dao、intl:web、china:acton。</td><td></td></tr><tr><td>init</td><td>boolean</td><td>可选</td><td>是否在afterPropertiesSet()时饥饿初始化引用，否则等到有人注入或引用该实例时再初始化。</td><td>false</td></tr><tr><td>protocol</td><td>string</td><td>可选</td><td>属性只调用指定协议的服务提供方，其它协议忽略。</td><td>对应URL参数</td></tr></tbody></table><h2 id="dubbo-config-center" tabindex="-1"><a class="header-anchor" href="#dubbo-config-center"><span>dubbo:config-center</span></a></h2><p>配置中心。</p><p>对应的配置类：<em>org.apache.dubbo.config.ConfigCenterConfig</em></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>protocol</td><td>string</td><td>可选</td><td>使用哪个配置中心：apollo、zookeeper、nacos等。 以zookeeper为例 1. 指定protocol，则address可以简化为<code>127.0.0.1:2181</code>； 2. 不指定protocol，则address取值为<code>zookeeper://127.0.0.1:2181</code></td><td>zookeeper</td></tr><tr><td>address</td><td>string</td><td><em>必填</em></td><td>配置中心地址。 取值参见protocol说明</td><td></td></tr><tr><td>highest-priority</td><td>boolean</td><td>可选</td><td>来自配置中心的配置项具有最高优先级，即会覆盖本地配置项。</td><td>true</td></tr><tr><td>namespace</td><td>string</td><td>可选</td><td>通常用于多租户隔离，实际含义视具体配置中心而不同。 如： zookeeper - 环境隔离，默认值<code>dubbo</code>； apollo - 区分不同领域的配置集合，默认使用<code>dubbo</code>和<code>application</code></td><td>dubbo</td></tr><tr><td>cluster</td><td>string</td><td>可选</td><td>含义视所选定的配置中心而不同。 如Apollo中用来区分不同的配置集群</td><td></td></tr><tr><td>group</td><td>string</td><td>可选</td><td>含义视所选定的配置中心而不同。 nacos - 隔离不同配置集 zookeeper - 隔离不同配置集</td><td>dubbo</td></tr><tr><td>check</td><td>boolean</td><td>可选</td><td>当配置中心连接失败时，是否终止应用启动。</td><td>true</td></tr><tr><td>config-file</td><td>string</td><td>可选</td><td>全局级配置文件所映射到的key zookeeper - 默认路径/dubbo/config/dubbo/dubbo.properties apollo - dubbo namespace中的dubbo.properties键</td><td>dubbo.properties</td></tr><tr><td>timeout</td><td>integer</td><td></td><td>获取配置的超时时间</td><td>3000ms</td></tr><tr><td>username</td><td>string</td><td></td><td>如果配置中心需要做校验，用户名 Apollo暂未启用</td><td></td></tr><tr><td>password</td><td>string</td><td></td><td>如果配置中心需要做校验，密码 Apollo暂未启用</td><td></td></tr><tr><td>parameters</td><td>Map&lt;string, string&gt;</td><td></td><td>扩展参数，用来支持不同配置中心的定制化配置参数</td><td></td></tr><tr><td>include-spring-env</td><td>boolean</td><td>可选</td><td>使用Spring框架时支持，为true时，会自动从Spring Environment中读取配置。 默认依次读取 key为dubbo.properties的配置 key为dubbo.properties的PropertySource</td><td>false</td></tr></tbody></table><h2 id="dubbo-provider" tabindex="-1"><a class="header-anchor" href="#dubbo-provider"><span>dubbo:provider</span></a></h2><p>服务提供者缺省值配置。</p><p>对应的配置类： <em>org.apache.dubbo.config.ProviderConfig</em>。</p><p>同时该标签为 <code>&lt;dubbo:service&gt;</code> 和 <code>&lt;dubbo:protocol&gt;</code> 标签的缺省值设置。</p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>id</td><td>string</td><td>可选</td><td>协议BeanId，可以在&lt;dubbo:service proivder=&quot;&quot;&gt;中引用此ID</td><td>dubbo</td></tr><tr><td>protocol</td><td>string</td><td>可选</td><td>协议名称</td><td>dubbo</td></tr><tr><td>host</td><td>string</td><td>可选</td><td>服务主机名，多网卡选择或指定VIP及域名时使用，为空则自动查找本机IP，建议不要配置，让Dubbo自动获取本机IP</td><td>自动查找本机IP</td></tr><tr><td>threads</td><td>int</td><td>可选</td><td>服务线程池大小(固定大小)</td><td>200</td></tr><tr><td>payload</td><td>int</td><td>可选</td><td>请求及响应数据包大小限制，单位：字节</td><td>8388608(=8M)</td></tr><tr><td>path</td><td>string</td><td>可选</td><td>提供者上下文路径，为服务path的前缀</td><td></td></tr><tr><td>server</td><td>string</td><td>可选</td><td>协议的服务器端实现类型，比如：dubbo协议的mina,netty等，http协议的jetty,servlet等</td><td>dubbo协议缺省为netty，http协议缺省为servlet</td></tr><tr><td>client</td><td>string</td><td>可选</td><td>协议的客户端实现类型，比如：dubbo协议的mina,netty等</td><td>dubbo协议缺省为netty</td></tr><tr><td>codec</td><td>string</td><td>可选</td><td>协议编码方式</td><td>dubbo</td></tr><tr><td>serialization</td><td>string</td><td>可选</td><td>协议序列化方式，当协议支持多种序列化方式时使用，比如：dubbo协议的dubbo,hessian2,java,compactedjava，以及http协议的json,xml等</td><td>dubbo协议缺省为hessian2，rmi协议缺省为java，http协议缺省为json</td></tr><tr><td>default</td><td>boolean</td><td>可选</td><td>是否为缺省协议，用于多协议</td><td>false</td></tr><tr><td>filter</td><td>string</td><td>可选</td><td>服务提供方远程调用过程拦截器名称，多个名称用逗号分隔</td><td></td></tr><tr><td>listener</td><td>string</td><td>可选</td><td>服务提供方导出服务监听器名称，多个名称用逗号分隔</td><td></td></tr><tr><td>threadpool</td><td>string</td><td>可选</td><td>线程池类型，可选：fixed/cached/limit(2.5.3以上)/eager(2.6.x以上)</td><td>fixed</td></tr><tr><td>accepts</td><td>int</td><td>可选</td><td>服务提供者最大可接受连接数</td><td>0</td></tr><tr><td>version</td><td>string</td><td>可选</td><td>服务版本，建议使用两位数字版本，如：1.0，通常在接口不兼容时版本号才需要升级</td><td>0.0.0</td></tr><tr><td>group</td><td>string</td><td>可选</td><td>服务分组，当一个接口有多个实现，可以用分组区分</td><td></td></tr><tr><td>delay</td><td>int</td><td>可选</td><td>延迟注册服务时间(毫秒)- ，设为-1时，表示延迟到Spring容器初始化完成时暴露服务</td><td>0</td></tr><tr><td>timeout</td><td>int</td><td>可选</td><td>远程服务调用超时时间(毫秒)</td><td>1000</td></tr><tr><td>retries</td><td>int</td><td>可选</td><td>远程服务调用重试次数，不包括第一次调用，不需要重试请设为0</td><td>2</td></tr><tr><td>connections</td><td>int</td><td>可选</td><td>对每个提供者的最大连接数，rmi、http、hessian等短连接协议表示限制连接数，dubbo等长连接协表示建立的长连接个数</td><td>0</td></tr><tr><td>loadbalance</td><td>string</td><td>可选</td><td>负载均衡策略，可选值：random,roundrobin,leastactive，分别表示：随机，轮询，最少活跃调用</td><td>random</td></tr><tr><td>async</td><td>boolean</td><td>可选</td><td>是否缺省异步执行，不可靠异步，只是忽略返回值，不阻塞执行线程</td><td>false</td></tr><tr><td>stub</td><td>boolean</td><td>可选</td><td>设为true，表示使用缺省代理类名，即：接口名 + Local后缀。</td><td>false</td></tr><tr><td>mock</td><td>boolean</td><td>可选</td><td>设为true，表示使用缺省Mock类名，即：接口名 + Mock后缀。</td><td>false</td></tr><tr><td>token</td><td>boolean</td><td>可选</td><td>令牌验证，为空表示不开启，如果为true，表示随机生成动态令牌</td><td>false</td></tr><tr><td>registry</td><td>string</td><td>可选</td><td>向指定注册中心注册，在多个注册中心时使用，值为<a href="dubbo:registry" target="_blank" rel="noopener noreferrer">dubbo:registry</a>的id属性，多个注册中心ID用逗号分隔，如果不想将该服务注册到任何registry，可将值设为N/A</td><td>缺省向所有registry注册</td></tr><tr><td>dynamic</td><td>boolean</td><td>可选</td><td>服务是否动态注册，如果设为false，注册后将显示后disable状态，需人工启用，并且服务提供者停止时，也不会自动取消册，需人工禁用。</td><td>true</td></tr><tr><td>accesslog</td><td>string/boolean</td><td>可选</td><td>设为true，将向logger中输出访问日志，也可填写访问日志文件路径，直接把访问日志输出到指定文件</td><td>false</td></tr><tr><td>owner</td><td>string</td><td>可选</td><td>服务负责人，用于服务治理，请填写负责人公司邮箱前缀</td><td></td></tr><tr><td>document</td><td>string</td><td>可选</td><td>服务文档URL</td><td></td></tr><tr><td>weight</td><td>int</td><td>可选</td><td>服务权重</td><td></td></tr><tr><td>executes</td><td>int</td><td>可选</td><td>服务提供者每服务每方法最大可并行执行请求数</td><td>0</td></tr><tr><td>actives</td><td>int</td><td>可选</td><td>每服务消费者每服务每方法最大并发调用数</td><td>0</td></tr><tr><td>proxy</td><td>string</td><td>可选</td><td>生成动态代理方式，可选：jdk/javassist</td><td>javassist</td></tr><tr><td>cluster</td><td>string</td><td>可选</td><td>集群方式，可选：failover/failfast/failsafe/failback/forking</td><td>failover</td></tr><tr><td>deprecated</td><td>boolean</td><td>可选</td><td>服务是否过时，如果设为true，消费方引用时将打印服务过时警告error日志</td><td>false</td></tr><tr><td>queues</td><td>int</td><td>可选</td><td>线程池队列大小，当线程池满时，排队等待执行的队列大小，建议不要设置，当线程池满时应立即失败，重试其它服务提供机器，而不是排队，除非有特殊需求。</td><td>0</td></tr><tr><td>charset</td><td>string</td><td>可选</td><td>序列化编码</td><td>UTF-8</td></tr><tr><td>buffer</td><td>int</td><td>可选</td><td>网络读写缓冲区大小</td><td>8192</td></tr><tr><td>iothreads</td><td>int</td><td>可选</td><td>IO线程池，接收网络读写中断，以及序列化和反序列化，不处理业务，业务线程池参见threads配置，此线程池和CPU相关，不建议配置。</td><td>CPU + 1</td></tr><tr><td>telnet</td><td>string</td><td>可选</td><td>所支持的telnet命令，多个命令用逗号分隔</td><td></td></tr><tr><td><a href="dubbo:service" target="_blank" rel="noopener noreferrer">dubbo:service</a></td><td>String</td><td>可选</td><td></td><td>缺省为空串</td></tr><tr><td>layer</td><td>string</td><td>可选</td><td>服务提供者所在的分层。如：biz、dao、intl:web、china:acton。</td><td></td></tr></tbody></table><h2 id="dubbo-consumer" tabindex="-1"><a class="header-anchor" href="#dubbo-consumer"><span>dubbo:consumer</span></a></h2><p>服务消费者缺省值配置。</p><p>配置类： <em>org.apache.dubbo.config.ConsumerConfig</em></p><p>同时该标签为 <code>&lt;dubbo:reference&gt;</code> 标签的缺省值设置。</p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>timeout</td><td>int</td><td>可选</td><td>远程服务调用超时时间(毫秒)</td><td>1000</td></tr><tr><td>retries</td><td>int</td><td>可选</td><td>远程服务调用重试次数，不包括第一次调用，不需要重试请设为0,仅在cluster为failback/failover时有效</td><td>2</td></tr><tr><td>loadbalance</td><td>string</td><td>可选</td><td>负载均衡策略，可选值：random,roundrobin,leastactive，分别表示：随机，轮询，最少活跃调用</td><td>random</td></tr><tr><td>async</td><td>boolean</td><td>可选</td><td>是否缺省异步执行，不可靠异步，只是忽略返回值，不阻塞执行线程</td><td>false</td></tr><tr><td>connections</td><td>int</td><td>可选</td><td>每个服务对每个提供者的最大连接数，rmi、http、hessian等短连接协议支持此配置，dubbo协议长连接不支持此配置</td><td>100</td></tr><tr><td>generic</td><td>boolean</td><td>可选</td><td>是否缺省泛化接口，如果为泛化接口，将返回GenericService</td><td>false</td></tr><tr><td>check</td><td>boolean</td><td>可选</td><td>启动时检查提供者是否存在，true报错，false忽略</td><td>true</td></tr><tr><td>proxy</td><td>string</td><td>可选</td><td>生成动态代理方式，可选：jdk/javassist</td><td>javassist</td></tr><tr><td>owner</td><td>string</td><td>可选</td><td>调用服务负责人，用于服务治理，请填写负责人公司邮箱前缀</td><td></td></tr><tr><td>actives</td><td>int</td><td>可选</td><td>每服务消费者每服务每方法最大并发调用数</td><td>0</td></tr><tr><td>cluster</td><td>string</td><td>可选</td><td>集群方式，可选：failover/failfast/failsafe/failback/forking</td><td>failover</td></tr><tr><td>filter</td><td>string</td><td>可选</td><td>服务消费方远程调用过程拦截器名称，多个名称用逗号分隔</td><td></td></tr><tr><td>listener</td><td>string</td><td>可选</td><td>服务消费方引用服务监听器名称，多个名称用逗号分隔</td><td></td></tr><tr><td>registry</td><td>string</td><td>可选</td><td>向指定注册中心注册，在多个注册中心时使用，值为<a href="dubbo:registry" target="_blank" rel="noopener noreferrer">dubbo:registry</a>的id属性，多个注册中心ID用逗号分隔，如果不想将该服务注册到任何registry，可将值设为N/A</td><td>缺省向所有registry注册</td></tr><tr><td>layer</td><td>string</td><td>可选</td><td>服务调用者所在的分层。如：biz、dao、intl:web、china:acton。</td><td></td></tr><tr><td>init</td><td>boolean</td><td>可选</td><td>是否在afterPropertiesSet()时饥饿初始化引用，否则等到有人注入或引用该实例时再初始化。</td><td>false</td></tr><tr><td>cache</td><td>string/boolean</td><td>可选</td><td>以调用参数为key，缓存返回结果，可选：lru, threadlocal, jcache等</td><td></td></tr><tr><td>validation</td><td>boolean</td><td>可选</td><td>是否启用JSR303标准注解验证，如果启用，将对方法参数上的注解进行校验</td><td></td></tr></tbody></table><h2 id="dubbo-module" tabindex="-1"><a class="header-anchor" href="#dubbo-module"><span>dubbo:module</span></a></h2><p>模块信息配置。</p><p>对应的配置类 <em>org.apache.dubbo.config.ModuleConfig</em></p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>string</td><td><em>必填</em></td><td>当前模块名称，用于注册中心计算模块间依赖关系</td></tr><tr><td>version</td><td>string</td><td>可选</td><td>当前模块的版本</td></tr><tr><td>owner</td><td>string</td><td>可选</td><td>模块负责人，用于服务治理，请填写负责人公司邮箱前缀</td></tr><tr><td>organization</td><td>string</td><td>可选</td><td>组织名称(BU或部门)，用于注册中心区分服务来源，此配置项建议不要使用autoconfig，直接写死在配置中，比如china,intl,itu,crm,asc,dw,aliexpress等</td></tr></tbody></table><h2 id="dubbo-method" tabindex="-1"><a class="header-anchor" href="#dubbo-method"><span>dubbo:method</span></a></h2><p>方法级配置。</p><p>对应的配置类： <em>org.apache.dubbo.config.MethodConfig</em>。</p><p>同时该标签为 <code>&lt;dubbo:service&gt;</code> 或 <code>&lt;dubbo:reference&gt;</code> 的子标签，用于控制到方法级。</p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>name</td><td>string</td><td><em>必填</em></td><td>方法名</td><td></td></tr><tr><td>timeout</td><td>int</td><td>可选</td><td>方法调用超时时间(毫秒)</td><td>缺省为的timeout</td></tr><tr><td>retries</td><td>int</td><td>可选</td><td>远程服务调用重试次数，不包括第一次调用，不需要重试请设为0</td><td>缺省为<a href="dubbo:reference" target="_blank" rel="noopener noreferrer">dubbo:reference</a>的retries</td></tr><tr><td>loadbalance</td><td>string</td><td>可选</td><td>负载均衡策略，可选值：random,roundrobin,leastactive，分别表示：随机，轮询，最少活跃调用</td><td>缺省为的loadbalance</td></tr><tr><td>async</td><td>boolean</td><td>可选</td><td>是否异步执行，不可靠异步，只是忽略返回值，不阻塞执行线程</td><td>缺省为<a href="dubbo:reference" target="_blank" rel="noopener noreferrer">dubbo:reference</a>的async</td></tr><tr><td>sent</td><td>boolean</td><td>可选</td><td>异步调用时，标记sent=true时，表示网络已发出数据</td><td>true</td></tr><tr><td>actives</td><td>int</td><td>可选</td><td>每服务消费者最大并发调用限制</td><td>0</td></tr><tr><td>executes</td><td>int</td><td>可选</td><td>每服务每方法最大使用线程数限制- -，此属性只在<a href="dubbo:method" target="_blank" rel="noopener noreferrer">dubbo:method</a>作为<a href="dubbo:service" target="_blank" rel="noopener noreferrer">dubbo:service</a>子标签时有效</td><td>0</td></tr><tr><td>deprecated</td><td>boolean</td><td>可选</td><td>服务方法是否过时，此属性只在<a href="dubbo:method" target="_blank" rel="noopener noreferrer">dubbo:method</a>作为<a href="dubbo:service" target="_blank" rel="noopener noreferrer">dubbo:service</a>子标签时有效</td><td>false</td></tr><tr><td>sticky</td><td>boolean</td><td>可选</td><td>设置true 该接口上的所有方法使用同一个provider.如果需要更复杂的规则，请使用路由</td><td>false</td></tr><tr><td>return</td><td>boolean</td><td>可选</td><td>方法调用是否需要返回值,async设置为true时才生效，如果设置为true，则返回future，或回调onreturn等方法，如果设置为false，则请求发送成功后直接返回Null</td><td>true</td></tr><tr><td>oninvoke</td><td>String</td><td>可选</td><td>方法执行前拦截</td><td></td></tr><tr><td>onreturn</td><td>String</td><td>可选</td><td>方法执行返回后拦截</td><td></td></tr><tr><td>onthrow</td><td>String</td><td>可选</td><td>方法执行有异常拦截</td><td></td></tr><tr><td>cache</td><td>string/boolean</td><td>可选</td><td>以调用参数为key，缓存返回结果，可选：lru, threadlocal, jcache等</td><td></td></tr><tr><td>validation</td><td>boolean</td><td>可选</td><td>是否启用JSR303标准注解验证，如果启用，将对方法参数上的注解进行校验</td><td></td></tr></tbody></table><h2 id="dubbo-argument" tabindex="-1"><a class="header-anchor" href="#dubbo-argument"><span>dubbo:argument</span></a></h2><p>方法参数配置。</p><p>对应的配置类： org.apache.dubbo.config.ArgumentConfig。</p><p>该标签为 <code>&lt;dubbo:method&gt;</code> 的子标签，用于方法参数的特征描述</p><table><thead><tr><th>属性</th><th>类型</th><th>是否必填</th><th>描述</th></tr></thead><tbody><tr><td>index</td><td>int</td><td><em>必填</em></td><td>参数索引</td></tr><tr><td>type</td><td>String</td><td>与index二选一</td><td>通过参数类型查找参数的index</td></tr><tr><td>callback</td><td>boolean</td><td>可选</td><td>参数是否为callback接口，如果为callback，服务提供方将生成反向代理，可以从服务提供方反向调用消费方，通常用于事件推送.</td></tr></tbody></table>',56)]))}const c=d(a,[["render",n]]),l=JSON.parse('{"path":"/dubbo/docs/config_tag.html","title":"各配置项、标签说明","lang":"zh-CN","frontmatter":{"description":"各配置项、标签说明 dubbo:application 对应配置类org.apache.dubbo.config.ApplicationConfig 属性： dubbo:registry 注册中心配置 对应的配置类： org.apache.dubbo.config.RegistryConfig 可以有多个 dubbo:protocol 服务提供者协议配...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"各配置项、标签说明\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-13T01:18:18.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/dubbo/docs/config_tag.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"各配置项、标签说明"}],["meta",{"property":"og:description","content":"各配置项、标签说明 dubbo:application 对应配置类org.apache.dubbo.config.ApplicationConfig 属性： dubbo:registry 注册中心配置 对应的配置类： org.apache.dubbo.config.RegistryConfig 可以有多个 dubbo:protocol 服务提供者协议配..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-13T01:18:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-13T01:18:18.000Z"}]]},"git":{"createdTime":1640313645000,"updatedTime":1747099098000,"contributors":[{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":3},{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"}]},"readingTime":{"minutes":22.79,"words":6836},"filePathRelative":"dubbo/docs/config_tag.md","excerpt":"\\n<h2>dubbo:application</h2>\\n<p>对应配置类<em>org.apache.dubbo.config.ApplicationConfig</em></p>","autoDesc":true}');export{c as comp,l as data};
