import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as p}from"./app-rQI8KFp-.js";const e={};function t(l,s){return p(),a("div",null,s[0]||(s[0]=[n(`<h1 id="异步" tabindex="-1"><a class="header-anchor" href="#异步"><span>异步</span></a></h1><p>Dart 代码库中有大量返回 Future 或 Stream 对象的函数，这些函数都是异步的，它们会在耗时操作（比如 I/O）执行完毕前直接返回而不会等待耗时操作执行完毕。</p><h2 id="future" tabindex="-1"><a class="header-anchor" href="#future"><span>Future</span></a></h2><p>通过下面的方式可以获得 Future 执行完成的结果：</p><ul><li>使用 <code>async</code> 和 <code>await</code>。</li><li>使用 Future API。</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>必须在带有 async 关键字的异步函数中使用 await。</p><p>异步函数的返回值类型应当是 Future。</p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li><code>Future&lt;T&gt;</code> 实例会返回一个类型为 T 的值。</li><li>如果一个 Future 实例没有可用的返回值，则这个实例的类型是 <code>Future&lt;void&gt;</code>。</li><li>一个 Future 实例可以是已完成或者是未完成状态。</li><li>当调用一个返回 Future 的方法时，这个方法会把任务加入队列然后返回一个未完成状态的 Future 实例。</li><li>当一个 Future 实例的操作完成时，这个实例会进入完成状态并附带一个值或者是错误。</li></ul></div><h2 id="声明异步函数" tabindex="-1"><a class="header-anchor" href="#声明异步函数"><span>声明异步函数</span></a></h2><p>异步函数是函数体被 <code>async</code> 关键字标记的函数。</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-dart"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">import</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;dart:io&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Future</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">String</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">&gt;</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">demo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">({</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">int</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">second</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">})</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">async</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">sleep</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Duration</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(seconds</span><span style="--shiki-dark:#C678DD;--shiki-light:#000000;">:</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">second));</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">return</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&quot;wuhu&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">void</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">main</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">List</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">String</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">&gt;</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">args)</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">async</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">var</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">d</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">await</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">demo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(second</span><span style="--shiki-dark:#C678DD;--shiki-light:#000000;">:</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">3</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">print</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(d);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Future 非常类似 JavaScript 中的 Promise：</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-dart"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Future</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">String</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">&gt;</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">fetchUser</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">()</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">async</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">return</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Future</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">delayed</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Duration</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(seconds</span><span style="--shiki-dark:#C678DD;--shiki-light:#000000;">:</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">3</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">),</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">()</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=&gt;</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&quot;test&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">void</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">main</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">List</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">String</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">&gt;</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">args)</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">fetchUser</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">().</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">then</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">((value)</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=&gt;</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">print</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(value)).</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">catchError</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">((e)</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">print</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(e);</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">});</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stream" tabindex="-1"><a class="header-anchor" href="#stream"><span>Stream</span></a></h2><p>从 Stream 中获取值的方法：</p><ul><li>使用 <code>async</code> 关键字和一个异步循环（<code>await for</code>）。</li><li>使用 Stream API。</li></ul><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-dart"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">await</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">for</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(varOrType</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">identifier</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">in</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">expression)</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">//</span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">Executes</span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">each</span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">time</span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">the</span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">stream</span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">emits</span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">a</span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">value.</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表达式的类型必须是 Stream，执行流程如下：</p><ul><li>等待直到 Stream 返回一个数据。</li><li>使用 Stream 返回的数据执行循环体。</li><li>重复上面两个过程直到 Stream 的数据返回完毕。</li></ul>`,18)]))}const r=i(e,[["render",t]]),c=JSON.parse('{"path":"/dart/docs/async.html","title":"异步","lang":"zh-CN","frontmatter":{"description":"异步 Dart 代码库中有大量返回 Future 或 Stream 对象的函数，这些函数都是异步的，它们会在耗时操作（比如 I/O）执行完毕前直接返回而不会等待耗时操作执行完毕。 Future 通过下面的方式可以获得 Future 执行完成的结果： 使用 async 和 await。 使用 Future API。 注意 必须在带有 async 关键字的...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"异步\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-03-11T08:44:00.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/dart/docs/async.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"异步"}],["meta",{"property":"og:description","content":"异步 Dart 代码库中有大量返回 Future 或 Stream 对象的函数，这些函数都是异步的，它们会在耗时操作（比如 I/O）执行完毕前直接返回而不会等待耗时操作执行完毕。 Future 通过下面的方式可以获得 Future 执行完成的结果： 使用 async 和 await。 使用 Future API。 注意 必须在带有 async 关键字的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-03-11T08:44:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-03-11T08:44:00.000Z"}]]},"git":{"createdTime":1646988240000,"updatedTime":1646988240000,"contributors":[{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":1}]},"readingTime":{"minutes":1.5,"words":450},"filePathRelative":"dart/docs/async.md","excerpt":"\\n<p>Dart 代码库中有大量返回 Future 或 Stream 对象的函数，这些函数都是异步的，它们会在耗时操作（比如 I/O）执行完毕前直接返回而不会等待耗时操作执行完毕。</p>","autoDesc":true}');export{r as comp,c as data};
