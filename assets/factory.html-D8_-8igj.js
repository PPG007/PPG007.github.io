import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,d as a,o as n}from"./app-rQI8KFp-.js";const o="/assets/image-20210901103841094-B44z-SvL.png",r={};function p(s,t){return n(),i("div",null,t[0]||(t[0]=[a('<h1 id="工厂方法模式" tabindex="-1"><a class="header-anchor" href="#工厂方法模式"><span>工厂方法模式</span></a></h1><div class="hint-container tip"><p class="hint-container-title">定义</p><p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。</p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>工厂方法使一个类的实例化延迟到其子类。</p></div><p><img src="'+o+'" alt="image-20210901103841094"></p><h2 id="工厂方法模式的优点" tabindex="-1"><a class="header-anchor" href="#工厂方法模式的优点"><span>工厂方法模式的优点</span></a></h2><ul><li>良好的封装性，代码结构清晰，调用者只要知道类名就可以生产。</li><li>扩展性好，在增加产品类的情况下只要适当地修改具体工厂类或扩展一个工厂类即可。</li><li>屏蔽产品类。只要接口不变，上层模块就不变。</li><li>解耦。</li></ul><h2 id="工厂方法模式使用场景" tabindex="-1"><a class="header-anchor" href="#工厂方法模式使用场景"><span>工厂方法模式使用场景</span></a></h2><ul><li>所有需要生成对象的地方，但要注意是否需要这么做，避免增加复杂度。</li><li>需要灵活、可扩展的框架（Spring）。</li><li>异构项目，减少与外围系统的耦合。</li><li>测试驱动开发的框架。</li></ul><h2 id="工厂方法模式的扩展" tabindex="-1"><a class="header-anchor" href="#工厂方法模式的扩展"><span>工厂方法模式的扩展</span></a></h2><ol><li>缩小为简单工厂模式：工厂类不再需要抽象类，且将方法变为静态。</li><li>升级为多个工厂类：为每个产品定义一个创造者，每个创造者都对应一种产品。</li><li>替代单例模式：工厂持有一个未初始化的单例对象，此单例对象的构造器私有化，单例工厂通过反射生成一个此对象。</li><li>延迟初始化：一个对象被消费完毕后不立刻释放，工厂类通过Map等结构缓存，如果再次受到同类资源的请求直接从缓存中获取即可。</li></ol>',10)]))}const m=e(r,[["render",p]]),d=JSON.parse('{"path":"/design-pattern/docs/factory.html","title":"工厂方法模式","lang":"zh-CN","frontmatter":{"description":"工厂方法模式 定义 定义一个用于创建对象的接口，让子类决定实例化哪一个类。 提示 工厂方法使一个类的实例化延迟到其子类。 image-20210901103841094 工厂方法模式的优点 良好的封装性，代码结构清晰，调用者只要知道类名就可以生产。 扩展性好，在增加产品类的情况下只要适当地修改具体工厂类或扩展一个工厂类即可。 屏蔽产品类。只要接口不变，...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"工厂方法模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-08-15T09:32:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/design-pattern/docs/factory.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"工厂方法模式"}],["meta",{"property":"og:description","content":"工厂方法模式 定义 定义一个用于创建对象的接口，让子类决定实例化哪一个类。 提示 工厂方法使一个类的实例化延迟到其子类。 image-20210901103841094 工厂方法模式的优点 良好的封装性，代码结构清晰，调用者只要知道类名就可以生产。 扩展性好，在增加产品类的情况下只要适当地修改具体工厂类或扩展一个工厂类即可。 屏蔽产品类。只要接口不变，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-15T09:32:39.000Z"}],["meta",{"property":"article:modified_time","content":"2022-08-15T09:32:39.000Z"}]]},"git":{"createdTime":1640855648000,"updatedTime":1660555959000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"},{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":1}]},"readingTime":{"minutes":1.32,"words":395},"filePathRelative":"design-pattern/docs/factory.md","excerpt":"\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">定义</p>\\n<p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。</p>\\n</div>","autoDesc":true}');export{m as comp,d as data};
