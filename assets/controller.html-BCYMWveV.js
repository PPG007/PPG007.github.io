import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as t,e as h,w as e,r as d,o as c,a as s,b as i}from"./app-rQI8KFp-.js";const g={};function o(B,a){const p=d("CodeTabs");return c(),k("div",null,[a[8]||(a[8]=t('<h1 id="controller" tabindex="-1"><a class="header-anchor" href="#controller"><span>Controller</span></a></h1><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础"><span>基础</span></a></h2><p>默认情况下，Controllers 保存在 <code>app/Http/Controllers</code> 目录下。</p><p>使用 <code>php artisan make:controller</code> 命令可以创建一个 Controller：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-shell"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">php</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">artisan</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">make:controller</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">MemberController</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>每个 Controller 可以包含若干公共方法，这些方法将用于响应 HTTP 请求。</p><p>然后可以定义一个指向 Controller 的路由：</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-php"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Route</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;/member/{id}&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">[</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">MemberController</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">class</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;getMember&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Controller 不需要一定要继承一个类，但是通过继承一个公共类可以方便的共享逻辑。</p></div><p>如果一个 Controller 只想提供一个接口，那么可以在 Controller 中定义 <code>__invoke()</code> 方法：</p>',10)),h(p,{data:[{id:"MemberController.php"},{id:"api.php"}],"tab-id":"controller-invoke"},{title0:e(({value:n,isActive:l})=>a[0]||(a[0]=[i("MemberController.php")])),title1:e(({value:n,isActive:l})=>a[1]||(a[1]=[i("api.php")])),tab0:e(({value:n,isActive:l})=>a[2]||(a[2]=[s("div",{class:"language-php line-numbers-mode","data-highlighter":"shiki","data-ext":"php",style:{"--shiki-dark":"#abb2bf","--shiki-light":"#000000","--shiki-dark-bg":"#282c34","--shiki-light-bg":"#FFFFFF"}},[s("pre",{class:"shiki shiki-themes one-dark-pro light-plus vp-code"},[s("code",{class:"language-php"},[s("span",{class:"line"},[s("span",{style:{"--shiki-dark":"#C678DD","--shiki-light":"#0000FF"}},"class"),s("span",{class:"space"}," "),s("span",{style:{"--shiki-dark":"#E5C07B","--shiki-light":"#267F99"}},"MemberController"),s("span",{class:"space"}," "),s("span",{style:{"--shiki-dark":"#C678DD","--shiki-light":"#0000FF"}},"extends"),s("span",{class:"space"}," "),s("span",{style:{"--shiki-dark":"#E5C07B","--shiki-light":"#267F99"}},"Controller")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#000000"}},"{")]),i(`
`),s("span",{class:"line"},[s("span",{class:"space"}," "),s("span",{class:"space"}," "),s("span",{class:"space"}," "),s("span",{class:"space"}," "),s("span",{style:{"--shiki-dark":"#C678DD","--shiki-light":"#0000FF"}},"public"),s("span",{class:"space"}," "),s("span",{style:{"--shiki-dark":"#C678DD","--shiki-light":"#0000FF"}},"function"),s("span",{class:"space"}," "),s("span",{style:{"--shiki-dark":"#56B6C2","--shiki-light":"#795E26"}},"__invoke"),s("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#000000"}},"("),s("span",{style:{"--shiki-dark":"#E5C07B","--shiki-light":"#0000FF"}},"string"),s("span",{class:"space"}," "),s("span",{style:{"--shiki-dark":"#E06C75","--shiki-light":"#001080"}},"$id"),s("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#000000"}},")")]),i(`
`),s("span",{class:"line"},[s("span",{class:"space"}," "),s("span",{class:"space"}," "),s("span",{class:"space"}," "),s("span",{class:"space"}," "),s("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#000000"}},"{")]),i(`
`),s("span",{class:"line"},[s("span",{class:"space"}," "),s("span",{class:"space"}," "),s("span",{class:"space"}," "),s("span",{class:"space"}," "),s("span",{class:"space"}," "),s("span",{class:"space"}," "),s("span",{class:"space"}," "),s("span",{class:"space"}," "),s("span",{style:{"--shiki-dark":"#C678DD","--shiki-light":"#AF00DB"}},"return"),s("span",{class:"space"}," "),s("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#000000"}},"["),s("span",{style:{"--shiki-dark":"#98C379","--shiki-light":"#A31515"}},"'id'"),s("span",{class:"space"}," "),s("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#000000"}},"=>"),s("span",{class:"space"}," "),s("span",{style:{"--shiki-dark":"#E06C75","--shiki-light":"#001080"}},"$id"),s("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#000000"}},"];")]),i(`
`),s("span",{class:"line"},[s("span",{class:"space"}," "),s("span",{class:"space"}," "),s("span",{class:"space"}," "),s("span",{class:"space"}," "),s("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#000000"}},"}")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#000000"}},"}")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:e(({value:n,isActive:l})=>a[3]||(a[3]=[s("div",{class:"language-php line-numbers-mode","data-highlighter":"shiki","data-ext":"php",style:{"--shiki-dark":"#abb2bf","--shiki-light":"#000000","--shiki-dark-bg":"#282c34","--shiki-light-bg":"#FFFFFF"}},[s("pre",{class:"shiki shiki-themes one-dark-pro light-plus vp-code"},[s("code",{class:"language-php"},[s("span",{class:"line"},[s("span",{style:{"--shiki-dark":"#E5C07B","--shiki-light":"#267F99"}},"Route"),s("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#000000"}},"::"),s("span",{style:{"--shiki-dark":"#61AFEF","--shiki-light":"#795E26"}},"get"),s("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#000000"}},"("),s("span",{style:{"--shiki-dark":"#98C379","--shiki-light":"#A31515"}},"'/members/{id}'"),s("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#000000"}},","),s("span",{class:"space"}," "),s("span",{style:{"--shiki-dark":"#E5C07B","--shiki-light":"#267F99"}},"MemberController"),s("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#000000"}},"::"),s("span",{style:{"--shiki-dark":"#C678DD","--shiki-light":"#0000FF"}},"class"),s("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#000000"}},");")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1)])),_:1}),a[9]||(a[9]=t(`<p>上面的创建 Controller 命令可以使用 <code>--invokable</code> 选项创建一个单接口的 Controller：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-shell"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">php</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">artisan</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">make:controller</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">MemberController</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#0000FF;">--invokable</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="中间件" tabindex="-1"><a class="header-anchor" href="#中间件"><span>中间件</span></a></h2><p>除了可以在 <code>api.php</code> 中像普通路由那样使用 <code>-&gt;middleware()</code> 方法来添加中间件，如果希望在 Controller 内部使用中间件，Controller 应该实现 <code>HasMiddleware</code> 接口，同时重写 <code>middleware()</code> 方法：</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-php"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">class</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">MemberController</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">extends</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Controller</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">implements</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">HasMiddleware</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">public</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">function</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#795E26;">__invoke</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#0000FF;">string</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">$id</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">)</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">return</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">[</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;id&#39;</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=&gt;</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">$id</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">];</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">public</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">static</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">function</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">middleware</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(){</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">return</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">[</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">First</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">class</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Second</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">class</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">];</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果同一个 Controller 中包含多个接口方法，不同接口方法又希望能使用不同的中间件，那么可以使用 <code>Illuminate\\Routing\\Controllers\\Middleware</code> 构造中间件：</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-php"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">public</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">static</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">function</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">middleware</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(){</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">return</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">[</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">First</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">class</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Second</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">class</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">new</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Middleware</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Auth</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">class</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#001080;">only</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">:</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">[</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;createMember&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">])</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">];</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果希望使用一个匿名内部中间件，可以在 middleware 中返回的数组里直接定义一个闭包：</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-php"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">public</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">static</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">function</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">middleware</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(){</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">return</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">[</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">First</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">class</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Second</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">class</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">function</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Request</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">$req</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Closure</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">$next</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">)</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Log</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">info</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;third&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">return</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">$next</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">$req</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">];</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="资源-controller" tabindex="-1"><a class="header-anchor" href="#资源-controller"><span>资源 Controller</span></a></h2><p>很多时候，每个接口包含的内容就是对一个资源的 CRUD 操作，Laravel 允许创建一个 Resource Controller，不需要为 CRUD 分别绑定路由，只要使用 <code>resource</code> 方法即可。</p>`,11)),h(p,{data:[{id:"artisan"},{id:"api.php"}],"tab-id":"resource-controller"},{title0:e(({value:n,isActive:l})=>a[4]||(a[4]=[i("artisan")])),title1:e(({value:n,isActive:l})=>a[5]||(a[5]=[i("api.php")])),tab0:e(({value:n,isActive:l})=>a[6]||(a[6]=[s("div",{class:"language-shell line-numbers-mode","data-highlighter":"shiki","data-ext":"shell",style:{"--shiki-dark":"#abb2bf","--shiki-light":"#000000","--shiki-dark-bg":"#282c34","--shiki-light-bg":"#FFFFFF"}},[s("pre",{class:"shiki shiki-themes one-dark-pro light-plus vp-code"},[s("code",{class:"language-shell"},[s("span",{class:"line"},[s("span",{style:{"--shiki-dark":"#61AFEF","--shiki-light":"#795E26"}},"php"),s("span",{class:"space"}," "),s("span",{style:{"--shiki-dark":"#98C379","--shiki-light":"#A31515"}},"artisan"),s("span",{class:"space"}," "),s("span",{style:{"--shiki-dark":"#98C379","--shiki-light":"#A31515"}},"make:controller"),s("span",{class:"space"}," "),s("span",{style:{"--shiki-dark":"#98C379","--shiki-light":"#A31515"}},"MemberController"),s("span",{class:"space"}," "),s("span",{style:{"--shiki-dark":"#D19A66","--shiki-light":"#0000FF"}},"--resource")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1)])),tab1:e(({value:n,isActive:l})=>a[7]||(a[7]=[s("div",{class:"language-php line-numbers-mode","data-highlighter":"shiki","data-ext":"php",style:{"--shiki-dark":"#abb2bf","--shiki-light":"#000000","--shiki-dark-bg":"#282c34","--shiki-light-bg":"#FFFFFF"}},[s("pre",{class:"shiki shiki-themes one-dark-pro light-plus vp-code"},[s("code",{class:"language-php"},[s("span",{class:"line"},[s("span",{style:{"--shiki-dark":"#E5C07B","--shiki-light":"#267F99"}},"Route"),s("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#000000"}},"::"),s("span",{style:{"--shiki-dark":"#61AFEF","--shiki-light":"#795E26"}},"resource"),s("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#000000"}},"("),s("span",{style:{"--shiki-dark":"#98C379","--shiki-light":"#A31515"}},"'members'"),s("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#000000"}},","),s("span",{class:"space"}," "),s("span",{style:{"--shiki-dark":"#E5C07B","--shiki-light":"#267F99"}},"MemberController"),s("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#000000"}},"::"),s("span",{style:{"--shiki-dark":"#C678DD","--shiki-light":"#0000FF"}},"class"),s("span",{style:{"--shiki-dark":"#ABB2BF","--shiki-light":"#000000"}},");")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1)])),_:1}),a[10]||(a[10]=t(`<p>以上面的 MemberController 为例，请求路径与 Controller 中的方法的对应关系：</p><table><thead><tr><th style="text-align:center;">HTTP Method</th><th style="text-align:center;">URI</th><th style="text-align:center;">Controller 方法</th><th style="text-align:center;">路由名称</th></tr></thead><tbody><tr><td style="text-align:center;">GET</td><td style="text-align:center;">/members</td><td style="text-align:center;">index</td><td style="text-align:center;">members.index</td></tr><tr><td style="text-align:center;">GET</td><td style="text-align:center;">/members/create</td><td style="text-align:center;">create</td><td style="text-align:center;">members.create</td></tr><tr><td style="text-align:center;">POST</td><td style="text-align:center;">/members</td><td style="text-align:center;">store</td><td style="text-align:center;">members.store</td></tr><tr><td style="text-align:center;">GET</td><td style="text-align:center;">/members/{member}</td><td style="text-align:center;">show</td><td style="text-align:center;">members.show</td></tr><tr><td style="text-align:center;">GET</td><td style="text-align:center;">/members/{member}/edit</td><td style="text-align:center;">edit</td><td style="text-align:center;">members.edit</td></tr><tr><td style="text-align:center;">PUT/PATCH</td><td style="text-align:center;">/members/{member}</td><td style="text-align:center;">update</td><td style="text-align:center;">members.update</td></tr><tr><td style="text-align:center;">DELETE</td><td style="text-align:center;">/members/{member}</td><td style="text-align:center;">destroy</td><td style="text-align:center;">members.destroy</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p>URI 的前缀取决于使用 <code>resource</code> 方法的定义。</p><p>同时，也可以使用 <code>artisan route:list</code> 命令查看路由。</p></div><p>Model: TODO:</p><h3 id="部分资源路由" tabindex="-1"><a class="header-anchor" href="#部分资源路由"><span>部分资源路由</span></a></h3><p>声明资源路由时，可以使用 <code>only</code> 或 <code>except</code> 选项来指定需要生成的路由：</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-php"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Route</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">resource</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;members&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">MemberController</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">class</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">)-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">except</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">([</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;edit&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;create&#39;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在声明 API 资源 Controller 时，通常都会排除 <code>create</code> 和 <code>edit</code> 方法，可以将 <code>resource</code> 方法替换为 <code>apiResource</code>：</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-php"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Route</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">apiResource</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;members&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">MemberController</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">class</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者，在使用 <code>artisan make:controller</code> 命令时就指定不生成 <code>create</code> 和 <code>edit</code> 方法：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-shell"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">php</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">artisan</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">make:controller</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">MemberController</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#0000FF;">--api</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="嵌套资源" tabindex="-1"><a class="header-anchor" href="#嵌套资源"><span>嵌套资源</span></a></h3><p>有时可能需要嵌套资源，例如一个客户可以有多个地址，要嵌套资源 Controller，可以如下声明：</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-php"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Route</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">apiResource</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;members.addresses&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">MemberAddressController</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">class</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>与非嵌套资源类似，可以使用 <code>/members/{member}</code> 作为前缀访问 <code>/addresses/{address}</code> 等 URI。</p><p>很多时候嵌套的路由并不需要上级的参数，比如 addressId 已经足够定位到具体的 member 和 address 了，因此可以使用 <code>shallow</code> 选项来实现浅层嵌套：</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-php"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Route</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">apiResource</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;members.addresses&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">MemberAddressController</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">class</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">)-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">shallow</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这种情况下路由的关联关系：</p><table><thead><tr><th style="text-align:center;">HTTP Method</th><th style="text-align:center;">URI</th><th style="text-align:center;">Controller 方法</th><th style="text-align:center;">路由名称</th></tr></thead><tbody><tr><td style="text-align:center;">GET</td><td style="text-align:center;">/members/{member}/addresses</td><td style="text-align:center;">index</td><td style="text-align:center;">members.addresses.index</td></tr><tr><td style="text-align:center;">GET</td><td style="text-align:center;">/members/{member}/addresses/create</td><td style="text-align:center;">create</td><td style="text-align:center;">members.addresses.create</td></tr><tr><td style="text-align:center;">POST</td><td style="text-align:center;">/members/{member}/addresses</td><td style="text-align:center;">store</td><td style="text-align:center;">members.addresses.store</td></tr><tr><td style="text-align:center;">GET</td><td style="text-align:center;">/addresses/{address}</td><td style="text-align:center;">show</td><td style="text-align:center;">addresses.show</td></tr><tr><td style="text-align:center;">GET</td><td style="text-align:center;">/addresses/{address}/edit</td><td style="text-align:center;">edit</td><td style="text-align:center;">addresses.edit</td></tr><tr><td style="text-align:center;">PUT/PATCH</td><td style="text-align:center;">/addresses/{address}</td><td style="text-align:center;">update</td><td style="text-align:center;">addresses.update</td></tr><tr><td style="text-align:center;">DELETE</td><td style="text-align:center;">/addresses/{address}</td><td style="text-align:center;">destroy</td><td style="text-align:center;">addresses.destroy</td></tr></tbody></table><h3 id="命名资源路由的参数" tabindex="-1"><a class="header-anchor" href="#命名资源路由的参数"><span>命名资源路由的参数</span></a></h3><p>默认情况下，资源路由里的参数名称都是资源的单数形式。例如，资源名称为 members，参数名称就是 member。</p><p>如果希望自定义参数名，那么可以使用 <code>parameter</code> 或 <code>parameters</code> 方法：</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-php"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Route</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">apiResource</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;members&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">MemberController</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">class</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">)-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">parameter</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;members&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;id&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Route</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">apiResource</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;members.addresses&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">MemberAddressController</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">class</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">)-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">shallow</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">()-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">parameters</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">([</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;members&#39;</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=&gt;</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;memberId&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;addresses&#39;</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=&gt;</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;id&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="补充资源控制器" tabindex="-1"><a class="header-anchor" href="#补充资源控制器"><span>补充资源控制器</span></a></h3><p>如果默认的资源控制器已有的方法不能满足需求，需要增加其他方法，那么需要在调用 <code>Route::resource</code> 方法前定义这些路由：</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-php"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Route</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">post</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;/members/{id}/reward&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">[</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">MemberController</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">class</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;reward&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">]);</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Route</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">apiResource</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;members&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">MemberController</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">class</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">)-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">parameter</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;members&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;id&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="单例资源控制器" tabindex="-1"><a class="header-anchor" href="#单例资源控制器"><span>单例资源控制器</span></a></h3><p>有的资源应当是单例的，例如在多租户系统中，每个租户的系统设置应当仅有一个，而且不能删除或者创建，仅允许查看及更新，这种情况下，可以使用 <code>singleton</code> 方法来定义资源路由：</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-php"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Route</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">singleton</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;setting&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">SettingController</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">class</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这将会注册以下路由：</p><table><thead><tr><th style="text-align:center;">HTTP Method</th><th style="text-align:center;">URI</th><th style="text-align:center;">Controller 方法</th><th style="text-align:center;">路由名称</th></tr></thead><tbody><tr><td style="text-align:center;">GET</td><td style="text-align:center;">/setting</td><td style="text-align:center;">show</td><td style="text-align:center;">setting.show</td></tr><tr><td style="text-align:center;">GET</td><td style="text-align:center;">/setting/edit</td><td style="text-align:center;">edit</td><td style="text-align:center;">setting.edit</td></tr><tr><td style="text-align:center;">PUT/PATCH</td><td style="text-align:center;">/setting</td><td style="text-align:center;">update</td><td style="text-align:center;">setting.update</td></tr></tbody></table><p>单例资源也能嵌套在非单例资源中，例如将上面的设置嵌套到租户的资源中：</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-php"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Route</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">apiResource</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;accounts&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">AccountController</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">class</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Route</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">singleton</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;accounts.setting&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">SettingController</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">class</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，除了 accounts 本身应该创建的路由之外，还会创建以下路由：</p><table><thead><tr><th style="text-align:center;">HTTP Method</th><th style="text-align:center;">URI</th><th style="text-align:center;">Controller 方法</th><th style="text-align:center;">路由名称</th></tr></thead><tbody><tr><td style="text-align:center;">GET</td><td style="text-align:center;">/accounts/{account}/setting</td><td style="text-align:center;">show</td><td style="text-align:center;">accounts.setting.show</td></tr><tr><td style="text-align:center;">GET</td><td style="text-align:center;">/accounts/{account}/setting/edit</td><td style="text-align:center;">edit</td><td style="text-align:center;">accounts.setting.edit</td></tr><tr><td style="text-align:center;">PUT/PATCH</td><td style="text-align:center;">/accounts/{account}/setting</td><td style="text-align:center;">update</td><td style="text-align:center;">accounts.setting.update</td></tr></tbody></table><p>如果有时既需要单例资源控制器，有需要支持创建和删除，那么可以分别使用 <code>creatable</code> 和 <code>destroyable</code> 方法：</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-php"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Route</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">singleton</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;accounts.setting&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">SettingController</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">class</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">)-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">creatable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">()-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">destroyable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>同样的，如果不需要 <code>create</code> 和 <code>edit</code> 方法，那么可以将单例控制器声明为 API 单例控制器：</p><div class="language-php line-numbers-mode" data-highlighter="shiki" data-ext="php" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-php"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Route</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">apiSingleton</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;accounts.setting&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">SettingController</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">::</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">class</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">)-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">creatable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">()-&gt;</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">destroyable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="依赖注入" tabindex="-1"><a class="header-anchor" href="#依赖注入"><span>依赖注入</span></a></h2><p>Laravel 容器会解析所有的 Controller，所以可以在 Controller 的构造函数中注入依赖。</p><p>同样的，具体的方法上也可以通过类型提示来注入依赖。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果具体的方法还需要路由参数，那么路由参数也要定义在注入的依赖参数之后。</p></div>`,43))])}const b=r(g,[["render",o]]),m=JSON.parse('{"path":"/laravel/docs/controller.html","title":"Controller","lang":"zh-CN","frontmatter":{"description":"Controller 基础 默认情况下，Controllers 保存在 app/Http/Controllers 目录下。 使用 php artisan make:controller 命令可以创建一个 Controller： 每个 Controller 可以包含若干公共方法，这些方法将用于响应 HTTP 请求。 然后可以定义一个指向 Controll...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Controller\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-21T08:59:13.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/laravel/docs/controller.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"Controller"}],["meta",{"property":"og:description","content":"Controller 基础 默认情况下，Controllers 保存在 app/Http/Controllers 目录下。 使用 php artisan make:controller 命令可以创建一个 Controller： 每个 Controller 可以包含若干公共方法，这些方法将用于响应 HTTP 请求。 然后可以定义一个指向 Controll..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-21T08:59:13.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-21T08:59:13.000Z"}]]},"git":{"createdTime":1747817953000,"updatedTime":1747817953000,"contributors":[{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":1}]},"readingTime":{"minutes":4.71,"words":1412},"filePathRelative":"laravel/docs/controller.md","excerpt":"\\n<h2>基础</h2>\\n<p>默认情况下，Controllers 保存在 <code>app/Http/Controllers</code> 目录下。</p>","autoDesc":true}');export{b as comp,m as data};
