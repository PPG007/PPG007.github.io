import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as e,o as n}from"./app-rQI8KFp-.js";const o={};function a(c,i){return n(),t("div",null,i[0]||(i[0]=[e('<h1 id="注释" tabindex="-1"><a class="header-anchor" href="#注释"><span>注释</span></a></h1><ul><li>与其花费更多时间在编写注释上，不如多思考如何能够使代码更加整洁、更能体现其意义。</li><li>如果代码本身的意义足够清晰明了就没有必要再去编写无意义的注释。</li><li>注释不要说谎。</li><li>法律信息、著作权声明等。</li><li>使用注释来说明方法返回值、参数等，但是这可以使用良好的命名来解决。</li><li>使用注释来阐明某种写法的目的或者解决方案。</li><li>使用注释将某些复杂的、不易理解的值翻译为某种更加可读的形式。</li><li>通过注释警告什么时候该使用这段代码或者是这段代码存在何种问题。</li><li>添加TODO注释对这段代码的未来功能规划作出解释。</li><li>注释可以用来放大某种看来不合理之物的重要性。</li><li>注释要让他人轻松的看明白，注释要和它所阐述的代码有紧密关系。</li><li>注释不应当不如阅读代码清晰，也就是多余。</li><li>注释必须准确的描述代码的实际行为，误导的注释是有害的。</li><li>没有必要一定要为每个变量、每个方法都增加Java doc注释。</li><li>杜绝日志式注释。</li><li>对于显而易见的问题没有必要添加注释，这将看起来像是废话。</li><li>没必要保留的代码应当删除而不是注释。</li><li>注释中的信息不宜过多。</li></ul>',2)]))}const p=l(o,[["render",a]]),d=JSON.parse('{"path":"/clean-code/docs/comment.html","title":"注释","lang":"zh-CN","frontmatter":{"description":"注释 与其花费更多时间在编写注释上，不如多思考如何能够使代码更加整洁、更能体现其意义。 如果代码本身的意义足够清晰明了就没有必要再去编写无意义的注释。 注释不要说谎。 法律信息、著作权声明等。 使用注释来说明方法返回值、参数等，但是这可以使用良好的命名来解决。 使用注释来阐明某种写法的目的或者解决方案。 使用注释将某些复杂的、不易理解的值翻译为某种更加...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"注释\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2021-12-26T13:38:59.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/clean-code/docs/comment.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"注释"}],["meta",{"property":"og:description","content":"注释 与其花费更多时间在编写注释上，不如多思考如何能够使代码更加整洁、更能体现其意义。 如果代码本身的意义足够清晰明了就没有必要再去编写无意义的注释。 注释不要说谎。 法律信息、著作权声明等。 使用注释来说明方法返回值、参数等，但是这可以使用良好的命名来解决。 使用注释来阐明某种写法的目的或者解决方案。 使用注释将某些复杂的、不易理解的值翻译为某种更加..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2021-12-26T13:38:59.000Z"}],["meta",{"property":"article:modified_time","content":"2021-12-26T13:38:59.000Z"}]]},"git":{"createdTime":1640525939000,"updatedTime":1640525939000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"}]},"readingTime":{"minutes":1.3,"words":389},"filePathRelative":"clean-code/docs/comment.md","excerpt":"\\n<ul>\\n<li>与其花费更多时间在编写注释上，不如多思考如何能够使代码更加整洁、更能体现其意义。</li>\\n<li>如果代码本身的意义足够清晰明了就没有必要再去编写无意义的注释。</li>\\n<li>注释不要说谎。</li>\\n<li>法律信息、著作权声明等。</li>\\n<li>使用注释来说明方法返回值、参数等，但是这可以使用良好的命名来解决。</li>\\n<li>使用注释来阐明某种写法的目的或者解决方案。</li>\\n<li>使用注释将某些复杂的、不易理解的值翻译为某种更加可读的形式。</li>\\n<li>通过注释警告什么时候该使用这段代码或者是这段代码存在何种问题。</li>\\n<li>添加TODO注释对这段代码的未来功能规划作出解释。</li>\\n<li>注释可以用来放大某种看来不合理之物的重要性。</li>\\n<li>注释要让他人轻松的看明白，注释要和它所阐述的代码有紧密关系。</li>\\n<li>注释不应当不如阅读代码清晰，也就是多余。</li>\\n<li>注释必须准确的描述代码的实际行为，误导的注释是有害的。</li>\\n<li>没有必要一定要为每个变量、每个方法都增加Java doc注释。</li>\\n<li>杜绝日志式注释。</li>\\n<li>对于显而易见的问题没有必要添加注释，这将看起来像是废话。</li>\\n<li>没必要保留的代码应当删除而不是注释。</li>\\n<li>注释中的信息不宜过多。</li>\\n</ul>","autoDesc":true}');export{p as comp,d as data};
