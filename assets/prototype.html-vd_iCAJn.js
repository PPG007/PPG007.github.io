import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,d as n,o as p}from"./app-rQI8KFp-.js";const e={};function l(t,s){return p(),i("div",null,s[0]||(s[0]=[n(`<h1 id="原型模式" tabindex="-1"><a class="header-anchor" href="#原型模式"><span>原型模式</span></a></h1><h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h2><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p><p>实现 Cloneable 接口并重写 Object 类的 clone 方法。</p><h2 id="原型模式的优点" tabindex="-1"><a class="header-anchor" href="#原型模式的优点"><span>原型模式的优点</span></a></h2><ul><li>性能优良：原型模式是在内存二进制流的拷贝（堆内存）。</li><li>逃避构造函数的约束：既是优点也是缺点，直接在内存中拷贝，构造函数不会执行，减少了约束，缺点也是减少了约束。</li></ul><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><ul><li>资源优化场景：类初始化需要消耗非常多的资源\`。</li><li>性能和安全要求的场景：通过 new 创建对象需要非常繁琐的数据准备或访问权限。</li><li>一个对象多个修改者的场景：一个对象需要提供给其他对象访问，各个调用者可能都需要修改其值，拷贝多个对象供使用。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>通常与工厂方法模式一起使用。</p></div><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h2><p>构造函数不会被执行。</p><div class="hint-container tip"><p class="hint-container-title">深拷贝与浅拷贝</p><p>浅拷贝：</p><p>Object 类提供的 clone 方法只拷贝本对象，对象中的数组、引用对象等都不拷贝，还是指向原生对象的内部元素地址，但是 String 会拷贝，此处应当视为基本类型。</p><p>引用的成员变量不会被拷贝的条件：</p><ul><li>这个变量是类的成员变量而不是方法内变量。</li><li>必须是一个可变的引用对象而不是一个原始类型或不可变对象。</li></ul></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>深拷贝不要和浅拷贝混合使用，要分开实现。</p></div><p>浅拷贝示例：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-java"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">protected</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Object</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">clone</span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">()</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">throws</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">CloneNotSupportedException</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">//</span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">浅拷贝</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">return</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#0000FF;">super</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">clone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">();</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>深拷贝示例：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-java"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">protected</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Object</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">clone</span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">()</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">throws</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">CloneNotSupportedException</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">{</span></span>
<span class="line"></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">PrototypeClass</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">prototype</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#0000FF;">null</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">try</span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">prototype</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">(PrototypeClass)</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#0000FF;">super</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">clone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">();</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">prototype</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">strings</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">ArrayList</span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">String</span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">&gt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">)</span><span style="--shiki-dark:#E5C07B;--shiki-light:#0000FF;">this</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">strings</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">clone</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">();</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">}</span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">catch</span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">CloneNotSupportedException</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">e</span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">){</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">e</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">printStackTrace</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">();</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">}</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">return</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">prototype</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">clone 与 final</p><p>要使用 clone 方法，类成员变量就不要使用 final 关键字。</p></div>`,18)]))}const k=a(e,[["render",l]]),r=JSON.parse('{"path":"/design-pattern/docs/prototype.html","title":"原型模式","lang":"zh-CN","frontmatter":{"description":"原型模式 定义 用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。 实现 Cloneable 接口并重写 Object 类的 clone 方法。 原型模式的优点 性能优良：原型模式是在内存二进制流的拷贝（堆内存）。 逃避构造函数的约束：既是优点也是缺点，直接在内存中拷贝，构造函数不会执行，减少了约束，缺点也是减少了约束。 使用场景 资源优...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原型模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2021-12-30T09:14:08.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/design-pattern/docs/prototype.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"原型模式"}],["meta",{"property":"og:description","content":"原型模式 定义 用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。 实现 Cloneable 接口并重写 Object 类的 clone 方法。 原型模式的优点 性能优良：原型模式是在内存二进制流的拷贝（堆内存）。 逃避构造函数的约束：既是优点也是缺点，直接在内存中拷贝，构造函数不会执行，减少了约束，缺点也是减少了约束。 使用场景 资源优..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2021-12-30T09:14:08.000Z"}],["meta",{"property":"article:modified_time","content":"2021-12-30T09:14:08.000Z"}]]},"git":{"createdTime":1640855648000,"updatedTime":1640855648000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"}]},"readingTime":{"minutes":1.6,"words":480},"filePathRelative":"design-pattern/docs/prototype.md","excerpt":"\\n<h2>定义</h2>\\n<p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>","autoDesc":true}');export{k as comp,r as data};
