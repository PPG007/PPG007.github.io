import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as n,o as r}from"./app-rQI8KFp-.js";const o="/assets/image-20210921165251872-BQOW0MDB.png",s={};function p(i,a){return r(),e("div",null,a[0]||(a[0]=[n('<h1 id="jvm-运行时数据区" tabindex="-1"><a class="header-anchor" href="#jvm-运行时数据区"><span>JVM 运行时数据区</span></a></h1><p><img src="'+o+'" alt="image-20210921165251872"></p><h2 id="程序计数器" tabindex="-1"><a class="header-anchor" href="#程序计数器"><span>程序计数器</span></a></h2><p>程序计数器是一块较小的内存空间，可以看做是当前线程所执行的字节码的行号指示器。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>程序计数器为线程私有。</p></div><h2 id="java-虚拟机栈" tabindex="-1"><a class="header-anchor" href="#java-虚拟机栈"><span>Java 虚拟机栈</span></a></h2><p>Java 虚拟机栈也是<strong>线程私有的</strong>，生命周期与线程相同。</p><p>虚拟机栈描述的是 Java 方法执行的线程内存模型：每个方法被执行的时候，Java 虚拟机都会同步创建一个<em>栈帧</em>用于存储<strong>局部变量表</strong>、<strong>操作数栈</strong>、<strong>动态连接</strong>、<strong>方法出口</strong>等信息。每一个方法被调用直到执行完毕的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p><h2 id="本地方法栈" tabindex="-1"><a class="header-anchor" href="#本地方法栈"><span>本地方法栈</span></a></h2><p>作用与虚拟机栈类似，区别在于虚拟机栈为执行<strong>字节码</strong>服务，本地方法栈为执行<strong>本地native方法</strong>服务。</p><h2 id="java-堆" tabindex="-1"><a class="header-anchor" href="#java-堆"><span>Java 堆</span></a></h2><p>几乎所有对象实例都在这分配内存。</p><p>新生代、老年代、永久代、Eden 空间、From Survivor 空间、To Survivor 空间。</p><h2 id="方法区" tabindex="-1"><a class="header-anchor" href="#方法区"><span>方法区</span></a></h2><p>用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。</p><h2 id="运行时常量池" tabindex="-1"><a class="header-anchor" href="#运行时常量池"><span>运行时常量池</span></a></h2><p><strong>是方法区的一部分</strong>，Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有<strong>常量池表</strong>，用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。</p><h2 id="直接内存" tabindex="-1"><a class="header-anchor" href="#直接内存"><span>直接内存</span></a></h2><p>堆外内存，不受 JVM 管理，I/O 性能好。</p>',19)]))}const h=t(s,[["render",p]]),m=JSON.parse('{"path":"/javaknowledge/docs/jvm_data.html","title":"JVM 运行时数据区","lang":"zh-CN","frontmatter":{"description":"JVM 运行时数据区 image-20210921165251872 程序计数器 程序计数器是一块较小的内存空间，可以看做是当前线程所执行的字节码的行号指示器。 注意 程序计数器为线程私有。 Java 虚拟机栈 Java 虚拟机栈也是线程私有的，生命周期与线程相同。 虚拟机栈描述的是 Java 方法执行的线程内存模型：每个方法被执行的时候，Java 虚...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM 运行时数据区\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-08-15T09:32:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/javaknowledge/docs/jvm_data.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"JVM 运行时数据区"}],["meta",{"property":"og:description","content":"JVM 运行时数据区 image-20210921165251872 程序计数器 程序计数器是一块较小的内存空间，可以看做是当前线程所执行的字节码的行号指示器。 注意 程序计数器为线程私有。 Java 虚拟机栈 Java 虚拟机栈也是线程私有的，生命周期与线程相同。 虚拟机栈描述的是 Java 方法执行的线程内存模型：每个方法被执行的时候，Java 虚..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-15T09:32:39.000Z"}],["meta",{"property":"article:modified_time","content":"2022-08-15T09:32:39.000Z"}]]},"git":{"createdTime":1640699484000,"updatedTime":1660555959000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"},{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":1}]},"readingTime":{"minutes":1.43,"words":428},"filePathRelative":"javaknowledge/docs/jvm_data.md","excerpt":"\\n<p></p>\\n<h2>程序计数器</h2>\\n<p>程序计数器是一块较小的内存空间，可以看做是当前线程所执行的字节码的行号指示器。</p>","autoDesc":true}');export{h as comp,m as data};
