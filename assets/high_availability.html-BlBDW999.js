import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,d as n,o as p}from"./app-rQI8KFp-.js";const a="/assets/watermark_type_ZmFuZ3poZW5naGVpdGk_shadow_10_text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMTU3NTg4_size_16_color_FFFFFF_t_70-3hq8D5ZN.png",i={};function r(s,e){return p(),o("div",null,e[0]||(e[0]=[n('<h1 id="dubbo-高可用" tabindex="-1"><a class="header-anchor" href="#dubbo-高可用"><span>Dubbo 高可用</span></a></h1><h2 id="注册中心宕机" tabindex="-1"><a class="header-anchor" href="#注册中心宕机"><span>注册中心宕机</span></a></h2><p>zookeeper 注册中心宕机，还可以消费 dubbo 暴露的服务。</p><p>健壮性：</p><ul><li>监控中心宕掉不影响使用，只是丢失部分采样数据。</li><li>数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务。</li><li>注册中心对等集群，任意一台宕掉后，将自动切换到另一台。</li><li>注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯。</li><li>服务提供者无状态，任意一台宕掉后，不影响使用。</li><li>服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复。</li></ul><p>dubbo 直连：</p><p>指定 reference 的 url 属性为服务提供者的注册 url 即可绕过注册中心直接调用。</p><h2 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡"><span>负载均衡</span></a></h2><p>默认均衡策略为随机请求。</p><h3 id="random-loadbalance-基于权重的随机负载均衡机制" tabindex="-1"><a class="header-anchor" href="#random-loadbalance-基于权重的随机负载均衡机制"><span>Random LoadBalance 基于权重的随机负载均衡机制</span></a></h3><p><img src="'+a+'" alt="Random LoadBalance"></p><p>随机，按权重设置随机概率。 在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</p><h3 id="roundrobin-loadbalance-基于权重的轮询负载均衡机制" tabindex="-1"><a class="header-anchor" href="#roundrobin-loadbalance-基于权重的轮询负载均衡机制"><span>RoundRobin LoadBalance 基于权重的轮询负载均衡机制</span></a></h3><p><img src="'+a+'" alt="RoundRobin LoadBalance"></p><p>轮循，按公约后的权重设置轮循比率。 存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</p><h3 id="leastactive-loadbalance-最少活跃数负载均衡机制" tabindex="-1"><a class="header-anchor" href="#leastactive-loadbalance-最少活跃数负载均衡机制"><span>LeastActive LoadBalance 最少活跃数负载均衡机制</span></a></h3><p><img src="'+a+'" alt="LeastActive LoadBalance"></p><h3 id="consistenthash-loadbalance-一致性-hash-负载均衡机制" tabindex="-1"><a class="header-anchor" href="#consistenthash-loadbalance-一致性-hash-负载均衡机制"><span>ConsistentHash LoadBalance 一致性 hash 负载均衡机制</span></a></h3><p><img src="'+a+'" alt="ConsistentHash LoadBalance"></p><p>一致性 Hash，相同参数的请求总是发到同一提供者。 当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。</p><h2 id="服务降级" tabindex="-1"><a class="header-anchor" href="#服务降级"><span>服务降级</span></a></h2><p>在 dubbo-admin 面板中为对应消费者选择相应操作</p><p>屏蔽：</p><p>所有请求返回为 null。</p><p>容错：</p><p>出错返回空对象。</p><h2 id="服务容错" tabindex="-1"><a class="header-anchor" href="#服务容错"><span>服务容错</span></a></h2><h3 id="集群容错" tabindex="-1"><a class="header-anchor" href="#集群容错"><span>集群容错</span></a></h3><ul><li><p>Failover Cluster：</p><p>失败自动切换，当出现失败，重试其它服务器。通常用于读操作，但重试会带来更长延迟。可通过 retries=“2” 来设置重试次数(不含第一次)。</p></li><li><p>Failfast Cluster：</p><p>快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。</p></li><li><p>Failsafe Cluster：</p><p>失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</p></li><li><p>Failback Cluster：</p><p>失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</p></li><li><p>Forking Cluster：</p><p>并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 forks=“2” 来设置最大并行数。</p></li><li><p>Broadcast Cluster：</p><p>广播调用所有提供者，逐个调用，任意一台报错则报错 [2]。通常用于通知所有提供者更新缓存或日志等本地资源信息。</p></li></ul><p>具体选择使用 cluster 属性传入即可。</p>',30)]))}const d=t(i,[["render",r]]),h=JSON.parse('{"path":"/dubbo/docs/high_availability.html","title":"Dubbo 高可用","lang":"zh-CN","frontmatter":{"description":"Dubbo 高可用 注册中心宕机 zookeeper 注册中心宕机，还可以消费 dubbo 暴露的服务。 健壮性： 监控中心宕掉不影响使用，只是丢失部分采样数据。 数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务。 注册中心对等集群，任意一台宕掉后，将自动切换到另一台。 注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dubbo 高可用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-08-15T09:32:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/dubbo/docs/high_availability.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"Dubbo 高可用"}],["meta",{"property":"og:description","content":"Dubbo 高可用 注册中心宕机 zookeeper 注册中心宕机，还可以消费 dubbo 暴露的服务。 健壮性： 监控中心宕掉不影响使用，只是丢失部分采样数据。 数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务。 注册中心对等集群，任意一台宕掉后，将自动切换到另一台。 注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-15T09:32:39.000Z"}],["meta",{"property":"article:modified_time","content":"2022-08-15T09:32:39.000Z"}]]},"git":{"createdTime":1640616004000,"updatedTime":1660555959000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"},{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":1}]},"readingTime":{"minutes":2.82,"words":847},"filePathRelative":"dubbo/docs/high_availability.md","excerpt":"\\n<h2>注册中心宕机</h2>\\n<p>zookeeper 注册中心宕机，还可以消费 dubbo 暴露的服务。</p>","autoDesc":true}');export{d as comp,h as data};
