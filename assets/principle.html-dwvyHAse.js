import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as r,o}from"./app-rQI8KFp-.js";const s="/assets/sidecar-2y7_Xah5.png",c="/assets/perNode-C5LxfSaD.png",i="/assets/perNodeAndServiceAccount-SvbxFuY1.png",n="/assets/remoteL7-45r4DUna.png",p={};function d(m,e){return o(),a("div",null,e[0]||(e[0]=[r('<h1 id="概念原理" tabindex="-1"><a class="header-anchor" href="#概念原理"><span>概念原理</span></a></h1><h2 id="服务网格的部署模式" tabindex="-1"><a class="header-anchor" href="#服务网格的部署模式"><span>服务网格的部署模式</span></a></h2><h3 id="sidecar-代理" tabindex="-1"><a class="header-anchor" href="#sidecar-代理"><span>Sidecar 代理</span></a></h3><p>此模式在每个应用程序旁运行一个代理，体现在 Kubernetes 中就是每个 Pod 都有两个容器，内存开销最大，Pod 级别的隔离，单一 sidecar 故障不影响其他 Pod。</p><p><img src="'+s+'" alt="sidecar"></p><h3 id="节点共享代理" tabindex="-1"><a class="header-anchor" href="#节点共享代理"><span>节点共享代理</span></a></h3><p>每个节点上只有一个代理，所有工作负载共享，内存开销小，如果 Istio 故障会影响该节点的所有工作负载。</p><p><img src="'+c+'" alt="perNode"></p><h3 id="service-account-节点共享代理" tabindex="-1"><a class="header-anchor" href="#service-account-节点共享代理"><span>Service Account/节点共享代理</span></a></h3><p>在每个节点中，根据 ServiceAccount 的数量，每个 ServiceAccount 运行一个代理，单节点 Istio 故障会影响该节点的所有工作负载。</p><p><img src="'+i+'" alt="perNodeAndServiceAccount"></p><h3 id="带有微代理的共享远程代理" tabindex="-1"><a class="header-anchor" href="#带有微代理的共享远程代理"><span>带有微代理的共享远程代理</span></a></h3><p>在每个应用旁运行一个微代理，微代理专门处理 mTLS，L7 路由在远程。</p><p><img src="'+n+'" alt="remoteL7"></p>',14)]))}const u=t(p,[["render",d]]),g=JSON.parse('{"path":"/istio/docs/principle.html","title":"概念原理","lang":"zh-CN","frontmatter":{"description":"概念原理 服务网格的部署模式 Sidecar 代理 此模式在每个应用程序旁运行一个代理，体现在 Kubernetes 中就是每个 Pod 都有两个容器，内存开销最大，Pod 级别的隔离，单一 sidecar 故障不影响其他 Pod。 sidecar 节点共享代理 每个节点上只有一个代理，所有工作负载共享，内存开销小，如果 Istio 故障会影响该节点的...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"概念原理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-08-15T09:32:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/istio/docs/principle.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"概念原理"}],["meta",{"property":"og:description","content":"概念原理 服务网格的部署模式 Sidecar 代理 此模式在每个应用程序旁运行一个代理，体现在 Kubernetes 中就是每个 Pod 都有两个容器，内存开销最大，Pod 级别的隔离，单一 sidecar 故障不影响其他 Pod。 sidecar 节点共享代理 每个节点上只有一个代理，所有工作负载共享，内存开销小，如果 Istio 故障会影响该节点的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-15T09:32:39.000Z"}],["meta",{"property":"article:modified_time","content":"2022-08-15T09:32:39.000Z"}]]},"git":{"createdTime":1649856861000,"updatedTime":1660555959000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@qq.com","commits":1,"url":"https://github.com/PPG007"},{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":1}]},"readingTime":{"minutes":0.72,"words":215},"filePathRelative":"istio/docs/principle.md","excerpt":"\\n<h2>服务网格的部署模式</h2>\\n<h3>Sidecar 代理</h3>","autoDesc":true}');export{u as comp,g as data};
