import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as i,o as t}from"./app-rQI8KFp-.js";const e={};function p(l,s){return t(),n("div",null,s[0]||(s[0]=[i(`<h1 id="注解的本质" tabindex="-1"><a class="header-anchor" href="#注解的本质"><span>注解的本质</span></a></h1><p>注解的本质就是一个 Annotation 接口。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-java"><span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">/**Annotation接口源码*/</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">public</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">interface</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Annotation</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#267F99;">boolean</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">equals</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Object</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">obj</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#267F99;">int</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">hashCode</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">();</span></span>
<span class="line"></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Class</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">?</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">extends</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Annotation</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">&gt;</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">annotationType</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">();</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注解本身就是 Annotation 接口的子接口，也就是说注解中其实是可以有属性和方法，但是接口中的属性都是 static final 的，对于注解来说没什么意义，而我们定义接口的方法就相当于注解的属性，也就对应了前面说的为什么注解只有属性成员变量，其实他就是接口的方法，这就是为什么成员变量会有括号，不同于接口我们可以在注解的括号中给成员变量赋值。</p>`,4)]))}const h=a(e,[["render",p]]),r=JSON.parse('{"path":"/annotation-and-reflection/docs/annotation_nature.html","title":"注解的本质","lang":"zh-CN","frontmatter":{"description":"注解的本质 注解的本质就是一个 Annotation 接口。 注解本身就是 Annotation 接口的子接口，也就是说注解中其实是可以有属性和方法，但是接口中的属性都是 static final 的，对于注解来说没什么意义，而我们定义接口的方法就相当于注解的属性，也就对应了前面说的为什么注解只有属性成员变量，其实他就是接口的方法，这就是为什么成员变量...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"注解的本质\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2021-12-28T13:51:24.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/annotation-and-reflection/docs/annotation_nature.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"注解的本质"}],["meta",{"property":"og:description","content":"注解的本质 注解的本质就是一个 Annotation 接口。 注解本身就是 Annotation 接口的子接口，也就是说注解中其实是可以有属性和方法，但是接口中的属性都是 static final 的，对于注解来说没什么意义，而我们定义接口的方法就相当于注解的属性，也就对应了前面说的为什么注解只有属性成员变量，其实他就是接口的方法，这就是为什么成员变量..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2021-12-28T13:51:24.000Z"}],["meta",{"property":"article:modified_time","content":"2021-12-28T13:51:24.000Z"}]]},"git":{"createdTime":1640699484000,"updatedTime":1640699484000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"}]},"readingTime":{"minutes":0.6,"words":181},"filePathRelative":"annotation-and-reflection/docs/annotation_nature.md","excerpt":"\\n<p>注解的本质就是一个 Annotation 接口。</p>","autoDesc":true}');export{h as comp,r as data};
