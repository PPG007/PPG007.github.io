import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,d as t,o as a}from"./app-rQI8KFp-.js";const l={};function n(c,i){return a(),s("div",null,i[0]||(i[0]=[t(`<h1 id="git-基础知识" tabindex="-1"><a class="header-anchor" href="#git-基础知识"><span>Git 基础知识</span></a></h1><h2 id="创建版本库" tabindex="-1"><a class="header-anchor" href="#创建版本库"><span>创建版本库</span></a></h2><p>版本库可以理解为一个目录，这个目录里所有的文件都可以被 Git 管理起来，每个文件的修改、删除都能被 Git 跟踪，任何时刻都可以追踪历史，或者还原。</p><p>要创建版本库，在一个目录下使用如下命令：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-sh"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">git</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">init</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样这个目录就成为了一个版本库，其中有个隐藏目录 <code>.git</code>，其中保存着这个仓库的一些信息。</p><h2 id="添加文件到版本库" tabindex="-1"><a class="header-anchor" href="#添加文件到版本库"><span>添加文件到版本库</span></a></h2><p>注意：<strong>所有的版本控制系统只能跟踪文本文件的改动，二进制文件无法跟踪变化。</strong></p><p>现在创建一个文件 <code>README.txt</code> 文件，使用下面的命令将文件添加到暂存区：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-sh"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">git</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">add</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">README.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>接着，执行下面的命令将暂存区中的文件提交给仓库：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-sh"><span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">#</span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">-m</span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">用来指定这次提交的信息</span></span>
<span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">git</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">commit</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#0000FF;">-m</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;init&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Git 使用 <code>add</code> 和 <code>commit</code> 两步实现添加文件，其中 <code>commit</code> 可以一次提交很多文件，所以可以多次 <code>add</code> 不同内容然后一起 <code>commit</code>。</p><h2 id="查看仓库状态和提交历史" tabindex="-1"><a class="header-anchor" href="#查看仓库状态和提交历史"><span>查看仓库状态和提交历史</span></a></h2><p>使用 <code>git status</code> 命令可以查看当前仓库的状态，如果想要查看未提交的文件和仓库中文件的区别可以使用 <code>git diff &lt;file&gt;</code> 命令查看修改的内容。</p><p>使用 <code>git log</code> 命令查看过往的提交历史记录，添加 <code>--graph</code> 参数可以以图形的形式看到提交记录。</p><h2 id="工作区和暂存区" tabindex="-1"><a class="header-anchor" href="#工作区和暂存区"><span>工作区和暂存区</span></a></h2><ul><li><p>工作区：</p><p>工作区就是在电脑中可以看到的目录。</p></li><li><p>版本库：</p><p>工作区中有一个隐藏目录 <code>.git</code>，这就是 Git 的版本库。</p></li><li><p>暂存区：</p><p>暂存区就存在于版本库中，此外版本库中还有 Git自动创建的第一个分支 master，以及指向 master 的一个指针 HEAD。</p><p><code>git add</code> 命令将文件添加到了暂存区，然后 <code>git commit</code> 提交暂存区的所有内容到当前分支的仓库，即将需要提交的文件修改都放到暂存区然后一次性提交暂存区中的所有修改，执行完 <code>git commit</code> 命令后，暂存区会被清空。</p></li></ul><h2 id="撤销修改" tabindex="-1"><a class="header-anchor" href="#撤销修改"><span>撤销修改</span></a></h2><ul><li>如果要丢弃的修改还存在工作区中，可以使用 <code>git checkout -- &lt;file&gt;</code> 撤销修改，Git 会使用版本库中最新的版本做一次替换。</li><li>如果要丢弃的修改已经进入暂存区，可以使用 <code>git reset HEAD &lt;file&gt;</code> 将暂存区的修改撤销重新放回工作区，然后使用上面的命令即可撤销。</li><li>如果要丢弃的修改已经被提交到了版本库中，可以使用下面两个方法完成撤销： <ul><li>使用 <code>git reset --hard &lt;commit&gt;</code> 回到某次提交并丢弃后面的所有提交。</li><li>使用 <code>git revert &lt;commit&gt;</code> 通过反向操作撤销某次修改并形成一个新的 commit，常用于希望撤销某次修改单不想丢弃后面的修改的情况。</li></ul></li><li>如果在撤销修改后，又希望回到后面的某个版本，使用 <code>git log</code> 无法看到丢弃修改后面的 commit id，可以使用 <code>git reflog</code> 查看命令历史，然后可以回退。</li></ul><h2 id="删除文件" tabindex="-1"><a class="header-anchor" href="#删除文件"><span>删除文件</span></a></h2><p>一般情况下会使用 <code>rm</code> 命令删除某些文件，此时 Git 知道有文件被删除了，工作区和版本库不一致了，此时有两种情况：</p><ul><li><p>确实要删除这些文件。</p><p>使用 <code>git rm &lt;file&gt;</code> 命令删掉，然后 <code>git commit</code>。</p></li><li><p>意外删除。</p><p>使用 <code>git checkout -- &lt;file&gt;</code> 命令恢复到版本库的最新版本，但是会丢失未提交的修改。</p></li></ul>`,23)]))}const o=e(l,[["render",n]]),h=JSON.parse('{"path":"/git/docs/basic.html","title":"Git 基础知识","lang":"zh-CN","frontmatter":{"description":"Git 基础知识 创建版本库 版本库可以理解为一个目录，这个目录里所有的文件都可以被 Git 管理起来，每个文件的修改、删除都能被 Git 跟踪，任何时刻都可以追踪历史，或者还原。 要创建版本库，在一个目录下使用如下命令： 这样这个目录就成为了一个版本库，其中有个隐藏目录 .git，其中保存着这个仓库的一些信息。 添加文件到版本库 注意：所有的版本控制...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git 基础知识\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-13T01:18:18.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/git/docs/basic.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"Git 基础知识"}],["meta",{"property":"og:description","content":"Git 基础知识 创建版本库 版本库可以理解为一个目录，这个目录里所有的文件都可以被 Git 管理起来，每个文件的修改、删除都能被 Git 跟踪，任何时刻都可以追踪历史，或者还原。 要创建版本库，在一个目录下使用如下命令： 这样这个目录就成为了一个版本库，其中有个隐藏目录 .git，其中保存着这个仓库的一些信息。 添加文件到版本库 注意：所有的版本控制..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-13T01:18:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-13T01:18:18.000Z"}]]},"git":{"createdTime":1640492808000,"updatedTime":1747099098000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"},{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":1}]},"readingTime":{"minutes":3.09,"words":928},"filePathRelative":"git/docs/basic.md","excerpt":"\\n<h2>创建版本库</h2>\\n<p>版本库可以理解为一个目录，这个目录里所有的文件都可以被 Git 管理起来，每个文件的修改、删除都能被 Git 跟踪，任何时刻都可以追踪历史，或者还原。</p>","autoDesc":true}');export{o as comp,h as data};
