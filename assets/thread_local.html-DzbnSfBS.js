import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as o,o as r}from"./app-rQI8KFp-.js";const n={};function c(p,e){return r(),t("div",null,e[0]||(e[0]=[o('<h1 id="threadlocal-内存泄漏问题" tabindex="-1"><a class="header-anchor" href="#threadlocal-内存泄漏问题"><span>ThreadLocal 内存泄漏问题</span></a></h1><h2 id="引用类型" tabindex="-1"><a class="header-anchor" href="#引用类型"><span>引用类型</span></a></h2><h3 id="强引用" tabindex="-1"><a class="header-anchor" href="#强引用"><span>强引用</span></a></h3><p>Strong Reference，例如 <code>Object o=new Object();</code>。</p><p>只要对象有强引用指向且 GC Roots 可达，即使内存即将溢出也不会回收这个对象。</p><h3 id="软引用" tabindex="-1"><a class="header-anchor" href="#软引用"><span>软引用</span></a></h3><p>Soft Reference，强度弱于强引用。</p><p>在即将 OOM 之前软引用指向的对象将被回收，一般用来缓存服务器中间计算结果以及不需要实时保存的用户行为等。</p><h3 id="弱引用" tabindex="-1"><a class="header-anchor" href="#弱引用"><span>弱引用</span></a></h3><p>Weak Reference，强度更弱，用来描述非必需对象。</p><p>如果指向的对象只有弱引用，则下次 YGC（新生代 GC，频率比较高）将会回收，但是 YGC 时间上具有不确定性，弱引用何时被回收也具有不确定性。弱引用主要用于指向某个易消失的对象，在强引用断开后，此引用不会劫持对象，调用 get 可能返回 null。</p><h3 id="虚引用" tabindex="-1"><a class="header-anchor" href="#虚引用"><span>虚引用</span></a></h3><p>Phantom Reference，强度最弱，定义完成后就无法通过该引用获取指向的对象。</p><p>为一个对象设置虚引用的唯一目的就是希望能在这个对象被回收时收到一个系统通知。虚引用必须与引用队列联合使用，在 GC 时，如果发现存在虚引用，就会在回收前将这个虚引用加入到引用队列中</p><h2 id="内存泄漏问题" tabindex="-1"><a class="header-anchor" href="#内存泄漏问题"><span>内存泄漏问题</span></a></h2><p>每个 Thread 线程内部都有一个 Map。</p><p>Map 里存储线程本地对象做 key，线程变量副本做 value。</p><p>Map 由 ThreadLocal 维护，ThreadLocal 负责向 map 获取和设置线程的变量值。</p><p>ThreadLocal 的内部类 ThreadLocalMap 的内部类 Entry 的 key 是弱引用，value 为强引用，ThreadLocal 在没有外部对象的强引用时，发生 GC 会回收 key，当线程没有结束，但 ThreadLocal 的 key 被回收时，存在 key 为 null 的键值对，造成内存泄漏。</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h2><p>每次使用完 ThreadLocal 都调用 remove。</p>',21)]))}const l=a(n,[["render",c]]),s=JSON.parse('{"path":"/javaknowledge/docs/thread_local.html","title":"ThreadLocal 内存泄漏问题","lang":"zh-CN","frontmatter":{"description":"ThreadLocal 内存泄漏问题 引用类型 强引用 Strong Reference，例如 Object o=new Object();。 只要对象有强引用指向且 GC Roots 可达，即使内存即将溢出也不会回收这个对象。 软引用 Soft Reference，强度弱于强引用。 在即将 OOM 之前软引用指向的对象将被回收，一般用来缓存服务器中间...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ThreadLocal 内存泄漏问题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2021-12-28T13:51:24.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/javaknowledge/docs/thread_local.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"ThreadLocal 内存泄漏问题"}],["meta",{"property":"og:description","content":"ThreadLocal 内存泄漏问题 引用类型 强引用 Strong Reference，例如 Object o=new Object();。 只要对象有强引用指向且 GC Roots 可达，即使内存即将溢出也不会回收这个对象。 软引用 Soft Reference，强度弱于强引用。 在即将 OOM 之前软引用指向的对象将被回收，一般用来缓存服务器中间..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2021-12-28T13:51:24.000Z"}],["meta",{"property":"article:modified_time","content":"2021-12-28T13:51:24.000Z"}]]},"git":{"createdTime":1640699484000,"updatedTime":1640699484000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"}]},"readingTime":{"minutes":1.62,"words":486},"filePathRelative":"javaknowledge/docs/thread_local.md","excerpt":"\\n<h2>引用类型</h2>\\n<h3>强引用</h3>\\n<p>Strong Reference，例如 <code>Object o=new Object();</code>。</p>","autoDesc":true}');export{l as comp,s as data};
