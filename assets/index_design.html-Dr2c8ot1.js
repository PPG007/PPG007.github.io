import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,d as l,o as n}from"./app-rQI8KFp-.js";const o={};function a(r,e){return n(),i("div",null,e[0]||(e[0]=[l('<h1 id="索引设计原则" tabindex="-1"><a class="header-anchor" href="#索引设计原则"><span>索引设计原则</span></a></h1><ul><li>适合索引的列是出现在 where 子句中的列,或者连接子句中指定的列。</li><li>基数较小的表,索引效果较差,没有必要在此列建立索引。</li><li>使用短索引,如果对长字符串列进行索引,应该指定一个前缀长度,这样能够节省大量索引空间,如果搜索词超过索引前缀长度,则使用索引排除不匹配的行,然后检查其佘行是否可能匹配。</li><li>不要过度索引。索引需要额外的磁盘空间,并降低写操作的性能。在修改表內容的时候,索引会进行更新甚至重构,索引列越多,这个时间就会越长。所以只保持需要的索引有利于查询即可。</li><li>定义有外键的数据列一定要建立索引。</li><li>更新频繁字段不适合创建索引。</li><li>若是不能有效区分数据的列不适合做索引列(如性别,男女未知,最多也就三种,区分度实在太低)。</li><li>尽量的扩展索引,不要新建索引。比如表中已经有 a 的索引,现在要加 (a,b) 的索引,那么只需要修改原来的索引即可。</li><li>对于那些查询中很少涉及的列,重复值比较多的列不要建立索引。</li><li>对于定义为 text、 Image 和 bit 的数据类型的列不要建立索引。</li></ul>',2)]))}const d=t(o,[["render",a]]),m=JSON.parse('{"path":"/javaknowledge/docs/index_design.html","title":"索引设计原则","lang":"zh-CN","frontmatter":{"description":"索引设计原则 适合索引的列是出现在 where 子句中的列,或者连接子句中指定的列。 基数较小的表,索引效果较差,没有必要在此列建立索引。 使用短索引,如果对长字符串列进行索引,应该指定一个前缀长度,这样能够节省大量索引空间,如果搜索词超过索引前缀长度,则使用索引排除不匹配的行,然后检查其佘行是否可能匹配。 不要过度索引。索引需要额外的磁盘空间,并降低...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"索引设计原则\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2021-12-28T13:51:24.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/javaknowledge/docs/index_design.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"索引设计原则"}],["meta",{"property":"og:description","content":"索引设计原则 适合索引的列是出现在 where 子句中的列,或者连接子句中指定的列。 基数较小的表,索引效果较差,没有必要在此列建立索引。 使用短索引,如果对长字符串列进行索引,应该指定一个前缀长度,这样能够节省大量索引空间,如果搜索词超过索引前缀长度,则使用索引排除不匹配的行,然后检查其佘行是否可能匹配。 不要过度索引。索引需要额外的磁盘空间,并降低..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2021-12-28T13:51:24.000Z"}],["meta",{"property":"article:modified_time","content":"2021-12-28T13:51:24.000Z"}]]},"git":{"createdTime":1640699484000,"updatedTime":1640699484000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"}]},"readingTime":{"minutes":1.24,"words":373},"filePathRelative":"javaknowledge/docs/index_design.md","excerpt":"\\n<ul>\\n<li>适合索引的列是出现在 where 子句中的列,或者连接子句中指定的列。</li>\\n<li>基数较小的表,索引效果较差,没有必要在此列建立索引。</li>\\n<li>使用短索引,如果对长字符串列进行索引,应该指定一个前缀长度,这样能够节省大量索引空间,如果搜索词超过索引前缀长度,则使用索引排除不匹配的行,然后检查其佘行是否可能匹配。</li>\\n<li>不要过度索引。索引需要额外的磁盘空间,并降低写操作的性能。在修改表內容的时候,索引会进行更新甚至重构,索引列越多,这个时间就会越长。所以只保持需要的索引有利于查询即可。</li>\\n<li>定义有外键的数据列一定要建立索引。</li>\\n<li>更新频繁字段不适合创建索引。</li>\\n<li>若是不能有效区分数据的列不适合做索引列(如性别,男女未知,最多也就三种,区分度实在太低)。</li>\\n<li>尽量的扩展索引,不要新建索引。比如表中已经有 a 的索引,现在要加 (a,b) 的索引,那么只需要修改原来的索引即可。</li>\\n<li>对于那些查询中很少涉及的列,重复值比较多的列不要建立索引。</li>\\n<li>对于定义为 text、 Image 和 bit 的数据类型的列不要建立索引。</li>\\n</ul>","autoDesc":true}');export{d as comp,m as data};
