import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as t,o as p}from"./app-rQI8KFp-.js";const n={};function e(h,s){return p(),a("div",null,s[0]||(s[0]=[t(`<h1 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span>Map</span></a></h1><p>Map 可以设置任意类型的键，而不只是字符串。任何具有 Iterator 接口且每个成员都是一个双元素的数组的数据结构都可以当做 Map 构造函数的参数。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">map</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">set</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">([</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;a&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">],</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">555</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">console</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">log</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">map</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">get</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">([</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;a&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">]));</span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">//</span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">undefined</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果键是对象类型，那么值相同的对象可能会被看作不同的键，因为它们在内存中的地址不一样。所有的 NaN 都是一个键。</p><h2 id="与其他数据结构的互相转换" tabindex="-1"><a class="header-anchor" href="#与其他数据结构的互相转换"><span>与其他数据结构的互相转换</span></a></h2><ul><li><p>Map 转数组：扩展运算符。</p></li><li><p>数组转 Map：将数组传入 Map 构造函数。</p></li><li><p>Map 转为对象：如果所有的键都是字符串就可以无损的转换。</p></li><li><p>对象转为 Map：将对象传入 <code>Object.entries()</code> 方法并将返回值传入 Map 构造函数。</p></li><li><p>Map 转 JSON：如果 Map 的键名都是字符串可以先转为对象再转为 JSON；如果键中存在非字符串可以选择转为数组 JSON。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">const</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#0070C1;">map</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">new</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">Map</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">();</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">map</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">set</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;name&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;ppg&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">map</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">set</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">([</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;a&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;b&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">],</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">555</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">map</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">set</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">message</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#0000FF;">true</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">console</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">log</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#0070C1;">JSON</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">stringify</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">([...</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">map</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">]));</span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">//</span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">[[&quot;name&quot;,&quot;ppg&quot;],[[&quot;a&quot;,&quot;b&quot;],555],[{&quot;body&quot;:{&quot;user&quot;:{&quot;firstName&quot;:&quot;zhuang&quot;}}},true]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>JSON 转 Map：JSON 转对象然后再转为 Map。</p></li></ul>`,6)]))}const r=i(n,[["render",e]]),d=JSON.parse('{"path":"/es6/docs/map.html","title":"Map","lang":"zh-CN","frontmatter":{"description":"Map Map 可以设置任意类型的键，而不只是字符串。任何具有 Iterator 接口且每个成员都是一个双元素的数组的数据结构都可以当做 Map 构造函数的参数。 如果键是对象类型，那么值相同的对象可能会被看作不同的键，因为它们在内存中的地址不一样。所有的 NaN 都是一个键。 与其他数据结构的互相转换 Map 转数组：扩展运算符。 数组转 Map：将...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Map\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-13T01:18:18.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/es6/docs/map.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"Map"}],["meta",{"property":"og:description","content":"Map Map 可以设置任意类型的键，而不只是字符串。任何具有 Iterator 接口且每个成员都是一个双元素的数组的数据结构都可以当做 Map 构造函数的参数。 如果键是对象类型，那么值相同的对象可能会被看作不同的键，因为它们在内存中的地址不一样。所有的 NaN 都是一个键。 与其他数据结构的互相转换 Map 转数组：扩展运算符。 数组转 Map：将..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-13T01:18:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-13T01:18:18.000Z"}]]},"git":{"createdTime":1640487228000,"updatedTime":1747099098000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"},{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":1}]},"readingTime":{"minutes":0.96,"words":287},"filePathRelative":"es6/docs/map.md","excerpt":"\\n<p>Map 可以设置任意类型的键，而不只是字符串。任何具有 Iterator 接口且每个成员都是一个双元素的数组的数据结构都可以当做 Map 构造函数的参数。</p>","autoDesc":true}');export{r as comp,d as data};
