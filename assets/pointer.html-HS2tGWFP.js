import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as p}from"./app-rQI8KFp-.js";const e={};function t(l,s){return p(),a("div",null,s[0]||(s[0]=[n(`<h1 id="指针" tabindex="-1"><a class="header-anchor" href="#指针"><span>指针</span></a></h1><p>Go 语言中的指针只能取值赋值，不能用来运算，是安全指针。</p><p>交换函数：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-go"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">func</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">swap</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">x</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#000000;">*</span><span style="--shiki-dark:#C678DD;--shiki-light:#267F99;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">y</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#000000;">*</span><span style="--shiki-dark:#C678DD;--shiki-light:#267F99;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">)</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">temp</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#000000;">:=</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#000000;">*</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">x</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#000000;">*</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">x</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#000000;">*</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">y</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#000000;">*</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">y</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">temp</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当一个指针定以后不指向任何变量时，值为 <code>nil</code>。</p><h2 id="new-和-make" tabindex="-1"><a class="header-anchor" href="#new-和-make"><span>new 和 make</span></a></h2><p>new 和 make 用来分配内存空间。</p><p>new 是一个内置的函数，只接受一个参数，这个参数是一个类型，返回一个指向该类型内存地址的指针。该指针对应的值为该类型的零值。</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-go"><span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">a</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#000000;">:=</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">new</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#267F99;">string</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">)</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">b</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#000000;">:=</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">new</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#267F99;">bool</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">)</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">fmt</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">Println</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#000000;">*</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">a</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#000000;">*</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">b</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">)</span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">//</span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">&quot;&quot;</span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">false</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#000000;">*</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">a</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&quot;100&quot;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#000000;">*</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">b</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#0000FF;">true</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">fmt</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">Println</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#000000;">*</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">a</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#000000;">*</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">b</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>make 只能用于切片、map、以及管道 chan 的内存创建，返回类型就是这三个类型本身而不是它们的指针，因为这三个类型就是引用类型。</p>`,10)]))}const r=i(e,[["render",t]]),d=JSON.parse('{"path":"/go/docs/pointer.html","title":"指针","lang":"zh-CN","frontmatter":{"description":"指针 Go 语言中的指针只能取值赋值，不能用来运算，是安全指针。 交换函数： 当一个指针定以后不指向任何变量时，值为 nil。 new 和 make new 和 make 用来分配内存空间。 new 是一个内置的函数，只接受一个参数，这个参数是一个类型，返回一个指向该类型内存地址的指针。该指针对应的值为该类型的零值。 make 只能用于切片、map、以...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"指针\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2021-12-26T03:54:34.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/go/docs/pointer.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"指针"}],["meta",{"property":"og:description","content":"指针 Go 语言中的指针只能取值赋值，不能用来运算，是安全指针。 交换函数： 当一个指针定以后不指向任何变量时，值为 nil。 new 和 make new 和 make 用来分配内存空间。 new 是一个内置的函数，只接受一个参数，这个参数是一个类型，返回一个指向该类型内存地址的指针。该指针对应的值为该类型的零值。 make 只能用于切片、map、以..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2021-12-26T03:54:34.000Z"}],["meta",{"property":"article:modified_time","content":"2021-12-26T03:54:34.000Z"}]]},"git":{"createdTime":1640490874000,"updatedTime":1640490874000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"}]},"readingTime":{"minutes":0.67,"words":202},"filePathRelative":"go/docs/pointer.md","excerpt":"\\n<p>Go 语言中的指针只能取值赋值，不能用来运算，是安全指针。</p>","autoDesc":true}');export{r as comp,d as data};
