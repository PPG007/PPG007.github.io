import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as r,o as i}from"./app-rQI8KFp-.js";const n="/assets/SpringBoot%E6%B5%81%E7%A8%8B%E5%9B%BE-DNd30Ixh.jpg",p="/assets/spring.factories-CNB4Y9ef.jpg",a="/assets/@Conditional-TAJAVvar.jpg",s={};function c(g,o){return i(),e("div",null,o[0]||(o[0]=[r('<h1 id="springboot-自动配置基本原理" tabindex="-1"><a class="header-anchor" href="#springboot-自动配置基本原理"><span>SpringBoot 自动配置基本原理</span></a></h1><p>依赖均在父项目中，要使用什么依赖，只需使用对应的 starter 启动器。</p><p><img src="'+n+'" alt="SpringBoot原理"></p><h2 id="配置文件中的配置名从何而来" tabindex="-1"><a class="header-anchor" href="#配置文件中的配置名从何而来"><span>配置文件中的配置名从何而来</span></a></h2><p>在 <code>spring-boot-autoconfigure</code> 包下的 <code>\\META-INF</code> 文件夹中有一个 <code>spring.factories</code> 文件，文件内容如下：</p><p><img src="'+p+'" alt="spring.factories"></p><p>在 <strong>Auto Configure</strong> 中的所有类都具有 <code>@EnableConfigurationProperties</code> 注解(或者直接指向了配置文件而没有配置类，或者注解在内部类上)，这个注解的值指向的类就是我们在配置文件中的可选择的属性，如 <code>HttpEncodingAutoConfiguration</code> 自动配置类使用了 <code>ServerProperties.class</code>，在 <code>ServerProperties</code> 中有唯一一个注解 <code>@ConfigurationProperties(prefix = &quot;server&quot;, ignoreUnknownFields = true)</code>，此注解就是 SpringBoot 通过配置文件向实体类赋值的注解，prefix 表示前缀，ServerProperties 中有一个 port 属性用于指定端口号，要在配置文件中配置时，可以使用 <code>server.port=xxx</code> 的方式指定它的值。</p><p>这些自动配置类都有多个 <code>@ConditionalOnxxx</code> 注解，用于根据注解中的条件是否成立决定是否生效。</p><p><img src="'+a+'" alt="@Conditional"></p><div class="hint-container tip"><p class="hint-container-title">总结</p><p>配置文件中的属性都有 XxxProperties 类与其对应，且都有 XxxAutoConfiguration 类加载了 Properties 中的属性。</p></div>',10)]))}const l=t(s,[["render",c]]),u=JSON.parse('{"path":"/SpringBoot/docs/auto_config.html","title":"SpringBoot 自动配置基本原理","lang":"zh-CN","frontmatter":{"prev":{"text":"首页","link":"/springboot"},"description":"SpringBoot 自动配置基本原理 依赖均在父项目中，要使用什么依赖，只需使用对应的 starter 启动器。 SpringBoot原理 配置文件中的配置名从何而来 在 spring-boot-autoconfigure 包下的 \\\\META-INF 文件夹中有一个 spring.factories 文件，文件内容如下： spring.factori...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot 自动配置基本原理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-08-15T09:32:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/SpringBoot/docs/auto_config.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"SpringBoot 自动配置基本原理"}],["meta",{"property":"og:description","content":"SpringBoot 自动配置基本原理 依赖均在父项目中，要使用什么依赖，只需使用对应的 starter 启动器。 SpringBoot原理 配置文件中的配置名从何而来 在 spring-boot-autoconfigure 包下的 \\\\META-INF 文件夹中有一个 spring.factories 文件，文件内容如下： spring.factori..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-15T09:32:39.000Z"}],["meta",{"property":"article:modified_time","content":"2022-08-15T09:32:39.000Z"}]]},"git":{"createdTime":1640525939000,"updatedTime":1660555959000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"},{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":1}]},"readingTime":{"minutes":1.05,"words":315},"filePathRelative":"SpringBoot/docs/auto_config.md","excerpt":"\\n<p>依赖均在父项目中，要使用什么依赖，只需使用对应的 starter 启动器。</p>","autoDesc":true}');export{l as comp,u as data};
