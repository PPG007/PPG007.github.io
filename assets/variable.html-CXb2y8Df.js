import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,d as e,o as n}from"./app-rQI8KFp-.js";const l={};function t(p,s){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h1><p>单独声明：</p><p><code>var \${变量名} \${变量类型}</code>。</p><p>批量声明：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-go"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">var</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">name</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#267F99;">string</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">password</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#267F99;">string</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">age</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#267F99;">int</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Go 语言中非全局变量声明就必须使用，否则无法编译。</p><p>声明同时赋值：<code>var hello string = &quot;Hello&quot;</code>。</p><p>类型推导：<code>var hello = &quot;Hello&quot;</code>。根据变量值判断是什么类型。</p><p>简短变量声明（只能在函数内部使用）：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-go"><span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">hello</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#000000;">:=</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&quot;Hello&quot;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">x</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#000000;">:=</span><span style="--shiki-dark:#C678DD;--shiki-light:#267F99;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">2</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>匿名变量：使用多重赋值时，如果想要忽略某个值，可以使用匿名变量占位，匿名变量不占用命名空间，不会分配内存，匿名变量之间不存在重复声明。</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-go"><span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">_</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">a</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#000000;">:=</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,12)]))}const o=a(l,[["render",t]]),c=JSON.parse('{"path":"/go/docs/variable.html","title":"变量","lang":"zh-CN","frontmatter":{"description":"变量 单独声明： var ${变量名} ${变量类型}。 批量声明： Go 语言中非全局变量声明就必须使用，否则无法编译。 声明同时赋值：var hello string = \\"Hello\\"。 类型推导：var hello = \\"Hello\\"。根据变量值判断是什么类型。 简短变量声明（只能在函数内部使用）： 匿名变量：使用多重赋值时，如果想要忽略某个值...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"变量\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2021-12-26T03:54:34.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/go/docs/variable.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"变量"}],["meta",{"property":"og:description","content":"变量 单独声明： var ${变量名} ${变量类型}。 批量声明： Go 语言中非全局变量声明就必须使用，否则无法编译。 声明同时赋值：var hello string = \\"Hello\\"。 类型推导：var hello = \\"Hello\\"。根据变量值判断是什么类型。 简短变量声明（只能在函数内部使用）： 匿名变量：使用多重赋值时，如果想要忽略某个值..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2021-12-26T03:54:34.000Z"}],["meta",{"property":"article:modified_time","content":"2021-12-26T03:54:34.000Z"}]]},"git":{"createdTime":1640490874000,"updatedTime":1640490874000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"}]},"readingTime":{"minutes":0.54,"words":163},"filePathRelative":"go/docs/variable.md","excerpt":"\\n<p>单独声明：</p>\\n<p><code>var ${变量名} ${变量类型}</code>。</p>","autoDesc":true}');export{o as comp,c as data};
