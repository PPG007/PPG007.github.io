import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as i,o as t}from"./app-rQI8KFp-.js";const n={};function p(l,s){return t(),e("div",null,s[0]||(s[0]=[i(`<h1 id="google-protobuf-style-guide" tabindex="-1"><a class="header-anchor" href="#google-protobuf-style-guide"><span>Google Protobuf Style Guide</span></a></h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>当对旧项目中的文件进行修改时，应当遵循之前的规范，保持一致。</p></div><h2 id="标准文件格式" tabindex="-1"><a class="header-anchor" href="#标准文件格式"><span>标准文件格式</span></a></h2><ul><li>每行长度不超过 80 个字符。</li><li>缩进使用两个空格。</li><li>对于字符串使用双引号。</li></ul><h2 id="文件结构" tabindex="-1"><a class="header-anchor" href="#文件结构"><span>文件结构</span></a></h2><p>文件名应该是下划线命名，例如：user_request.proto。</p><p>所有的文件中的内容都应当按照如下顺序组织：</p><ul><li>License。</li><li>文件摘要。</li><li>proto 版本。</li><li>包信息。</li><li>引入的其他 proto 文件，按照名称进行排序。</li><li>options。</li><li>其他。</li></ul><h2 id="包信息" tabindex="-1"><a class="header-anchor" href="#包信息"><span>包信息</span></a></h2><p>包名应当是都是小写，并且包名应当根据项目名称以及包含 protobuf 定义的文件的路径确定唯一的名字。</p><h2 id="message-和字段名" tabindex="-1"><a class="header-anchor" href="#message-和字段名"><span>Message 和字段名</span></a></h2><ul><li>message 名称应该使用大驼峰命名。</li><li>字段名，包含 one of 字段和 extension 都应当使用下划线分割小写命名。</li><li>如果字段名包含数字，这个数字应该紧跟最后一个字母而不是再起一个下划线，例如应当命名为 <code>song_name1</code> 而不是 <code>song_name_1</code>。</li></ul><h2 id="repeated-字段" tabindex="-1"><a class="header-anchor" href="#repeated-字段"><span>repeated 字段</span></a></h2><p>repeated 字段名应当是名词复数。</p><h2 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举"><span>枚举</span></a></h2><p>枚举名应当是大驼峰命名，枚举字段的命名应该采用下划线分割大写：</p><div class="language-protobuf line-numbers-mode" data-highlighter="shiki" data-ext="protobuf" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-protobuf"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">enum</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">FooBar</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">FOO_BAR_UNSPECIFIED</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">FOO_BAR_FIRST_VALUE</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">FOO_BAR_SECOND_VALUE</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">2</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>枚举值之间应该使用分号而不是逗号，一个枚举中的枚举值应该具有一致的前缀，并且对于枚举零值，应当添加 <code>UNSPECIFIED</code> 后缀。</p><h2 id="rpc" tabindex="-1"><a class="header-anchor" href="#rpc"><span>RPC</span></a></h2><p>在 proto 文件中定义的 RPC 服务的名称以及方法名称均应该使用大驼峰。</p>`,20)]))}const c=a(n,[["render",p]]),h=JSON.parse('{"path":"/grpc-and-protobuf/docs/protobuf/styleGuide.html","title":"Google Protobuf Style Guide","lang":"zh-CN","frontmatter":{"description":"Google Protobuf Style Guide 提示 当对旧项目中的文件进行修改时，应当遵循之前的规范，保持一致。 标准文件格式 每行长度不超过 80 个字符。 缩进使用两个空格。 对于字符串使用双引号。 文件结构 文件名应该是下划线命名，例如：user_request.proto。 所有的文件中的内容都应当按照如下顺序组织： License。...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Google Protobuf Style Guide\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-07-23T14:21:23.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/grpc-and-protobuf/docs/protobuf/styleGuide.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"Google Protobuf Style Guide"}],["meta",{"property":"og:description","content":"Google Protobuf Style Guide 提示 当对旧项目中的文件进行修改时，应当遵循之前的规范，保持一致。 标准文件格式 每行长度不超过 80 个字符。 缩进使用两个空格。 对于字符串使用双引号。 文件结构 文件名应该是下划线命名，例如：user_request.proto。 所有的文件中的内容都应当按照如下顺序组织： License。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-07-23T14:21:23.000Z"}],["meta",{"property":"article:modified_time","content":"2022-07-23T14:21:23.000Z"}]]},"git":{"createdTime":1658586083000,"updatedTime":1658586083000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@qq.com","commits":1,"url":"https://github.com/PPG007"}]},"readingTime":{"minutes":1.33,"words":398},"filePathRelative":"grpc-and-protobuf/docs/protobuf/styleGuide.md","excerpt":"\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>当对旧项目中的文件进行修改时，应当遵循之前的规范，保持一致。</p>\\n</div>","autoDesc":true}');export{c as comp,h as data};
