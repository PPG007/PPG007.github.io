import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as t,o as n}from"./app-rQI8KFp-.js";const l={};function o(p,i){return n(),a("div",null,i[0]||(i[0]=[t('<h1 id="css-布局" tabindex="-1"><a class="header-anchor" href="#css-布局"><span>CSS 布局</span></a></h1><h2 id="块级元素" tabindex="-1"><a class="header-anchor" href="#块级元素"><span>块级元素</span></a></h2><p>块级元素总是从新行开始，并占据可用的全部宽度。</p><h2 id="行内元素" tabindex="-1"><a class="header-anchor" href="#行内元素"><span>行内元素</span></a></h2><p>行内元素不从新行开始，仅占用所需的宽度。</p><h2 id="display" tabindex="-1"><a class="header-anchor" href="#display"><span>display</span></a></h2><p>通过设置 display 属性的值为 inline、block、none，分别控制元素是行内元素、块级元素、隐藏元素。</p><p>display:none 的元素不会占用页面空间，visibility:hidden 隐藏的元素仍然占有原来的空间。</p><h2 id="width-和-max-width" tabindex="-1"><a class="header-anchor" href="#width-和-max-width"><span>width 和 max-width</span></a></h2><p>设置块级元素的 width 属性将防止延伸到容器的边缘，然后设置左右外边距为 auto 可以水平居中，当浏览器窗口小于元素宽度时，会出现滚动条，使用 max-width 可以解决这个问题。</p><h2 id="box-sizing" tabindex="-1"><a class="header-anchor" href="#box-sizing"><span>box-sizing</span></a></h2><p>默认情况下，元素看起来通常比设置的更大，因为还有边框和边距的宽度，使用 box-sizing 可以解决这个问题，box-sizing 属性允许我们在元素的总宽度和高度中包括内边距和边框，例如 <code>box-sizing: border-box</code> 宽度和高度会包括内边距和边框。</p><h2 id="position-属性" tabindex="-1"><a class="header-anchor" href="#position-属性"><span>position 属性</span></a></h2><p>position 属性规定应用于元素的定位方法的类型，有五个不同的位置值：</p><ul><li><p>static：</p><p>默认情况下的定位方式，元素不会被特殊的定位。</p></li><li><p>relative：</p><p>如果不使用额外的属性， relative 表现和 static 一样，一个元素相对于正常位置进行定位，设置四个属性将导致元素偏离正常位置，不会对其余内容进行调整来适应元素留下的任何空间。</p></li><li><p>fixed：</p><p>元素相对于视口定位，即使滚动页面，也始终位于同一位置。一个固定定位元素不会保留它原本在页面应有的空隙。</p></li><li><p>absolute：</p><p>与 fixed 类似，但是它不是相对视窗而是相对于最近的 position 值不是 static 的元素，如果没有这个元素，那么会相对于 body 元素定位，并且会随着页面滚动而移动。</p></li><li><p>sticky：</p><p>根据用户的滚动位置进行定位，在相对和固定之间切换，起先会被相对定位，直到视口中遇到给定的偏移位置为止，然后粘贴在适当的位置。</p></li></ul><p>通过设置 z-index 属性指定元素的前后顺序，这个值可正可负。</p><p>元素是使用 top、bottom、left、right 属性定位的。但是如果不先设置 position 属性这些属性将不起作用。</p><h2 id="溢出" tabindex="-1"><a class="header-anchor" href="#溢出"><span>溢出</span></a></h2><p>overflow 属性指定在元素内容太大而无法放入指定区域时是裁剪内容还是添加滚动条。</p><ul><li>visible：默认，溢出没有被裁剪，内容在元素框外渲染。</li><li>hidden：溢出被裁剪，其余内容将不可见。</li><li>scroll：溢出被裁剪，同时添加滚动条以查看其余内容。</li><li>auto：仅在必要时添加滚动条。</li></ul><p>overflow-x：指定如何处理内容的左右边缘。</p><p>overflow-y：指定如何处理内容的上下边缘。</p><h2 id="浮动" tabindex="-1"><a class="header-anchor" href="#浮动"><span>浮动</span></a></h2><p>float 属性用于定位和格式化内容，可取值：</p><ul><li>left：元素浮动到容器的左侧。</li><li>right：元素浮动在容器的右侧。</li><li>none：元素不会浮动</li><li>inherit：元素继承父级的 float 值。</li></ul><h2 id="清除浮动" tabindex="-1"><a class="header-anchor" href="#清除浮动"><span>清除浮动</span></a></h2><p>clear 属性指定哪些元素可以浮动于被清除元素的旁边及哪一侧：</p><ul><li>none：允许两侧都有浮动元素，默认值。</li><li>left：左侧不允许浮动元素。</li><li>right：右侧不允许浮动元素。</li><li>both：左侧或右侧均不允许浮动元素。</li><li>inherit：元素继承父级的 clear 值。</li></ul><p>如果一个元素比包含它的元素高，并且它是浮动的，它将溢出到容器之外，可以指定 overflow 为 auto 来解决这个问题。</p><h2 id="display-inline-block" tabindex="-1"><a class="header-anchor" href="#display-inline-block"><span>display:inline-block</span></a></h2><p>与 inline 相比，inline-block 允许在元素上设置宽度和高度，如果设置了 display:inline-block，将保留上下内外边距，inline 不会。</p><h2 id="水平对齐和垂直对齐" tabindex="-1"><a class="header-anchor" href="#水平对齐和垂直对齐"><span>水平对齐和垂直对齐</span></a></h2><p>居中对齐元素：要使块元素水平居中，使用 <code>margin: auto;</code>，设置元素的宽度将防止其延伸到容器的边缘。</p><p>居中对齐文本：使用 <code>text-align: center</code>。</p><p>居中对齐图像：将图像设置为块元素并将左右外边距设置为 auto。</p><p>左右对齐：</p><ul><li>使用 <code>position:absolute</code> 绝对定位。</li><li>使用 float 属性。</li></ul><p>垂直对齐：</p><ul><li>使用 padding。</li><li>使用 line-height，让其值等于 height的值。</li><li>使用 position 和 transform。</li><li>使用 Flexbox。</li></ul>',39)]))}const r=e(l,[["render",o]]),h=JSON.parse('{"path":"/css/docs/layout.html","title":"CSS 布局","lang":"zh-CN","frontmatter":{"description":"CSS 布局 块级元素 块级元素总是从新行开始，并占据可用的全部宽度。 行内元素 行内元素不从新行开始，仅占用所需的宽度。 display 通过设置 display 属性的值为 inline、block、none，分别控制元素是行内元素、块级元素、隐藏元素。 display:none 的元素不会占用页面空间，visibility:hidden 隐藏的元...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CSS 布局\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-13T01:18:18.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/css/docs/layout.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"CSS 布局"}],["meta",{"property":"og:description","content":"CSS 布局 块级元素 块级元素总是从新行开始，并占据可用的全部宽度。 行内元素 行内元素不从新行开始，仅占用所需的宽度。 display 通过设置 display 属性的值为 inline、block、none，分别控制元素是行内元素、块级元素、隐藏元素。 display:none 的元素不会占用页面空间，visibility:hidden 隐藏的元..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-13T01:18:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-13T01:18:18.000Z"}]]},"git":{"createdTime":1640441337000,"updatedTime":1747099098000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"},{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":1}]},"readingTime":{"minutes":3.71,"words":1114},"filePathRelative":"css/docs/layout.md","excerpt":"\\n<h2>块级元素</h2>\\n<p>块级元素总是从新行开始，并占据可用的全部宽度。</p>","autoDesc":true}');export{r as comp,h as data};
