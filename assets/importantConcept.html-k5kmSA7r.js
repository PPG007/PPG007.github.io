import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,d as n,o as l}from"./app-rQI8KFp-.js";const p={};function e(t,s){return l(),i("div",null,s[0]||(s[0]=[n(`<h1 id="重要概念" tabindex="-1"><a class="header-anchor" href="#重要概念"><span>重要概念</span></a></h1><ul><li><p>所有变量引用的都是对象，每个对象都是一个类的实例。数字、函数以及 null 都是对象。除去 null 以外（如果你开启了空安全）, 所有的类都继承于 Object 类。空安全在 2.12 版本被引入。</p></li><li><p>Dart 是强类型语言， 但是可以通过 var 自动推断。</p></li><li><p>如果开启了空安全，对于不能为 null 的类型，不能赋值为 null，例如 int，但是可以在类型后面加上问号将类型声明为可以是原类型也可以是 null，例如 <code>int? a = null;</code>，如果你明确一个表达式不会为空，但是编译器不这么认为，可以在表达式后面添加叹号表示断言，例如下面这样：</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-dart"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">int</span><span style="--shiki-dark:#C678DD;--shiki-light:#000000;">?</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">nullAbleButNotNull</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">()</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">return</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">void</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">main</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">()</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">int</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">a</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">nullAbleButNotNull</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">()</span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">!</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">print</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(a);</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果要显式地声明允许任意类型，使用 Object?（如果开启了空安全）、 Object 或者特殊类型 dynamic 将检查延迟到运行时进行。</p></li><li><p>Dart 支持泛型。</p></li><li><p>Dart 支持顶级函数（main）、静态方法、实例方法。</p></li><li><p>Dart 支持顶级变量、静态变量、实例变量。</p></li><li><p>Dart 中如果一个标识符以下划线开头则表示是库内私有的</p></li><li><p>Dart 中标识符可以以字母或者下划线开头。</p></li></ul>`,2)]))}const r=a(p,[["render",e]]),k=JSON.parse('{"path":"/dart/docs/importantConcept.html","title":"重要概念","lang":"zh-CN","frontmatter":{"description":"重要概念 所有变量引用的都是对象，每个对象都是一个类的实例。数字、函数以及 null 都是对象。除去 null 以外（如果你开启了空安全）, 所有的类都继承于 Object 类。空安全在 2.12 版本被引入。 Dart 是强类型语言， 但是可以通过 var 自动推断。 如果开启了空安全，对于不能为 null 的类型，不能赋值为 null，例如 int...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"重要概念\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-13T01:18:18.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/dart/docs/importantConcept.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"重要概念"}],["meta",{"property":"og:description","content":"重要概念 所有变量引用的都是对象，每个对象都是一个类的实例。数字、函数以及 null 都是对象。除去 null 以外（如果你开启了空安全）, 所有的类都继承于 Object 类。空安全在 2.12 版本被引入。 Dart 是强类型语言， 但是可以通过 var 自动推断。 如果开启了空安全，对于不能为 null 的类型，不能赋值为 null，例如 int..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-13T01:18:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-13T01:18:18.000Z"}]]},"git":{"createdTime":1646297001000,"updatedTime":1747099098000,"contributors":[{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":3}]},"readingTime":{"minutes":1.1,"words":330},"filePathRelative":"dart/docs/importantConcept.md","excerpt":"\\n<ul>\\n<li>\\n<p>所有变量引用的都是对象，每个对象都是一个类的实例。数字、函数以及 null 都是对象。除去 null 以外（如果你开启了空安全）, 所有的类都继承于 Object 类。空安全在 2.12 版本被引入。</p>\\n</li>\\n<li>\\n<p>Dart 是强类型语言， 但是可以通过 var 自动推断。</p>\\n</li>\\n<li>\\n<p>如果开启了空安全，对于不能为 null 的类型，不能赋值为 null，例如 int，但是可以在类型后面加上问号将类型声明为可以是原类型也可以是 null，例如 <code>int? a = null;</code>，如果你明确一个表达式不会为空，但是编译器不这么认为，可以在表达式后面添加叹号表示断言，例如下面这样：</p>\\n<div class=\\"language-dart line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"dart\\" style=\\"--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF\\"><pre class=\\"shiki shiki-themes one-dark-pro light-plus vp-code\\"><code class=\\"language-dart\\"><span class=\\"line\\"><span style=\\"--shiki-dark:#E5C07B;--shiki-light:#267F99\\">int</span><span style=\\"--shiki-dark:#C678DD;--shiki-light:#000000\\">?</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#61AFEF;--shiki-light:#795E26\\">nullAbleButNotNull</span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">()</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">{</span></span>\\n<span class=\\"line\\"><span class=\\"space\\"> </span><span class=\\"space\\"> </span><span class=\\"space\\"> </span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#C678DD;--shiki-light:#AF00DB\\">return</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#D19A66;--shiki-light:#098658\\">1</span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-dark:#C678DD;--shiki-light:#0000FF\\">void</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#61AFEF;--shiki-light:#795E26\\">main</span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">()</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">{</span></span>\\n<span class=\\"line\\"><span class=\\"space\\"> </span><span class=\\"space\\"> </span><span class=\\"space\\"> </span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#E5C07B;--shiki-light:#267F99\\">int</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">a</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#56B6C2;--shiki-light:#000000\\">=</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#61AFEF;--shiki-light:#795E26\\">nullAbleButNotNull</span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">()</span><span style=\\"--shiki-dark:#56B6C2;--shiki-light:#000000\\">!</span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"space\\"> </span><span class=\\"space\\"> </span><span class=\\"space\\"> </span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#61AFEF;--shiki-light:#795E26\\">print</span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">(a);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>如果要显式地声明允许任意类型，使用 Object?（如果开启了空安全）、 Object 或者特殊类型 dynamic 将检查延迟到运行时进行。</p>\\n</li>\\n<li>\\n<p>Dart 支持泛型。</p>\\n</li>\\n<li>\\n<p>Dart 支持顶级函数（main）、静态方法、实例方法。</p>\\n</li>\\n<li>\\n<p>Dart 支持顶级变量、静态变量、实例变量。</p>\\n</li>\\n<li>\\n<p>Dart 中如果一个标识符以下划线开头则表示是库内私有的</p>\\n</li>\\n<li>\\n<p>Dart 中标识符可以以字母或者下划线开头。</p>\\n</li>\\n</ul>","autoDesc":true}');export{r as comp,k as data};
