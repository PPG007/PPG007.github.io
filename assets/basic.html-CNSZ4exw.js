import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as s,o}from"./app-rQI8KFp-.js";const n="/assets/clustering-C08e52n5.png",t="/assets/broadcasting-DzzPmxxT.png",i={};function p(c,e){return o(),a("div",null,e[0]||(e[0]=[s('<h1 id="基础概念" tabindex="-1"><a class="header-anchor" href="#基础概念"><span>基础概念</span></a></h1><h2 id="消息模型-message-model" tabindex="-1"><a class="header-anchor" href="#消息模型-message-model"><span>消息模型（Message Model）</span></a></h2><p>RocketMQ 主要由 Producer、Broker、Consumer 三部分组成，其中Producer 负责生产消息，Consumer 负责消费消息，Broker 负责存储消息。Broker 在实际部署过程中对应一台服务器，每个 Broker 可以存储多个 Topic 的消息，每个 Topic 的消息也可以分片存储于不同的 Broker。Message Queue 用于存储消息的物理地址，每个 Topic 中的消息地址存储于多个 Message Queue 中。ConsumerGroup 由多个Consumer 实例构成。</p><h2 id="消息生产者-producer" tabindex="-1"><a class="header-anchor" href="#消息生产者-producer"><span>消息生产者（Producer）</span></a></h2><p>负责生产消息，一般由业务系统负责生产消息。一个消息生产者会把业务应用系统里产生的消息发送到broker服务器。RocketMQ 提供多种发送方式，同步发送、异步发送、顺序发送、单向发送。同步和异步方式均需要 Broker 返回确认信息，单向发送不需要。</p><h2 id="消息消费者-consumer" tabindex="-1"><a class="header-anchor" href="#消息消费者-consumer"><span>消息消费者（Consumer）</span></a></h2><p>负责消费消息，一般是后台系统负责异步消费。一个消息消费者会从 Broker 服务器拉取消息、并将其提供给应用程序。从用户应用的角度而言提供了两种消费形式：拉取式消费、推动式消费。</p><h2 id="主题-topic" tabindex="-1"><a class="header-anchor" href="#主题-topic"><span>主题（Topic）</span></a></h2><p>表示一类消息的集合，每个主题包含若干条消息，每条消息只能属于一个主题，是 RocketMQ 进行消息订阅的基本单位。</p><p>内部属性：</p><ul><li>主题名称，集群内全局唯一。</li><li>队列列表，MessageQueue，一个主题至少包含一个队列。</li><li>消息类型，主题所支持的消息类型： <ul><li>Normal：普通消息，无特殊语义，消息之间也没有关联。</li><li>FIFO：顺序消息，保证一组特定消息的先进先出顺序。</li><li>Delay：延时消息，在一段时间之后才能被消费。</li><li>Transaction：事务消息，支持操作数据库和消息消费的一致性保证。</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>每个主题只支持一种消息类型，如果发送消息时消息类型和主题内的消息类型不一致将会被拒绝并返回异常。</p></div><h2 id="消息-message" tabindex="-1"><a class="header-anchor" href="#消息-message"><span>消息（Message）</span></a></h2><p>消息系统所传输信息的物理载体，生产和消费数据的最小单位，每条消息必须属于一个主题。RocketMQ 中每个消息拥有唯一的 Message ID，且可以携带具有业务标识的 Key。系统提供了通过 Message ID 和 Key 查询消息的功能。</p><p>消息内部属性：</p><ul><li>主题名称。</li><li>消息类型。</li><li>消息队列，由服务端指定。</li><li>消息位点，当前消息在队列中的位置。</li><li>消息 id，数字和大写字母组成的 32 位字符串。</li><li>索引 key 列表，可选，可以通过不同的 key 区分、查找消息。</li><li>过滤标签 Tag，可选，通过标签可以对消息实现过滤。</li><li>定时时间，可选，定时场景下设定延迟多久后能被消费。</li><li>消息发送时间，消息发送时发送方的本地毫秒级时间戳。</li><li>消息保存时间戳，在消息队列中完成存储时服务端本地毫秒级时间戳。</li><li>消费重试次数。</li><li>业务自定义属性。</li><li>消息负载，业务消息的实际内容，二进制字节传输。</li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>普通消息默认最大大小为 4MB，事务和定时消息最大 64 KB。</p></div><h2 id="代理服务器-broker-server" tabindex="-1"><a class="header-anchor" href="#代理服务器-broker-server"><span>代理服务器（Broker Server）</span></a></h2><p>消息中转角色，负责存储消息、转发消息。代理服务器在 RocketMQ 系统中负责接收从生产者发送来的消息并存储、同时为消费者的拉取请求作准备。代理服务器也存储消息相关的元数据，包括消费者组、消费进度偏移和主题和队列消息等。</p><h2 id="名字服务-name-server" tabindex="-1"><a class="header-anchor" href="#名字服务-name-server"><span>名字服务（Name Server）</span></a></h2><p>名称服务充当路由消息的提供者。生产者或消费者能够通过名字服务查找各主题相应的Broker IP 列表。多个 Namesrver 实例组成集群，但相互独立，没有信息交换。</p><h2 id="拉取式消费-pull-consumer" tabindex="-1"><a class="header-anchor" href="#拉取式消费-pull-consumer"><span>拉取式消费（Pull Consumer）</span></a></h2><p>Consumer 消费的一种类型，应用通常主动调用 Consumer 的拉消息方法从 Broker 服务器拉消息、主动权由应用控制。一旦获取了批量消息，应用就会启动消费过程。</p><h2 id="推动式消费-push-consumer" tabindex="-1"><a class="header-anchor" href="#推动式消费-push-consumer"><span>推动式消费（Push Consumer）</span></a></h2><p>Consumer 消费的一种类型，该模式下 Broker 收到数据后会主动推送给消费端，该消费模式一般实时性较高。</p><h2 id="生产者组-producer-group" tabindex="-1"><a class="header-anchor" href="#生产者组-producer-group"><span>生产者组（Producer Group）</span></a></h2><p>同一类Producer的集合，这类 Producer 发送同一类消息且发送逻辑一致。如果发送的是事务消息且原始生产者在发送之后崩溃，则 Broker 服务器会联系同一生产者组的其他生产者实例以提交或回溯消费。</p><h2 id="消费者组-consumer-group" tabindex="-1"><a class="header-anchor" href="#消费者组-consumer-group"><span>消费者组（Consumer Group）</span></a></h2><p>同一类 Consumer 的集合，这类 Consumer 通常消费同一类消息且消费逻辑一致。消费者组使得在消息消费方面，实现负载均衡和容错的目标变得非常容易。要注意的是，消费者组的消费者实例必须订阅完全相同的 Topic。RocketMQ 支持两种消息模式：集群消费（Clustering）和广播消费（Broadcasting）。</p><h2 id="集群消费-clustering" tabindex="-1"><a class="header-anchor" href="#集群消费-clustering"><span>集群消费（Clustering）</span></a></h2><p>集群消费模式下,相同 Consumer Group 的每个 Consumer 实例平均分摊消息。</p><p><img src="'+n+'" alt="Clustering"></p><h2 id="广播消费-broadcasting" tabindex="-1"><a class="header-anchor" href="#广播消费-broadcasting"><span>广播消费（Broadcasting）</span></a></h2><p>广播消费模式下，相同 Consumer Group 的每个 Consumer 实例都接收全量的消息。</p><p><img src="'+t+'" alt="Broadcasting"></p><h2 id="普通顺序消息-normal-ordered-message" tabindex="-1"><a class="header-anchor" href="#普通顺序消息-normal-ordered-message"><span>普通顺序消息（Normal Ordered Message）</span></a></h2><p>普通顺序消费模式下，消费者通过同一个消息队列（ Topic 分区，称作 Message Queue） 收到的消息是有顺序的，不同消息队列收到的消息则可能是无顺序的。</p><h2 id="严格顺序消息-strictly-ordered-message" tabindex="-1"><a class="header-anchor" href="#严格顺序消息-strictly-ordered-message"><span>严格顺序消息（Strictly Ordered Message）</span></a></h2><p>严格顺序消息模式下，消费者收到的所有消息均是有顺序的。</p><h2 id="标签-tag" tabindex="-1"><a class="header-anchor" href="#标签-tag"><span>标签（Tag）</span></a></h2><p>为消息设置的标志，用于同一主题下区分不同类型的消息。来自同一业务单元的消息，可以根据不同业务目的在同一主题下设置不同标签。标签能够有效地保持代码的清晰度和连贯性，并优化 RocketMQ 提供的查询系统。消费者可以根据 Tag 实现对不同子主题的不同消费逻辑，实现更好的扩展性。</p>',41)]))}const h=r(i,[["render",p]]),m=JSON.parse('{"path":"/rocketmq/docs/basic.html","title":"基础概念","lang":"zh-CN","frontmatter":{"prev":{"text":"首页","link":"/rocketmq"},"description":"基础概念 消息模型（Message Model） RocketMQ 主要由 Producer、Broker、Consumer 三部分组成，其中Producer 负责生产消息，Consumer 负责消费消息，Broker 负责存储消息。Broker 在实际部署过程中对应一台服务器，每个 Broker 可以存储多个 Topic 的消息，每个 Topic 的...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础概念\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-13T01:18:18.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/rocketmq/docs/basic.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"基础概念"}],["meta",{"property":"og:description","content":"基础概念 消息模型（Message Model） RocketMQ 主要由 Producer、Broker、Consumer 三部分组成，其中Producer 负责生产消息，Consumer 负责消费消息，Broker 负责存储消息。Broker 在实际部署过程中对应一台服务器，每个 Broker 可以存储多个 Topic 的消息，每个 Topic 的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-13T01:18:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-13T01:18:18.000Z"}]]},"git":{"createdTime":1656161587000,"updatedTime":1747099098000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@qq.com","commits":1,"url":"https://github.com/PPG007"},{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":1}]},"readingTime":{"minutes":5.36,"words":1607},"filePathRelative":"rocketmq/docs/basic.md","excerpt":"\\n<h2>消息模型（Message Model）</h2>\\n","autoDesc":true}');export{h as comp,m as data};
