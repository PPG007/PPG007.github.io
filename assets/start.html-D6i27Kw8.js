import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,d as p,o as e}from"./app-rQI8KFp-.js";const t={};function n(r,s){return e(),i("div",null,s[0]||(s[0]=[p('<h1 id="起步" tabindex="-1"><a class="header-anchor" href="#起步"><span>起步</span></a></h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>可以使用以下命令生成桩文件：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-shell"><span class="line"><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">docker</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">run</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#0000FF;">--rm</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#0000FF;">--name</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">protoc</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#0000FF;">--mount</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">type=bind,source=</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">${</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">your</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">protofile</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">abs</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">path</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">,target=/app/proto</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">ppg007/protoc-gen:latest</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">/sbin/my_init</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#0000FF;">--</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">bash</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">gen.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果速度较慢可以将镜像从 <code>ppg007/protoc-gen</code> 替换为 <code>registry.cn-qingdao.aliyuncs.com/ppg007/protoc-gen</code>。</p><p>此种方式下，proto 源文件夹必须是绝对路径，且最多允许两层嵌套，例：如果输入的源路径为 /home/user/proto，那么 proto 文件夹中可以直接存放 proto 文件，也可以在 proto 文件夹中创建多个子目录存放 proto 文件。</p><p>如果使用的 grpc-gateway 是使用 yaml 格式描述的，这个 yaml 文件名必须是 <code>service.yml</code>。</p><p>此镜像详细信息见：<a href="https://github.com/PPG007/protoc-gen" target="_blank" rel="noopener noreferrer">protoc-gen</a></p></div><h2 id="引入-grpc" tabindex="-1"><a class="header-anchor" href="#引入-grpc"><span>引入 gRPC</span></a></h2><p><code>go get google.golang.org/grpc</code>。</p>',4)]))}const h=a(t,[["render",n]]),c=JSON.parse('{"path":"/grpc-and-protobuf/docs/grpc/start.html","title":"起步","lang":"zh-CN","frontmatter":{"prev":{"text":"首页","link":"/grpc-and-protobuf"},"description":"起步 提示 可以使用以下命令生成桩文件： 如果速度较慢可以将镜像从 ppg007/protoc-gen 替换为 registry.cn-qingdao.aliyuncs.com/ppg007/protoc-gen。 此种方式下，proto 源文件夹必须是绝对路径，且最多允许两层嵌套，例：如果输入的源路径为 /home/user/proto，那么 pro...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"起步\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-07-10T10:10:59.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/grpc-and-protobuf/docs/grpc/start.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"起步"}],["meta",{"property":"og:description","content":"起步 提示 可以使用以下命令生成桩文件： 如果速度较慢可以将镜像从 ppg007/protoc-gen 替换为 registry.cn-qingdao.aliyuncs.com/ppg007/protoc-gen。 此种方式下，proto 源文件夹必须是绝对路径，且最多允许两层嵌套，例：如果输入的源路径为 /home/user/proto，那么 pro..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-07-10T10:10:59.000Z"}],["meta",{"property":"article:modified_time","content":"2022-07-10T10:10:59.000Z"}]]},"git":{"createdTime":1651811490000,"updatedTime":1657447859000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@qq.com","commits":3,"url":"https://github.com/PPG007"}]},"readingTime":{"minutes":0.62,"words":185},"filePathRelative":"grpc-and-protobuf/docs/grpc/start.md","excerpt":"\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>可以使用以下命令生成桩文件：</p>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" style=\\"--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF\\"><pre class=\\"shiki shiki-themes one-dark-pro light-plus vp-code\\"><code class=\\"language-shell\\"><span class=\\"line\\"><span style=\\"--shiki-dark:#61AFEF;--shiki-light:#795E26\\">docker</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#98C379;--shiki-light:#A31515\\">run</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#D19A66;--shiki-light:#0000FF\\">--rm</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#D19A66;--shiki-light:#0000FF\\">--name</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#98C379;--shiki-light:#A31515\\">protoc</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#D19A66;--shiki-light:#0000FF\\">--mount</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#98C379;--shiki-light:#A31515\\">type=bind,source=</span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">${</span><span style=\\"--shiki-dark:#E06C75;--shiki-light:#001080\\">your</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#E06C75;--shiki-light:#001080\\">protofile</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#E06C75;--shiki-light:#001080\\">abs</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#E06C75;--shiki-light:#001080\\">path</span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">}</span><span style=\\"--shiki-dark:#98C379;--shiki-light:#A31515\\">,target=/app/proto</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#98C379;--shiki-light:#A31515\\">ppg007/protoc-gen:latest</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#98C379;--shiki-light:#A31515\\">/sbin/my_init</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#D19A66;--shiki-light:#0000FF\\">--</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#98C379;--shiki-light:#A31515\\">bash</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#98C379;--shiki-light:#A31515\\">gen.sh</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div><p>如果速度较慢可以将镜像从 <code>ppg007/protoc-gen</code> 替换为 <code>registry.cn-qingdao.aliyuncs.com/ppg007/protoc-gen</code>。</p>\\n<p>此种方式下，proto 源文件夹必须是绝对路径，且最多允许两层嵌套，例：如果输入的源路径为 /home/user/proto，那么 proto 文件夹中可以直接存放 proto 文件，也可以在 proto 文件夹中创建多个子目录存放 proto 文件。</p>\\n<p>如果使用的 grpc-gateway 是使用 yaml 格式描述的，这个 yaml 文件名必须是 <code>service.yml</code>。</p>\\n<p>此镜像详细信息见：<a href=\\"https://github.com/PPG007/protoc-gen\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">protoc-gen</a></p>\\n</div>","autoDesc":true}');export{h as comp,c as data};
