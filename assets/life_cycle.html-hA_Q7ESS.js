import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,d as s,o as r}from"./app-rQI8KFp-.js";const n={};function i(l,t){return r(),o("div",null,t[0]||(t[0]=[s('<h1 id="生命周期和作用域" tabindex="-1"><a class="header-anchor" href="#生命周期和作用域"><span>生命周期和作用域</span></a></h1><p>理解我们之前讨论过的不同作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p><ul><li>SqlSessionFactoryBuilder：</li></ul><p>一旦创建了 SqlSessionFactory，就不再需要它了。 因此 SqlSessionFactoryBuilder 实例的最佳作用域是<strong>方法作用域</strong>（也就是局部方法变量）。</p><ul><li>SqlSessionFactory：</li></ul><p>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。 使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次，多次重建 SqlSessionFactory 被视为一种代码“坏习惯”。因此 SqlSessionFactory 的最佳作用域是<strong>应用作用域</strong>。 有很多方法可以做到，最简单的就是使用<strong>单例模式</strong>或者<strong>静态单例模式</strong>。</p><ul><li>SqlSession：</li></ul><p>每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例<strong>不是线程安全的</strong>，因此是不能被共享的，所以它的最佳的作用域是<strong>请求或方法作用域</strong>。 绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。 也绝不能将 SqlSession 实例的引用放在任何类型的托管作用域中，比如 Servlet 框架中的 HttpSession。 如果你现在正在使用一种 Web 框架，考虑将 SqlSession 放在一个和 HTTP 请求相似的作用域中。 换句话说，每次收到 HTTP 请求，就可以打开一个 SqlSession，返回一个响应后，就关闭它。 <strong>这个关闭操作很重要，为了确保每次都能执行关闭操作，你应该把这个关闭操作放到 finally 块中</strong>。</p>',8)]))}const p=e(n,[["render",i]]),S=JSON.parse('{"path":"/mybatis/docs/life_cycle.html","title":"生命周期和作用域","lang":"zh-CN","frontmatter":{"description":"生命周期和作用域 理解我们之前讨论过的不同作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题。 SqlSessionFactoryBuilder： 一旦创建了 SqlSessionFactory，就不再需要它了。 因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）。 SqlS...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"生命周期和作用域\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-13T02:19:20.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/mybatis/docs/life_cycle.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"生命周期和作用域"}],["meta",{"property":"og:description","content":"生命周期和作用域 理解我们之前讨论过的不同作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题。 SqlSessionFactoryBuilder： 一旦创建了 SqlSessionFactory，就不再需要它了。 因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）。 SqlS..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-13T02:19:20.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-13T02:19:20.000Z"}]]},"git":{"createdTime":1640699484000,"updatedTime":1749781160000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"},{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":1}]},"readingTime":{"minutes":1.47,"words":440},"filePathRelative":"mybatis/docs/life_cycle.md","excerpt":"\\n<p>理解我们之前讨论过的不同作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p>","autoDesc":true}');export{p as comp,S as data};
