import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as r}from"./app-rQI8KFp-.js";const o={};function p(i,t){return r(),a("div",null,t[0]||(t[0]=[n('<h1 id="抽象工厂模式" tabindex="-1"><a class="header-anchor" href="#抽象工厂模式"><span>抽象工厂模式</span></a></h1><div class="hint-container tip"><p class="hint-container-title">定义</p><p>为创建<strong>一组</strong>相关或相互依赖的对象提供一个接口。</p></div><p>举例：</p><p>每个电脑厂商都能生产键盘和鼠标，且这两件产品存在对应的关系。</p><p>首先定义两个抽象类：键盘类和鼠标类，A 厂商和 B 厂商分别创建一个鼠标类、一个键盘类继承自抽象类。</p><p>定义一个工厂接口，包含创建键盘和鼠标的功能，A、B 厂商工厂都实现这个接口，并各自重写方法生产自己的键盘和鼠标。</p><p>这样在调用者看来，只要<code>工厂.创建的产品名</code>就能获得对应厂商的某个产品了。</p><h2 id="抽象工厂模式的优点" tabindex="-1"><a class="header-anchor" href="#抽象工厂模式的优点"><span>抽象工厂模式的优点</span></a></h2><ul><li>封装性，上层模块只要关注产品的抽象即可，具体实现只要工厂知晓即可。</li><li>抽象工厂模式中对象是有关系的，关系只在工厂中被约束，例如控制产品比例，这对上层模块是隐藏的。</li></ul><h2 id="抽象工厂模式的缺点" tabindex="-1"><a class="header-anchor" href="#抽象工厂模式的缺点"><span>抽象工厂模式的缺点</span></a></h2><p>产品族（纵向扩展）扩展非常困难，违反开闭原则。</p><h2 id="抽象工厂模式的使用场景" tabindex="-1"><a class="header-anchor" href="#抽象工厂模式的使用场景"><span>抽象工厂模式的使用场景</span></a></h2><p>一组有着相同约束的对象。例如比例关系、对应关系等。</p><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h2><p>抽象工厂<em>横向扩展</em>容易，<em>纵向扩展</em>困难，例如电脑工厂还要生产音响，这就属于纵向扩展，要修改工厂接口、接口的实现、还要编写抽象类和一系列实现类；如果增加一个厂商，则只要通过继承和实现即可完成扩展，符合开闭原则。</p>',15)]))}const d=e(o,[["render",p]]),h=JSON.parse('{"path":"/design-pattern/docs/abstract_factory.html","title":"抽象工厂模式","lang":"zh-CN","frontmatter":{"description":"抽象工厂模式 定义 为创建一组相关或相互依赖的对象提供一个接口。 举例： 每个电脑厂商都能生产键盘和鼠标，且这两件产品存在对应的关系。 首先定义两个抽象类：键盘类和鼠标类，A 厂商和 B 厂商分别创建一个鼠标类、一个键盘类继承自抽象类。 定义一个工厂接口，包含创建键盘和鼠标的功能，A、B 厂商工厂都实现这个接口，并各自重写方法生产自己的键盘和鼠标。 这...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"抽象工厂模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2021-12-30T09:14:08.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/design-pattern/docs/abstract_factory.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"抽象工厂模式"}],["meta",{"property":"og:description","content":"抽象工厂模式 定义 为创建一组相关或相互依赖的对象提供一个接口。 举例： 每个电脑厂商都能生产键盘和鼠标，且这两件产品存在对应的关系。 首先定义两个抽象类：键盘类和鼠标类，A 厂商和 B 厂商分别创建一个鼠标类、一个键盘类继承自抽象类。 定义一个工厂接口，包含创建键盘和鼠标的功能，A、B 厂商工厂都实现这个接口，并各自重写方法生产自己的键盘和鼠标。 这..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2021-12-30T09:14:08.000Z"}],["meta",{"property":"article:modified_time","content":"2021-12-30T09:14:08.000Z"}]]},"git":{"createdTime":1640855648000,"updatedTime":1640855648000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"}]},"readingTime":{"minutes":1.41,"words":424},"filePathRelative":"design-pattern/docs/abstract_factory.md","excerpt":"\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">定义</p>\\n<p>为创建<strong>一组</strong>相关或相互依赖的对象提供一个接口。</p>\\n</div>","autoDesc":true}');export{d as comp,h as data};
