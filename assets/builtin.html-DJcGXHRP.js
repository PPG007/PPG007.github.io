import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as n,o as t}from"./app-rQI8KFp-.js";const a={};function r(s,i){return t(),e("div",null,i[0]||(i[0]=[n('<h1 id="内置对象" tabindex="-1"><a class="header-anchor" href="#内置对象"><span>内置对象</span></a></h1><h2 id="array-对象" tabindex="-1"><a class="header-anchor" href="#array-对象"><span>Array 对象</span></a></h2><ul><li>push()、pop()： <ul><li>push() 方法用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。</li><li>pop() 方法用于删除数组的最后一个元素并返回这个元素，对空数组会返回 undefined。</li></ul></li><li>shift()、unshift()： <ul><li>shift() 方法用于删除数组的第一个元素并返回该元素。</li><li>unshift() 方法用于在数组的第一个位置添加元素并返回添加后的数组长度。</li></ul></li><li>join()：以指定参数作为分隔符，将所有数组成员连接成一个字符串返回，如果不提供参数，默认是逗号，如果数组成员是 undefined 或 null 或空位，会被转成空字符串。</li><li>concat()：用于多个数组的合并，将新数组的成员添加到原数组成员的后部然后返回一个新数组，原数组不变，如果数组成员包括对象，concat 方法返回当前数组的一个浅拷贝。</li><li>reverse()：颠倒排列数组元素，返回改变后的数组。</li><li>slice()：用于提取目标数组的一部分，返回一个新数组，原数组不变，第一个参数为起始位置，包括在返回值中，第二个参数为终止位置，不包含在返回值中。</li><li>splice()：删除原数组的一部分成员，并可以在删除的位置添加新的数组成员，返回值是被删除的元素，第一个参数是删除的起始位置，第二个参数是被删除的元素个数，后面的所有参数都是要被插入数组的元素。第一个参数如果是负数表示从后面开始计算。</li><li>sort()：对数组成员进行排序，默认按照字典顺序排序，排序后原数组会被改变，可以通过为 sort 传入一个函数自定义排序方式，这个函数有两个参数。</li><li>map()：将数组的所有成员依次传入参数函数，把每一次的执行结果组成一个新数组返回，map 会想这个函数传递当前成员、当前位置、数组本身。</li><li>foreach()：传入一个函数做参数，该函数接受三个参数：当前元素、当前位置、整个数组。foreach 方法可以接受第二个参数绑定参数函数的 this 变量；foreach 方法无法终端执行；foreach 方法会跳过数组的空位，但不会跳过 undefined 和 null。</li><li>filter()：用于过滤数组成员，满足条件的成员组成一个新数组返回。接受一个函数做参数，函数有一个当前元素值的参数，filter 可以接受第二个参数用来绑定参数函数内部的 this 变量。</li><li>some()、every()： <ul><li>都接受一个函数作为参数，所有数组成员依次执行该函数，这个函数接受三个参数：当前成员、当前位置、整个数组，返回一个布尔值。</li><li>some 方法只要一个成员的返回值是 true，整体就返回 true。</li><li>every 方法只要一个成员的返回值是 false，整体就返回 false。</li><li>对于空数组，some 方法返回 false，every 方法返回 true。</li><li>都可以接受第二个参数绑定函数内部的 this 变量。</li></ul></li><li>indexOf()、lastIndexOf()： <ul><li>indexOf 方法返回给定元素在数组中第一次出现的位置，如果没有就返回 -1，可以接受第二个参数表示搜索开始的位置。</li><li>lastIndexOf 方法返回给定元素在数组中最后一次出现的位置，没有就返回 -1.</li><li>这两个方法不能用来搜索 NaN 的位置。</li></ul></li><li>reduce()、reduceRight()： <ul><li>依次处理数组的每个成员最终累计为一个值，reduce 从左往右处理，reduceRight 从右往左处理。</li><li>第一个参数是一个函数，该函数接受四个参数： <ul><li>累积变量：第一次执行时默认为数组第一个成员，以后每次执行都是上一轮的返回值。</li><li>当前变量：第一次执行时，默认为数组的第二个成员，以后每次执行都是下一个成员。</li><li>当前位置。</li><li>原数组。</li></ul></li></ul></li></ul><h2 id="string-对象" tabindex="-1"><a class="header-anchor" href="#string-对象"><span>String 对象</span></a></h2><ul><li>concat() 方法：用于连接两个字符串，返回一个新字符串，不改变原字符串。</li><li>slice() 方法：从原字符串取出子字符串并返回。</li><li>substring() 方法：从原字符串取出子字符串并返回。</li><li>indexOf()：返回一个字符串在另一个字符串中第一次出现的位置。</li><li>lastIndexOf()：从尾部开始匹配，第二个参数表示从该位置向前匹配。</li><li>trim()：去除字符串两端的空格，返回一个新字符串。</li><li>toLowerCase()、toUpperCase()：将一个字符串全部转为小写或大写。</li><li>match()：确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串，如果没有找到匹配就返回 null。返回的数组还有 index 属性和 input 属性，分别表示匹配字符串开始的位置和原始字符串。</li><li>search()、replace()：search 方法与 match 类似，返回值为匹配的第一个位置，如果没有匹配就返回 -1；replace 方法用于替换匹配的子字符串，一般情况下只替换第一个匹配。</li><li>split()：分隔字符串。</li></ul><h2 id="math-对象" tabindex="-1"><a class="header-anchor" href="#math-对象"><span>Math 对象</span></a></h2><ul><li>abs()：返回参数的绝对值。</li><li>max()、min()：返回参数中的最大最小值。</li><li>floor()、ceil()：返回小于等于参数值的最大整数、返回大于或等于参数值的最小整数。</li><li>round()：四舍五入</li><li>pow()：返回以第一个参数为底数、第二个参数为指数的幂运算值。</li><li>sqrt()：返回参数的平方根。</li><li>log()：返回以 e 为底的自然对数值。</li><li>exp()：返回常数 e 的参数次方。</li><li>random()：返回大于等于 0，小于 1 的一个伪随机数。</li></ul><h2 id="json-对象" tabindex="-1"><a class="header-anchor" href="#json-对象"><span>JSON 对象</span></a></h2><ul><li>JSON.stringify()：将一个值转为 JSON 字符串。</li><li>JSON.parse()：将 JSON 字符串转换为对应的值。</li></ul>',9)]))}const c=l(a,[["render",r]]),h=JSON.parse('{"path":"/javascript/docs/builtin.html","title":"内置对象","lang":"zh-CN","frontmatter":{"description":"内置对象 Array 对象 push()、pop()： push() 方法用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。 pop() 方法用于删除数组的最后一个元素并返回这个元素，对空数组会返回 undefined。 shift()、unshift()： shift() 方法用于删除数组的第一个元素并返回该元素。 unshift()...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"内置对象\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-13T01:18:18.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/javascript/docs/builtin.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"内置对象"}],["meta",{"property":"og:description","content":"内置对象 Array 对象 push()、pop()： push() 方法用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。 pop() 方法用于删除数组的最后一个元素并返回这个元素，对空数组会返回 undefined。 shift()、unshift()： shift() 方法用于删除数组的第一个元素并返回该元素。 unshift()..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-13T01:18:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-13T01:18:18.000Z"}]]},"git":{"createdTime":1640441337000,"updatedTime":1747099098000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"},{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":1}]},"readingTime":{"minutes":5.04,"words":1512},"filePathRelative":"javascript/docs/builtin.md","excerpt":"\\n<h2>Array 对象</h2>\\n<ul>\\n<li>push()、pop()：\\n<ul>\\n<li>push() 方法用于在数组的末端添加一个或多个元素，并返回添加新元素后的数组长度。</li>\\n<li>pop() 方法用于删除数组的最后一个元素并返回这个元素，对空数组会返回 undefined。</li>\\n</ul>\\n</li>\\n<li>shift()、unshift()：\\n<ul>\\n<li>shift() 方法用于删除数组的第一个元素并返回该元素。</li>\\n<li>unshift() 方法用于在数组的第一个位置添加元素并返回添加后的数组长度。</li>\\n</ul>\\n</li>\\n<li>join()：以指定参数作为分隔符，将所有数组成员连接成一个字符串返回，如果不提供参数，默认是逗号，如果数组成员是 undefined 或 null 或空位，会被转成空字符串。</li>\\n<li>concat()：用于多个数组的合并，将新数组的成员添加到原数组成员的后部然后返回一个新数组，原数组不变，如果数组成员包括对象，concat 方法返回当前数组的一个浅拷贝。</li>\\n<li>reverse()：颠倒排列数组元素，返回改变后的数组。</li>\\n<li>slice()：用于提取目标数组的一部分，返回一个新数组，原数组不变，第一个参数为起始位置，包括在返回值中，第二个参数为终止位置，不包含在返回值中。</li>\\n<li>splice()：删除原数组的一部分成员，并可以在删除的位置添加新的数组成员，返回值是被删除的元素，第一个参数是删除的起始位置，第二个参数是被删除的元素个数，后面的所有参数都是要被插入数组的元素。第一个参数如果是负数表示从后面开始计算。</li>\\n<li>sort()：对数组成员进行排序，默认按照字典顺序排序，排序后原数组会被改变，可以通过为 sort 传入一个函数自定义排序方式，这个函数有两个参数。</li>\\n<li>map()：将数组的所有成员依次传入参数函数，把每一次的执行结果组成一个新数组返回，map 会想这个函数传递当前成员、当前位置、数组本身。</li>\\n<li>foreach()：传入一个函数做参数，该函数接受三个参数：当前元素、当前位置、整个数组。foreach 方法可以接受第二个参数绑定参数函数的 this 变量；foreach 方法无法终端执行；foreach 方法会跳过数组的空位，但不会跳过 undefined 和 null。</li>\\n<li>filter()：用于过滤数组成员，满足条件的成员组成一个新数组返回。接受一个函数做参数，函数有一个当前元素值的参数，filter 可以接受第二个参数用来绑定参数函数内部的 this 变量。</li>\\n<li>some()、every()：\\n<ul>\\n<li>都接受一个函数作为参数，所有数组成员依次执行该函数，这个函数接受三个参数：当前成员、当前位置、整个数组，返回一个布尔值。</li>\\n<li>some 方法只要一个成员的返回值是 true，整体就返回 true。</li>\\n<li>every 方法只要一个成员的返回值是 false，整体就返回 false。</li>\\n<li>对于空数组，some 方法返回 false，every 方法返回 true。</li>\\n<li>都可以接受第二个参数绑定函数内部的 this 变量。</li>\\n</ul>\\n</li>\\n<li>indexOf()、lastIndexOf()：\\n<ul>\\n<li>indexOf 方法返回给定元素在数组中第一次出现的位置，如果没有就返回 -1，可以接受第二个参数表示搜索开始的位置。</li>\\n<li>lastIndexOf 方法返回给定元素在数组中最后一次出现的位置，没有就返回 -1.</li>\\n<li>这两个方法不能用来搜索 NaN 的位置。</li>\\n</ul>\\n</li>\\n<li>reduce()、reduceRight()：\\n<ul>\\n<li>依次处理数组的每个成员最终累计为一个值，reduce 从左往右处理，reduceRight 从右往左处理。</li>\\n<li>第一个参数是一个函数，该函数接受四个参数：\\n<ul>\\n<li>累积变量：第一次执行时默认为数组第一个成员，以后每次执行都是上一轮的返回值。</li>\\n<li>当前变量：第一次执行时，默认为数组的第二个成员，以后每次执行都是下一个成员。</li>\\n<li>当前位置。</li>\\n<li>原数组。</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{c as comp,h as data};
