import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as o,o as s}from"./app-rQI8KFp-.js";const a={};function i(n,e){return s(),t("div",null,e[0]||(e[0]=[o('<h1 id="promise-对象" tabindex="-1"><a class="header-anchor" href="#promise-对象"><span>Promise 对象</span></a></h1><h2 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h2><p>Promise 对象是一个构造函数，用来生成 Promise 实例。Promise 构造函数接受一个函数作为参数，该函数的两个参数分别是 resolve 和 reject。</p><ul><li>resolve 函数的作用是将 Promise 对象的状态从“未完成”变成“成功”，在异步操作成功时调用，并将异步操作的结果作为参数传递出去。</li><li>reject 函数的作用是将 Promise 对象的状态从“未完成”变成“失败”。</li></ul><p>Promise 实例生成以后可以用 then 方法分别制定 resolved 状态和 rejected 状态的回调函数。then 方法接受两个回调函数作为参数，第一个回调函数对应 resolved，第二个回调函数对应 rejected。Promise 创建后会立即执行，then 方法指定的回调函数会在当前脚本所有同步任务执行完才会执行。</p><h2 id="then-方法" tabindex="-1"><a class="header-anchor" href="#then-方法"><span>then 方法</span></a></h2><p>then 方法返回的是一个新的 Promise 实例，不是原来那个 Promise 实例，因此可以采用链式写法。</p><h2 id="catch-方法" tabindex="-1"><a class="header-anchor" href="#catch-方法"><span>catch 方法</span></a></h2><p>catch 方法相当于 then 方法的第一个参数为 null 或 undefined，用于指定发生错误时的回调函数，如果 Promise 已经是 resolved 状态，再抛出错误是无效的，等于没有抛出。</p><p>Promise 对象的错误有“冒泡”性质，会一直向后传递，直到被捕获为止，错误总是会被下一个 catch 语句捕获。</p><p>如果没有使用 catch 方法指定错误处理的回调函数，Promise 对象抛出的错误不会传递到外层代码。</p><h2 id="finally-方法" tabindex="-1"><a class="header-anchor" href="#finally-方法"><span>finally 方法</span></a></h2><p>finally 方法用于指定一定会执行的操作。</p><h2 id="promise-all-方法" tabindex="-1"><a class="header-anchor" href="#promise-all-方法"><span>Promise.all 方法</span></a></h2><p>all 方法用于将多个 Promise 实例包装成一个新的 Promise 实例。</p><p>all 方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。</p><p>如果多个 Promise 中有一个是 rejected，最终结果就是 rejected。</p>',17)]))}const c=r(a,[["render",i]]),l=JSON.parse('{"path":"/es6/docs/promise.html","title":"Promise 对象","lang":"zh-CN","frontmatter":{"description":"Promise 对象 基本用法 Promise 对象是一个构造函数，用来生成 Promise 实例。Promise 构造函数接受一个函数作为参数，该函数的两个参数分别是 resolve 和 reject。 resolve 函数的作用是将 Promise 对象的状态从“未完成”变成“成功”，在异步操作成功时调用，并将异步操作的结果作为参数传递出去。 re...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Promise 对象\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2021-12-26T02:53:48.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/es6/docs/promise.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"Promise 对象"}],["meta",{"property":"og:description","content":"Promise 对象 基本用法 Promise 对象是一个构造函数，用来生成 Promise 实例。Promise 构造函数接受一个函数作为参数，该函数的两个参数分别是 resolve 和 reject。 resolve 函数的作用是将 Promise 对象的状态从“未完成”变成“成功”，在异步操作成功时调用，并将异步操作的结果作为参数传递出去。 re..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2021-12-26T02:53:48.000Z"}],["meta",{"property":"article:modified_time","content":"2021-12-26T02:53:48.000Z"}]]},"git":{"createdTime":1640487228000,"updatedTime":1640487228000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"}]},"readingTime":{"minutes":1.64,"words":491},"filePathRelative":"es6/docs/promise.md","excerpt":"\\n<h2>基本用法</h2>\\n<p>Promise 对象是一个构造函数，用来生成 Promise 实例。Promise 构造函数接受一个函数作为参数，该函数的两个参数分别是 resolve 和 reject。</p>","autoDesc":true}');export{c as comp,l as data};
