import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as e,o as n}from"./app-rQI8KFp-.js";const t={};function p(l,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="使用注解开发" tabindex="-1"><a class="header-anchor" href="#使用注解开发"><span>使用注解开发</span></a></h1><ul><li>在 Spring4 以后，要想使用注解，必须保证 aop 包导入。</li><li>使用注解需要导入 context 约束，并且开启注解的支持。</li></ul><h2 id="常用注解" tabindex="-1"><a class="header-anchor" href="#常用注解"><span>常用注解</span></a></h2><ul><li><p>@Autowired：</p><p>自动装配注解，通过ByType实现。</p></li><li><p>@Resource：</p><p>自动装配注解，默认ByName，也会ByType。</p></li><li><p>@Nullable：</p><p>可为空注解。</p></li><li><p>@Component：</p><p>组件注解，需要在配置文件中开启组件扫描，相当于在配置文件中注册bean，默认名字是类名的小写。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-xml"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&lt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#800000;">context:component-scan</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#E50000;">base-package</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#0000FF;">&quot;pojo&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>@Value：</p><p>加在类属性或方法上，为简单类型的成员赋值，不适用于复杂类型如 List。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-java"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">@</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Component</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">public</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">class</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">User</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">@</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Value</span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&quot;test&quot;</span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">)</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">public</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">String</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">name</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>@Scope：</p><p>设置作用域（单例、原型）</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-java"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">@</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Scope</span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">(</span><span style="--shiki-dark:#D19A66;--shiki-light:#000000;">value</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&quot;singleton&quot;</span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h2 id="衍生注解" tabindex="-1"><a class="header-anchor" href="#衍生注解"><span>衍生注解</span></a></h2><p><code>@Component</code> 的相关注解：</p><p>在web开发中，依照MVC三层架构分层：</p><ul><li>DAO 层中，使用 <code>@Repository</code> 注解。</li><li>Service 层中，使用 <code>@Service</code> 注解。</li><li>controller 层中，使用 <code>@Controller</code> 注解。</li></ul><p>上述注解功能一致，代表将某个类注册到 Spring 中。</p>`,9)]))}const o=i(t,[["render",p]]),c=JSON.parse('{"path":"/spring/docs/annotation.html","title":"使用注解开发","lang":"zh-CN","frontmatter":{"description":"使用注解开发 在 Spring4 以后，要想使用注解，必须保证 aop 包导入。 使用注解需要导入 context 约束，并且开启注解的支持。 常用注解 @Autowired： 自动装配注解，通过ByType实现。 @Resource： 自动装配注解，默认ByName，也会ByType。 @Nullable： 可为空注解。 @Component： 组件...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用注解开发\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-13T01:18:18.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/spring/docs/annotation.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"使用注解开发"}],["meta",{"property":"og:description","content":"使用注解开发 在 Spring4 以后，要想使用注解，必须保证 aop 包导入。 使用注解需要导入 context 约束，并且开启注解的支持。 常用注解 @Autowired： 自动装配注解，通过ByType实现。 @Resource： 自动装配注解，默认ByName，也会ByType。 @Nullable： 可为空注解。 @Component： 组件..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-13T01:18:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-13T01:18:18.000Z"}]]},"git":{"createdTime":1640525939000,"updatedTime":1747099098000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"},{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":1}]},"readingTime":{"minutes":0.83,"words":249},"filePathRelative":"spring/docs/annotation.md","excerpt":"\\n<ul>\\n<li>在 Spring4 以后，要想使用注解，必须保证 aop 包导入。</li>\\n<li>使用注解需要导入 context 约束，并且开启注解的支持。</li>\\n</ul>","autoDesc":true}');export{o as comp,c as data};
