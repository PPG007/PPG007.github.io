import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as e,o as n}from"./app-rQI8KFp-.js";const p={};function t(l,s){return n(),a("div",null,s[0]||(s[0]=[e('<h1 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>确定一个值是什么类型：</p><ul><li><p>typeof 运算符：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-js"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">console</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">log</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">typeof</span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&#39;123&#39;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">//</span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">string</span></span>\n<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">console</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">log</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">typeof</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">123</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">//</span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">number</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>instanceof 运算符：</p><p>instanceof 运算符返回一个布尔值，表示对象是否是某个构造函数的实例。运算符左边是实例对象，右边是构造函数，检查右边构造函数的原型对象是否在左边对象的原型链上，等价于 <code>Constructor.prototype.isPrototypeOf(instance)</code>。</p></li><li><p>Object.prototype.toString 方法：</p></li></ul><h2 id="布尔值、null、undefined" tabindex="-1"><a class="header-anchor" href="#布尔值、null、undefined"><span>布尔值、null、undefined</span></a></h2><p>null 在转换为数值时会转换为 0，undefined 会转换为 NaN。</p><p>布尔值转换规则：</p><p>下面这些内容会被转为 false：</p><ul><li>undefined。</li><li>null。</li><li>false。</li><li>0。</li><li>NaN。</li><li>&quot;&quot; 或 &#39;&#39;。</li></ul><p><strong>注意：空数组、空对象都会转为 true。</strong></p><h2 id="数值" tabindex="-1"><a class="header-anchor" href="#数值"><span>数值</span></a></h2><p>JavaScript 中所有数字都是以 64 位浮点数形式储存，即使是整数。</p><p>关于 NaN：</p><ul><li>NaN 不是独立的数据类型，仍然是 number。</li><li>NaN 不等于任何值，包括自己。</li><li>NaN 与任何数运算得到的都是NaN。</li></ul><p>一些与数值相关的全局方法：</p><ul><li>parseInt：将字符串转为整数。 <ul><li>如果字符串头部有空格，空格会被自动去除。</li><li>如果参数不是字符串则会先转换为字符串。</li><li>转换时是一个个字符依次转换，如果遇到不能转为数字的字符，就不在进行下去，只返回已转好的部分。</li><li>parseInt 的返回值要么是一个十进制整数，要么是 NaN。</li><li>parseInt 可以接受第二个参数，表示被解析的值的进制，返回对应的十进制数。</li></ul></li><li>parseFloat：将一个字符串转为浮点数。</li><li>isNaN：用来判断一个值是否为 NaN。此方法只对数值有效，如果传入其他值会被先转成数值，字符串会被转为 NaN 导致结果为 true。对于对象和数组同样返回 true，但是如果是空数组或者是只有一个数值成员的数组会返回 false。</li><li>isFinite：返回一个布尔值，表示某个值是否为正常的数值。</li></ul><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h2><p>Base64 转码：</p><ul><li>btoa()：任意值转为 Base64 编码。</li><li>atob()：Base64 编码转为原来的值。</li></ul><p>非 ASCII 码字符转为 Base64 编码中间必须插入一个转码环节。通过 <code>encodeURIComponent()</code> 进行编码，通过 <code>decodeURIComponent()</code> 进行解码。</p><p>在 Node.js 中无法使用 <code>btoa-atob</code> 两个方法，需要使用 <code>Buffer.from(str).toString(&#39;base64&#39;)</code> 将字符串转换为 Base64 编码，使用 <code>Buffer.from(str,&#39;base64&#39;).toString()</code> 将 Base64 编码转为字符串。</p><h2 id="对象" tabindex="-1"><a class="header-anchor" href="#对象"><span>对象</span></a></h2><p>定义对象时，键加不加引号都可以，最后都会被转成字符串，如果键名不符合标识名的条件，例如第一个字符是数字，或者含有空格或运算符而且也不是数字，必须加引号。</p><p>如果不同的变量名指向同一个对象，那么它们都是这个对象的引用，指向同一块内存，修改一个变量，会影响所有变量；如果取消某个变量对于原对象的引用，不会影响到另一个变量。</p><p>查看一个对象本身的所有属性：<code>Object.keys</code> 方法。</p><p>删除对象的属性：<code>delete</code>，删除成功返回 true，如果删除一个不存在的属性也是返回 true。</p><p>属性是否存在：<code>in</code>，包含就返回 true，不包含就返回 false，但是这个运算符不会区分哪些属性是继承的，哪些是自己的。</p><p>判断是否是自身的属性：<code>hasOwnProperty</code>。</p><p>属性的遍历：使用 <code>for...in</code> 可以对属性进行遍历，它遍历的是对象所有可遍历的属性，会跳过不可遍历的属性。不仅遍历对象自身的属性，还遍历继承的属性，一般结合 <code>hasOwnProperties</code> 方法使用：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">for</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">const</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#0070C1;">key</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">in</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">user</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">)</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>\n<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">if</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">user</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">hasOwnProperty</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">key</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">))</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>\n<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">console</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">log</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">`键：</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">${</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">key</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">}</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">`</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span></span>\n<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">console</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">log</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">`值：</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">${</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">user</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000FF;">[</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">key</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000FF;">]</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">}</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">`</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span></span>\n<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>\n<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>with 语句：操作一个对象的多个属性时提供方便，如果在 with 语句块内部进行赋值操作，必须是对象已有的属性，否则会创造一个当前作用域的全局变量</p><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><p>函数的声明：</p><ul><li>function 命令。</li><li>函数表达式：将函数匿名赋给一个变量，结尾要加分号。</li><li>Function 构造函数。</li></ul><p>函数的属性和方法：</p><ul><li>name 属性：返回函数的名字，如果是通过变量赋值定义的匿名函数，那么返回变量名。</li><li>length 属性：返回函数预期传入的参数个数。</li><li>toString()：返回一个字符串，内容是函数的源码。</li></ul><p>参数的传递：如果参数是原始类型的值，传递方式是值传递，函数体内修改参数值不会影响到函数外部，如果参数是符合类型的值，传递方式是传址传递，传入的是原始值地址，如果函数体中修改对象、数组是整体替换那将不会影响原来的对象，因为只是修改了一个引用。</p><p>如果存在重名的参数，取最后的值。如果一个函数有两个重名参数，传入两个参数时，通过变量名只能获取第二个参数，如果传一个参数，则会变成 undefined。</p><p>arguments 对象：</p><p>这个对象包含了函数运行时的所有参数，可以通过下标对参数进行访问，这个对象只能在函数体内部使用，在严格模式下，修改 arguments 对象不会影响到实际的函数参数，通过 length 属性可以判断调用时带几个参数。</p><p>虽然这个对象看起来很像数组，但它是一个对象，数组专有的方法不能在这个对象上使用。</p><p>闭包：能够读取其他函数内部变量的函数，由于 JavaScript 的特点，这个函数就是一个函数的子函数，闭包将函数内部和函数外部连接起来一座桥梁。闭包使得内部变量记住上一次调用时的运算结果，每一次调用都是在上一次调用的基础上进行计算。闭包还可以封装对象的私有属性和私有方法。</p><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><p>length 属性：如果认为扩大 length，那么新出来的位置上都是空的。</p><p>通过 <code>in</code> 运算符检查某个键名是否存在。</p><p>使用 <code>delete</code> 命令删除数组中的某个元素时，不会影响 length 属性，length 属性不过滤空位。</p>',46)]))}const k=i(p,[["render",t]]),d=JSON.parse('{"path":"/javascript/docs/data_type.html","title":"数据类型","lang":"zh-CN","frontmatter":{"description":"数据类型 概述 确定一个值是什么类型： typeof 运算符： instanceof 运算符： instanceof 运算符返回一个布尔值，表示对象是否是某个构造函数的实例。运算符左边是实例对象，右边是构造函数，检查右边构造函数的原型对象是否在左边对象的原型链上，等价于 Constructor.prototype.isPrototypeOf(insta...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-13T01:18:18.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/javascript/docs/data_type.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"数据类型"}],["meta",{"property":"og:description","content":"数据类型 概述 确定一个值是什么类型： typeof 运算符： instanceof 运算符： instanceof 运算符返回一个布尔值，表示对象是否是某个构造函数的实例。运算符左边是实例对象，右边是构造函数，检查右边构造函数的原型对象是否在左边对象的原型链上，等价于 Constructor.prototype.isPrototypeOf(insta..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-13T01:18:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-13T01:18:18.000Z"}]]},"git":{"createdTime":1640441337000,"updatedTime":1747099098000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"},{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":1}]},"readingTime":{"minutes":5.34,"words":1603},"filePathRelative":"javascript/docs/data_type.md","excerpt":"\\n<h2>概述</h2>\\n<p>确定一个值是什么类型：</p>","autoDesc":true}');export{k as comp,d as data};
