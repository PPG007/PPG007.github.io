import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as o,o as a}from"./app-rQI8KFp-.js";const i="/assets/container_evolution-DoRIpOun.svg",r={};function s(p,e){return a(),n("div",null,e[0]||(e[0]=[o('<h1 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h1><h2 id="kubernetes-是什么" tabindex="-1"><a class="header-anchor" href="#kubernetes-是什么"><span>Kubernetes 是什么</span></a></h2><p><img src="'+i+'" alt="container_evolution"></p><ul><li><p>传统部署时代：</p><p>早期，各个组织机构在物理服务器上运行应用程序。无法为物理服务器中的应用程序定义资源边界，这会导致资源分配问题。 例如，如果在物理服务器上运行多个应用程序，则可能会出现一个应用程序占用大部分资源的情况， 结果可能导致其他应用程序的性能下降。 一种解决方案是在不同的物理服务器上运行每个应用程序，但是由于资源利用不足而无法扩展， 并且维护许多物理服务器的成本很高。</p></li><li><p>虚拟化部署时代：</p><p>作为解决方案，引入了虚拟化。虚拟化技术允许你在单个物理服务器的 CPU 上运行多个虚拟机（VM）。 虚拟化允许应用程序在 VM 之间隔离，并提供一定程度的安全，因为一个应用程序的信息 不能被另一应用程序随意访问。</p><p>虚拟化技术能够更好地利用物理服务器上的资源，并且因为可轻松地添加或更新应用程序 而可以实现更好的可伸缩性，降低硬件成本等等。</p><p>每个 VM 是一台完整的计算机，在虚拟化硬件之上运行所有组件，包括其自己的操作系统。</p></li><li><p>容器部署时代：</p><p>容器类似于 VM，但是它们具有被放宽的隔离属性，可以在应用程序之间共享操作系统（OS）。 因此，容器被认为是轻量级的。容器与 VM 类似，具有自己的文件系统、CPU、内存、进程空间等。 由于它们与基础架构分离，因此可以跨云和 OS 发行版本进行移植。</p></li></ul><h3 id="kubernetes-能做什么" tabindex="-1"><a class="header-anchor" href="#kubernetes-能做什么"><span>Kubernetes 能做什么</span></a></h3><ul><li>服务发现与负载均衡。</li><li>存储编排。</li><li>自动部署和回滚。</li><li>自动完成装箱计算。</li><li>自我修复。</li><li>秘钥管理与配置管理。</li></ul>',6)]))}const m=t(r,[["render",s]]),u=JSON.parse('{"path":"/kubernetes/docs/basic.html","title":"概念","lang":"zh-CN","frontmatter":{"prev":{"text":"首页","link":"/kubernetes"},"description":"概念 Kubernetes 是什么 container_evolution 传统部署时代： 早期，各个组织机构在物理服务器上运行应用程序。无法为物理服务器中的应用程序定义资源边界，这会导致资源分配问题。 例如，如果在物理服务器上运行多个应用程序，则可能会出现一个应用程序占用大部分资源的情况， 结果可能导致其他应用程序的性能下降。 一种解决方案是在不同的...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"概念\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-13T01:18:18.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/kubernetes/docs/basic.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"概念"}],["meta",{"property":"og:description","content":"概念 Kubernetes 是什么 container_evolution 传统部署时代： 早期，各个组织机构在物理服务器上运行应用程序。无法为物理服务器中的应用程序定义资源边界，这会导致资源分配问题。 例如，如果在物理服务器上运行多个应用程序，则可能会出现一个应用程序占用大部分资源的情况， 结果可能导致其他应用程序的性能下降。 一种解决方案是在不同的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-13T01:18:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-13T01:18:18.000Z"}]]},"git":{"createdTime":1648826140000,"updatedTime":1747099098000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@qq.com","commits":1,"url":"https://github.com/PPG007"},{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":2}]},"readingTime":{"minutes":1.75,"words":524},"filePathRelative":"kubernetes/docs/basic.md","excerpt":"\\n<h2>Kubernetes 是什么</h2>\\n<p></p>","autoDesc":true}');export{m as comp,u as data};
