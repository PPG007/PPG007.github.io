import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,d as n,o as p}from"./app-rQI8KFp-.js";const l={};function e(h,s){return p(),i("div",null,s[0]||(s[0]=[n(`<h1 id="生成器" tabindex="-1"><a class="header-anchor" href="#生成器"><span>生成器</span></a></h1><p>当你需要延迟地生成一连串的值时，可以考虑使用 生成器函数。Dart 内置支持两种形式的生成器方法：</p><ul><li>同步生成器：返回一个 Iterable 对象。</li><li>异步生成器：返回一个 Stream 对象。</li></ul><p>通过在函数上加 sync* 关键字并将返回值类型设置为 Iterable 来实现一个 同步 生成器函数，在函数中使用 yield 语句来传递值：</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-dart"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Iterable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">&gt;</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">naturalsTo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">int</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">n)</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">sync</span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">*</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">int</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">k</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">while</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(k</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">&lt;</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">n)</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">yield</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">k++;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">void</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">main</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">List</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">String</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">&gt;</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">args)</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">var</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">x</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">naturalsTo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">10</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">).iterator;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">while</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(x.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">moveNext</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">())</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">print</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(x.current);</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现 异步 生成器函数与同步类似，只不过关键字为 async* 并且返回值为 Stream：</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-dart"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Stream</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">&gt;</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">asynchronousNaturalsTo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">int</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">n)</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">async</span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">*</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">int</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">k</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">while</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(k</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">&lt;</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">n)</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">yield</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">k++;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">void</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">main</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">List</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">String</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">&gt;</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">args)</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">async</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">var</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">numbers</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">asynchronousNaturalsTo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">10</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">await</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">for</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">var</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">x</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">in</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">numbers)</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">print</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(x);</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果生成器是递归调用的，可是使用 yield* 语句提升执行性能：</p><div class="language-dart line-numbers-mode" data-highlighter="shiki" data-ext="dart" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-dart"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Iterable</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">int</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">&gt;</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">naturalsDownFrom</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">int</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">n)</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">sync</span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">*</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">if</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(n</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">&gt;</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">)</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">yield</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">n;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">yield</span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">*</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">naturalsDownFrom</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(n</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">-</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">void</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">main</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">List</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">&lt;</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">String</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">&gt;</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">args)</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">var</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">x</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">naturalsDownFrom</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">10</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">).iterator;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">while</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(x.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">moveNext</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">())</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">print</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(x.current);</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9)]))}const c=a(l,[["render",e]]),r=JSON.parse('{"path":"/dart/docs/generators.html","title":"生成器","lang":"zh-CN","frontmatter":{"description":"生成器 当你需要延迟地生成一连串的值时，可以考虑使用 生成器函数。Dart 内置支持两种形式的生成器方法： 同步生成器：返回一个 Iterable 对象。 异步生成器：返回一个 Stream 对象。 通过在函数上加 sync* 关键字并将返回值类型设置为 Iterable 来实现一个 同步 生成器函数，在函数中使用 yield 语句来传递值： 实现 异...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"生成器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-13T01:18:18.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/dart/docs/generators.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"生成器"}],["meta",{"property":"og:description","content":"生成器 当你需要延迟地生成一连串的值时，可以考虑使用 生成器函数。Dart 内置支持两种形式的生成器方法： 同步生成器：返回一个 Iterable 对象。 异步生成器：返回一个 Stream 对象。 通过在函数上加 sync* 关键字并将返回值类型设置为 Iterable 来实现一个 同步 生成器函数，在函数中使用 yield 语句来传递值： 实现 异..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-13T01:18:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-13T01:18:18.000Z"}]]},"git":{"createdTime":1647258489000,"updatedTime":1747099098000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@qq.com","commits":1,"url":"https://github.com/PPG007"},{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":1}]},"readingTime":{"minutes":0.87,"words":260},"filePathRelative":"dart/docs/generators.md","excerpt":"\\n<p>当你需要延迟地生成一连串的值时，可以考虑使用 生成器函数。Dart 内置支持两种形式的生成器方法：</p>","autoDesc":true}');export{c as comp,r as data};
