import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,d as n,o as e}from"./app-rQI8KFp-.js";const p={};function t(l,s){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="引用传递与值传递" tabindex="-1"><a class="header-anchor" href="#引用传递与值传递"><span>引用传递与值传递</span></a></h1><p>Java中处理 8 种基本的数据类型用的是<em>值传递</em>，其他所有类型都用的是<em>引用传递</em>。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>按引用传递的实质是将地址值的副本作为实参代替方法中的形参</p></div><p>例如下面的代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-java"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">@</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Test</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">public</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#267F99;">void</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">test1</span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">(){</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Integer</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">integer</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">new</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">Integer</span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">(</span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">11</span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">)</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">System</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">out</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">println</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">integer</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">intValue</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">());</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">change</span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">(integer)</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">System</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">out</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">println</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">integer</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">intValue</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">());</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">public</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#267F99;">void</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">change</span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Integer</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">integer){</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">integer</span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">new</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">Integer</span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">(</span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">123</span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">)</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两次输出都是 11，因为 change 方法中修改的是引用副本的指向，源引用不变，如果对引用的内部成员进行操作，则会直接影响到原对象，但是如果直接把此引用指向了其他对象，这个引用从此以后，便与之前的对象没有任何关系，当前代表的仅仅是新指向的对象。</p>`,6)]))}const r=a(p,[["render",t]]),c=JSON.parse('{"path":"/javaknowledge/docs/transfer.html","title":"引用传递与值传递","lang":"zh-CN","frontmatter":{"description":"引用传递与值传递 Java中处理 8 种基本的数据类型用的是值传递，其他所有类型都用的是引用传递。 提示 按引用传递的实质是将地址值的副本作为实参代替方法中的形参 例如下面的代码： 两次输出都是 11，因为 change 方法中修改的是引用副本的指向，源引用不变，如果对引用的内部成员进行操作，则会直接影响到原对象，但是如果直接把此引用指向了其他对象，这...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"引用传递与值传递\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2021-12-28T13:51:24.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/javaknowledge/docs/transfer.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"引用传递与值传递"}],["meta",{"property":"og:description","content":"引用传递与值传递 Java中处理 8 种基本的数据类型用的是值传递，其他所有类型都用的是引用传递。 提示 按引用传递的实质是将地址值的副本作为实参代替方法中的形参 例如下面的代码： 两次输出都是 11，因为 change 方法中修改的是引用副本的指向，源引用不变，如果对引用的内部成员进行操作，则会直接影响到原对象，但是如果直接把此引用指向了其他对象，这..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2021-12-28T13:51:24.000Z"}],["meta",{"property":"article:modified_time","content":"2021-12-28T13:51:24.000Z"}]]},"git":{"createdTime":1640699484000,"updatedTime":1640699484000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"}]},"readingTime":{"minutes":0.69,"words":207},"filePathRelative":"javaknowledge/docs/transfer.md","excerpt":"\\n<p>Java中处理 8 种基本的数据类型用的是<em>值传递</em>，其他所有类型都用的是<em>引用传递</em>。</p>","autoDesc":true}');export{r as comp,c as data};
