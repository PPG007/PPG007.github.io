import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as p}from"./app-rQI8KFp-.js";const l={};function e(h,s){return p(),a("div",null,s[0]||(s[0]=[n(`<h1 id="golang-traps" tabindex="-1"><a class="header-anchor" href="#golang-traps"><span>Golang Traps</span></a></h1><ul><li><p>可变参数是空接口类型时，传入空接口的切片要注意参数展开问题：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-go"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">var</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">a</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">[]</span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">interface</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{}{</span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">1</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">2</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">3</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">fmt</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">Println</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">a</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">)</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">fmt</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">Println</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">a</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">...)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>数组是值传递，如果数组做函数参数那么在函数中的修改将不起作用，可以使用切片。</p></li><li><p>map 的遍历顺序是不固定的，每次遍历顺序可能都不一样。</p></li><li><p>recover 必须在 defer 语句中，且这个语句是一个函数的执行。</p></li><li><p>并发时注意主线程退出导致其他线程结束。</p></li><li><p>不同 goroutine 之间不满足顺序一致性内存模型。</p></li><li><p>闭包错误地引用同一个变量。</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-go"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">func</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">main</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">()</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">for</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">i</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#000000;">:=</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">0</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">i</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">&lt;</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">5</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">i</span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">++</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">defer</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">func</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">()</span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">fmt</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">Println</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">i</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">)</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">//</span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">全部是</span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">5，可以通过每轮循环生成一个局部变量或者通过函数参数传入解决。</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}()</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>defer 语句在函数退出时才会执行，如果在循环体中使用 defer 语句将会在循环结束后执行，如果希望每次循环后执行可以去掉 defer 并将语句放在循环体最后或者将 defer 后语句封装为一个函数。</p></li></ul><h2 id="空接口和-nil-的区别" tabindex="-1"><a class="header-anchor" href="#空接口和-nil-的区别"><span>空接口和 nil 的区别</span></a></h2><p>声明一个 interface{} 类型的变量但不进行初始化，这时这个变量值为 nil，本身也是 nil，如果将一个结构体的 nil 指针变量赋值给这个空接口变量，则这个空接口变量的值是 nil，但是本身不是 nil，所以如果打印这个变量会输出 nil，但是如果对其进行 <code>if != nil</code> 会返回 false。</p><p>一个 interface{} 变量包含了两个指针，一个指针指向值在编译时确定的类型，一个指针指向实际的值，所以值为 nil 不代表这个变量是 nil。</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-go"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">package</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">import</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span></span>
<span class="line"><span class="tab">	</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&quot;log&quot;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">type</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">DemoInterface</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">interface</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="tab">	</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">Demo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">()</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#267F99;">string</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">type</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">DemoImpl</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">struct</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="tab">	</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">message</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#267F99;">string</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">func</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">d</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">DemoImpl</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">)</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">Demo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">()</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#267F99;">string</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="tab">	</span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">return</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">d</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">message</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">var</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">di</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#000000;">*</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">DemoImpl</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">var</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">d</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">DemoInterface</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">func</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">demoImplFunc</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">()</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#000000;">*</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">DemoImpl</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="tab">	</span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">return</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">di</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">func</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">main</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">()</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="tab">	</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">d</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">demoImplFunc</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">()</span></span>
<span class="line"><span class="tab">	</span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">if</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">d</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">!=</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#0000FF;">nil</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="tab">	</span><span class="tab">	</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">log</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">Println</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">d</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">Demo</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">())</span></span>
<span class="line"><span class="tab">	</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，<code>d = di</code> 这行代码是将一个接口的为 nil 的实现赋值给这个接口的一个变量，此时 d 就是一个空接口，值为 nil 但是类型指针指向实现结构体所以 <code>if d != nil</code> 会返回 true，但是一旦调用接口的方法会由于值为 nil 出现空指针 panic。</p><p>但是如果是 <code>d := demoImplFunc()</code>，相当于新定义了一个临时变量，类型就是实现类，因此 <code>if d != nil</code> 会返回 false，也就不会 panic。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>只要涉及到实现和接口的转换就存在这个问题。</p></div><div class="hint-container tip"><p class="hint-container-title">解决方法</p><ul><li>在发生接口和实现转换时进行判空操作。例如上面的例子中可以使用一个临时变量接收函数的返回值，再判断这个返回值是否为空，再决定是否转换。</li><li>使用具体的实现变量从而杜绝实现和接口的转换。但是这么做会破坏代码的抽象性。</li></ul></div>`,10)]))}const c=i(l,[["render",e]]),r=JSON.parse('{"path":"/go/docs/traps.html","title":"Golang Traps","lang":"zh-CN","frontmatter":{"description":"Golang Traps 可变参数是空接口类型时，传入空接口的切片要注意参数展开问题： 数组是值传递，如果数组做函数参数那么在函数中的修改将不起作用，可以使用切片。 map 的遍历顺序是不固定的，每次遍历顺序可能都不一样。 recover 必须在 defer 语句中，且这个语句是一个函数的执行。 并发时注意主线程退出导致其他线程结束。 不同 gorou...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Golang Traps\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-13T01:18:18.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/go/docs/traps.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"Golang Traps"}],["meta",{"property":"og:description","content":"Golang Traps 可变参数是空接口类型时，传入空接口的切片要注意参数展开问题： 数组是值传递，如果数组做函数参数那么在函数中的修改将不起作用，可以使用切片。 map 的遍历顺序是不固定的，每次遍历顺序可能都不一样。 recover 必须在 defer 语句中，且这个语句是一个函数的执行。 并发时注意主线程退出导致其他线程结束。 不同 gorou..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-13T01:18:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-13T01:18:18.000Z"}]]},"git":{"createdTime":1640490874000,"updatedTime":1747099098000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"},{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":2}]},"readingTime":{"minutes":2.51,"words":752},"filePathRelative":"go/docs/traps.md","excerpt":"\\n<ul>\\n<li>\\n<p>可变参数是空接口类型时，传入空接口的切片要注意参数展开问题：</p>\\n<div class=\\"language-go line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"go\\" style=\\"--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF\\"><pre class=\\"shiki shiki-themes one-dark-pro light-plus vp-code\\"><code class=\\"language-go\\"><span class=\\"line\\"><span style=\\"--shiki-dark:#C678DD;--shiki-light:#0000FF\\">var</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#E06C75;--shiki-light:#001080\\">a</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#E5C07B;--shiki-light:#000000\\">=</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">[]</span><span style=\\"--shiki-dark:#C678DD;--shiki-light:#0000FF\\">interface</span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">{}{</span><span style=\\"--shiki-dark:#D19A66;--shiki-light:#098658\\">1</span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">,</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#D19A66;--shiki-light:#098658\\">2</span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">,</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#D19A66;--shiki-light:#098658\\">3</span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-dark:#E06C75;--shiki-light:#001080\\">fmt</span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">.</span><span style=\\"--shiki-dark:#61AFEF;--shiki-light:#795E26\\">Println</span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">(</span><span style=\\"--shiki-dark:#E06C75;--shiki-light:#001080\\">a</span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-dark:#E06C75;--shiki-light:#001080\\">fmt</span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">.</span><span style=\\"--shiki-dark:#61AFEF;--shiki-light:#795E26\\">Println</span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">(</span><span style=\\"--shiki-dark:#E06C75;--shiki-light:#001080\\">a</span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">...)</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>数组是值传递，如果数组做函数参数那么在函数中的修改将不起作用，可以使用切片。</p>\\n</li>\\n<li>\\n<p>map 的遍历顺序是不固定的，每次遍历顺序可能都不一样。</p>\\n</li>\\n<li>\\n<p>recover 必须在 defer 语句中，且这个语句是一个函数的执行。</p>\\n</li>\\n<li>\\n<p>并发时注意主线程退出导致其他线程结束。</p>\\n</li>\\n<li>\\n<p>不同 goroutine 之间不满足顺序一致性内存模型。</p>\\n</li>\\n<li>\\n<p>闭包错误地引用同一个变量。</p>\\n<div class=\\"language-go line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"go\\" style=\\"--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF\\"><pre class=\\"shiki shiki-themes one-dark-pro light-plus vp-code\\"><code class=\\"language-go\\"><span class=\\"line\\"><span style=\\"--shiki-dark:#C678DD;--shiki-light:#0000FF\\">func</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#61AFEF;--shiki-light:#795E26\\">main</span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">()</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">{</span></span>\\n<span class=\\"line\\"><span class=\\"space\\"> </span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#C678DD;--shiki-light:#AF00DB\\">for</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#E06C75;--shiki-light:#001080\\">i</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#E5C07B;--shiki-light:#000000\\">:=</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#D19A66;--shiki-light:#098658\\">0</span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">;</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#E06C75;--shiki-light:#001080\\">i</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#56B6C2;--shiki-light:#000000\\">&lt;</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#D19A66;--shiki-light:#098658\\">5</span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">;</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#E06C75;--shiki-light:#001080\\">i</span><span style=\\"--shiki-dark:#56B6C2;--shiki-light:#000000\\">++</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">{</span></span>\\n<span class=\\"line\\"><span class=\\"space\\"> </span><span class=\\"space\\"> </span><span class=\\"space\\"> </span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#C678DD;--shiki-light:#AF00DB\\">defer</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#C678DD;--shiki-light:#0000FF\\">func</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">()</span><span class=\\"space\\"> </span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">{</span></span>\\n<span class=\\"line\\"><span class=\\"space\\"> </span><span class=\\"space\\"> </span><span class=\\"space\\"> </span><span class=\\"space\\"> </span><span class=\\"space\\"> </span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#E06C75;--shiki-light:#001080\\">fmt</span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">.</span><span style=\\"--shiki-dark:#61AFEF;--shiki-light:#795E26\\">Println</span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">(</span><span style=\\"--shiki-dark:#E06C75;--shiki-light:#001080\\">i</span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">)</span><span style=\\"--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit\\">//</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit\\">全部是</span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit\\">5，可以通过每轮循环生成一个局部变量或者通过函数参数传入解决。</span></span>\\n<span class=\\"line\\"><span class=\\"space\\"> </span><span class=\\"space\\"> </span><span class=\\"space\\"> </span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">}()</span></span>\\n<span class=\\"line\\"><span class=\\"space\\"> </span><span class=\\"space\\"> </span><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-dark:#ABB2BF;--shiki-light:#000000\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>defer 语句在函数退出时才会执行，如果在循环体中使用 defer 语句将会在循环结束后执行，如果希望每次循环后执行可以去掉 defer 并将语句放在循环体最后或者将 defer 后语句封装为一个函数。</p>\\n</li>\\n</ul>","autoDesc":true}');export{c as comp,r as data};
