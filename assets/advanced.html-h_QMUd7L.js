import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,d as n,o as e}from"./app-rQI8KFp-.js";const p="/assets/image-20210821182852630-Vo21NbtJ.png",l={};function t(h,s){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="高级特性" tabindex="-1"><a class="header-anchor" href="#高级特性"><span>高级特性</span></a></h1><h2 id="异步投递" tabindex="-1"><a class="header-anchor" href="#异步投递"><span>异步投递</span></a></h2><h3 id="什么是异步投递" tabindex="-1"><a class="header-anchor" href="#什么是异步投递"><span>什么是异步投递</span></a></h3><p>对于一个慢消费者，使用同步发送消息可能出现生产者阻塞的情况，慢消费者适合使用异步发送。</p><p>ActiveMQ 支持冋步、异步两种发送的模式将消息发送到 broker,模式的选择对发送延时有巨大的影响。 producer 能达到怎样的产出率(产出率=发送数据总量/时间)主要受发送延时的影响,使用异步发送可以显著的提高发送的性能。 ActiveMQ 默认使用异步发送的模式:除非<strong>明确指定使用同步发送</strong>的方式或者在<strong>未使用事务的前提下发送持久化的消息</strong>,这两种情况都是同步发送的。 如果你没有使用事务且发送的是持久化的消息,每一次发送都是同步发送的且会阻塞 producer 直到 broker 返回一个确认,表示消息己经被安全的持久化到磁盘。确认机制提供了消息安全的保障,但同时会阻塞客户端带来了很大的延时。 很多高性能的应用,允许在失败的情况下有少量的数据丢失。如果你的应用满足这个特点,你可以使用异步发送来提高生产率,即使发送的是持久化的消息。</p><p>异步发送：</p><p>它可以最大化 produer 端的发送效率。我们通常在发送消息量比较密集的情况下使用异步发送,它可以很大的提升 Producer 性能不过这也带来了额外的问题,就是需要消耗较多的 Client 端内存同时也会导致 broker 端性能消耗增加，此外它不能有效的确保消息的发送成功。在 <code>useAsyncSend=true</code> 的情况下客户端需要容忍消息丢失的可能。</p><h3 id="使用异步投递" tabindex="-1"><a class="header-anchor" href="#使用异步投递"><span>使用异步投递</span></a></h3><p>方法一，修改URL：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-java"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">private</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">static</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">final</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">String</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">URL</span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&quot;tcp://150.158.153.216:61615?jms.useAsyncSend=true&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>方法二，调用 <code>ActiveMQConnectionFactory</code> 的 <code>setUseAsyncSend</code> 方法传入 true：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-java"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">ActiveMQConnectionFactory</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">activeMQConnectionFactory</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">new</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">ActiveMQConnectionFactory</span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">(URL)</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">activeMQConnectionFactory</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">setUseAsyncSend</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#D19A66;--shiki-light:#0000FF;">true</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>方法三，调用 <code>ActiveMQConnection</code> 的的 <code>setUseAsyncSend</code> 方法传入 true：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-java"><span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">((ActiveMQConnection)</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">connection)</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">setUseAsyncSend</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#D19A66;--shiki-light:#0000FF;">true</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="确认发送成功" tabindex="-1"><a class="header-anchor" href="#确认发送成功"><span>确认发送成功</span></a></h3><p>设置使用异步发送后，修改发送部分的代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-java"><span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">//</span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">创建一个消息对象</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">TextMessage</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">textMessage</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">session</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">createTextMessage</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&quot;msg---&gt;&quot;</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">+</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">i);</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">//</span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">设置头</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">String</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">uuid</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">UUID</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">randomUUID</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">().</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">toString</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">();</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">textMessage</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">setJMSMessageID</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(uuid);</span></span>
<span class="line"><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">//</span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">异步发送，使用回调确认</span></span>
<span class="line"><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">((ActiveMQMessageProducer)</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">producer)</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">send</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(textMessage,</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">new</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">AsyncCallback</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">()</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">@</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Override</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">public</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#267F99;">void</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">onSuccess</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">()</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">System</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">out</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">println</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&quot;发送成功，消息ID：&quot;</span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">+</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">uuid);</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">@</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">Override</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">public</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#267F99;">void</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">onException</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">JMSException</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-dark-font-style:italic;--shiki-light:#001080;--shiki-light-font-style:inherit;">e</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">)</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">{</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">System</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">out</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">println</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&quot;发送失败，错误信息：&quot;</span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">+</span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">e</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">getMessage</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">());</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">}</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 <code>send()</code> 方法，第二个参数传入一个回调匿名内部类，这个类具有成功回调和异常回调。</p><h2 id="延迟投递" tabindex="-1"><a class="header-anchor" href="#延迟投递"><span>延迟投递</span></a></h2><p>修改 <code>activemq.xml</code>，为 broker 标签添加：<code>schedulerSupport=&quot;true&quot;</code>开启定时、延时等功能。</p><p>发送端代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-java"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#267F99;">long</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">delay</span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">5</span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">*</span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">1000L</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#267F99;">long</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">period</span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">4</span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">*</span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">1000L</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#267F99;">int</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">repeat</span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">3</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">TextMessage</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">textMessage</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">session</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">createTextMessage</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&quot;msg---&gt;&quot;</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">+</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">i);</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">textMessage</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">setLongProperty</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">ScheduledMessage</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">AMQ_SCHEDULED_DELAY</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,delay);</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">textMessage</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">setLongProperty</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">ScheduledMessage</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">AMQ_SCHEDULED_PERIOD</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,period);</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">textMessage</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">setIntProperty</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">ScheduledMessage</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">AMQ_SCHEDULED_REPEAT</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">,repeat);</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">producer</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">send</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(textMessage);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="消费重试机制" tabindex="-1"><a class="header-anchor" href="#消费重试机制"><span>消费重试机制</span></a></h2><h3 id="消息重发的情况" tabindex="-1"><a class="header-anchor" href="#消息重发的情况"><span>消息重发的情况</span></a></h3><ul><li>消费端开启了事务但是调用了回滚。</li><li>消费端开启了事务但是在 commit 之前程序终止或者根本没有 commit。</li><li>消费端在手动签收模式下调用了 session 的 recover 方法。</li><li>消费端连接超时。</li></ul><h3 id="消息重发时间间隔和重发次数" tabindex="-1"><a class="header-anchor" href="#消息重发时间间隔和重发次数"><span>消息重发时间间隔和重发次数</span></a></h3><p>间隔：1秒；次数：6次。</p><h3 id="有毒消息-poison-ack" tabindex="-1"><a class="header-anchor" href="#有毒消息-poison-ack"><span>有毒消息 Poison ACK</span></a></h3><p>一个消息被重发超过默认最大次数 6 次时，消费端向 Broker 发送一个 poison ack，表示这个消息有毒，告诉 Broker 不要再发送了，这个时候 Broker 会把这个消息放到 DLQ 死信队列。</p><p>配置参考：<a href="https://activemq.apache.org/redelivery-policy" target="_blank" rel="noopener noreferrer">重发策略</a></p><ul><li>collisionAvoidanceFactor：设置防止冲突范围的正负百分比,只有启用 <code>useCollisionAvoidance</code> 参数时才生效。也就是在延迟时间上再加一个时间波动范围。默认值为 0.15。</li><li>maximumRedeliveries：最大重传次数，达到最大重连次数后抛出异常。为 -1 时不限制次数,为 0 时表示不进行重传。默认值为 6。</li><li>maximumRedeliveryDelay：最大传送延迟,只在 <code>useExponentialBackOff</code> 为 true 时有效(V5.5),假设首次重连间隔为 10ms,倍数为 2,那么第二次重连时间间隔为 20ms,第三次重连时间间隔为 40ms,当重连时间间隔大的最大重连时间间隔时,以后每次重连时间间隔都为最大重连时间间隔。默认为 -1。</li><li>initialRedeliveryDelay：初始重发延迟时间,默认 1000L 毫秒。</li><li>redeliveryDelay：重发延迟时间,当 <code>initialRedeliveryDelay=0</code> 时生效,默认 1000L。</li><li>useCollisionAvoidance：启用防止冲突功能,默认 false。</li><li>useExponentialBackOff：启用指数倍数递增的方式增加延迟时间,默认 false。</li><li>backOffMultiplier：重连时间间隔递增倍数,只有值大于 1 和启用 <code>useExponentialBackOff</code> 参数时才生效，默认是 5。</li></ul><p>示例程序：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-java"><span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">ActiveMQConnectionFactory</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">activeMQConnectionFactory</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">new</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">ActiveMQConnectionFactory</span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">(URL)</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">RedeliveryPolicy</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">redeliveryPolicy</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#AF00DB;">new</span><span class="space"> </span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">RedeliveryPolicy</span><span style="--shiki-dark:#E06C75;--shiki-light:#000000;">()</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">redeliveryPolicy</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">setMaximumRedeliveries</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(</span><span style="--shiki-dark:#D19A66;--shiki-light:#098658;">2</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">);</span><span style="--shiki-dark:#7F848E;--shiki-dark-font-style:italic;--shiki-light:#008000;--shiki-light-font-style:inherit;">//设置最大重发次数</span></span>
<span class="line"><span style="--shiki-dark:#E5C07B;--shiki-light:#001080;">activeMQConnectionFactory</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">.</span><span style="--shiki-dark:#61AFEF;--shiki-light:#795E26;">setRedeliveryPolicy</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">(redeliveryPolicy);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们使用消费者开启事务但是不 commit，运行之后，第一次收到消息，<strong>但是第一次不算重发</strong>，再执行两次此程序，均能正常接收，此时已经达到最大重发次数，再执行此程序会没有任何输出，且通过控制台可以看到消息已经进入 DLQ 死信队列。</p><p>Spring中的配置：</p><p><img src="`+p+`" alt="image-20210821182852630"></p><h2 id="死信队列" tabindex="-1"><a class="header-anchor" href="#死信队列"><span>死信队列</span></a></h2><p>ActiveMQ 中默认的死信队列被称为 <code>ActiveMQ.DLQ</code>; 所有无法传递的消息都将发送到此队列，这可能难以管理。因此，可以在 <code>activemq.xml</code> 配置文件设置<code>individualDeadLetterStrategy</code>。</p><p>配置 <code>activemq.xml</code>，在 <code>destinationPolicy</code> 的子标签 <code>policyEntry</code> 中添加如下内容：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-xml"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&lt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#800000;">deadLetterStrategy</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&gt;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&lt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#800000;">individualDeadLetterStrategy</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#E50000;">queuePrefix</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#0000FF;">&quot;DLQ.&quot;</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#E50000;">useQueueForQueueMessages</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#0000FF;">&quot;false&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">/&gt;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:#E06C75;--shiki-light:#800000;">deadLetterStrategy</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的配置设置了死信队列的前缀，每个队列的死信队列都是前缀+原队列名。</p><p><code>useQueueForQueueMessages</code> 表示是否将 topic 的死信保存在 queue 中，默认为 true。</p><h3 id="自动删除过期消息" tabindex="-1"><a class="header-anchor" href="#自动删除过期消息"><span>自动删除过期消息</span></a></h3><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-xml"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&lt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#800000;">deadLetterStrategy</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&gt;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&lt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#800000;">sharedDeadLetterStrategy</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#E50000;">processExpired</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#0000FF;">&quot;false&quot;</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">/&gt;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:#E06C75;--shiki-light:#800000;">deadLetterStrategy</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>processExpired</code> 表示是否将过期消息放入死信队列，默认为 true。</p><h3 id="存放非持久消息到死信队列" tabindex="-1"><a class="header-anchor" href="#存放非持久消息到死信队列"><span>存放非持久消息到死信队列</span></a></h3><p>默认情况下，ActiveMQ 不会将无法传递的<strong>非持久</strong>消息放在死信队列中。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-xml"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&lt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#800000;">deadLetterStrategy</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&gt;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&lt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#800000;">sharedDeadLetterStrategy</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#E50000;">processNonPersistent</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#0000FF;">&quot;true&quot;</span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">/&gt;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:#E06C75;--shiki-light:#800000;">deadLetterStrategy</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>processNonPersistent</code> 表示是否将非持久的消息放入死信队列。</p><p>配置参考：<a href="https://activemq.apache.org/message-redelivery-and-dlq-handling" target="_blank" rel="noopener noreferrer">死信队列配置</a></p><h2 id="防止重复调用" tabindex="-1"><a class="header-anchor" href="#防止重复调用"><span>防止重复调用</span></a></h2><p>网络延迟传输中,会造成进行 MQ 重试中,在重试过程中,可能会造成重复消费。</p><p>如果消息是做数据库的插入操作,给这个消息做一个唯一主键,那么就算出现重复消费的情况,就会导致主键冲突,避免数据库出现脏数据。</p><p>如果上面两种情况还不行,淮备一个第三服务方来做消费记录。以 redis 为例,给消息分配一个全局 id,只要消费过该消息,将 &lt;id, message&gt; 以 KV 形式写入 redis。那消费者开始消费前,先去 redis 中查询有没消费记录即可。</p><div class="hint-container tip"><p class="hint-container-title">幂等性</p><p><strong>幂等性</strong>指的是多次操作，结果是一致的。</p></div><p>常见的解决幂等性的方式有以下：</p><ul><li>唯一索引：保证插入的数据只有一条。</li><li>token 机制：每次接口请求前先获取一个 token，然后再下次请求的时候在请求的 header 体中加上这个 token，后台进行验证，如果验证通过删除 token，下次请求再次判断 token。</li><li>悲观锁或者乐观锁：悲观锁可以保证每次 for update 的时候其他 sql 无法 update 数据(在数据库引擎是 innodb 的时候,select 的条件必须是唯一索引,防止锁全表)。</li><li>先查询后判断：首先通过查询数据库是否存在数据，如果存在证明已经请求过了，直接拒绝该请求，如果没有存在，就证明是第一次进来，直接放行。</li></ul>`,57)]))}const r=a(l,[["render",t]]),d=JSON.parse('{"path":"/activemq/docs/advanced.html","title":"高级特性","lang":"zh-CN","frontmatter":{"description":"高级特性 异步投递 什么是异步投递 对于一个慢消费者，使用同步发送消息可能出现生产者阻塞的情况，慢消费者适合使用异步发送。 ActiveMQ 支持冋步、异步两种发送的模式将消息发送到 broker,模式的选择对发送延时有巨大的影响。 producer 能达到怎样的产出率(产出率=发送数据总量/时间)主要受发送延时的影响,使用异步发送可以显著的提高发送的...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"高级特性\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-13T01:18:18.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/activemq/docs/advanced.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"高级特性"}],["meta",{"property":"og:description","content":"高级特性 异步投递 什么是异步投递 对于一个慢消费者，使用同步发送消息可能出现生产者阻塞的情况，慢消费者适合使用异步发送。 ActiveMQ 支持冋步、异步两种发送的模式将消息发送到 broker,模式的选择对发送延时有巨大的影响。 producer 能达到怎样的产出率(产出率=发送数据总量/时间)主要受发送延时的影响,使用异步发送可以显著的提高发送的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-13T01:18:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-13T01:18:18.000Z"}]]},"git":{"createdTime":1640575858000,"updatedTime":1747099098000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"},{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":2}]},"readingTime":{"minutes":6.6,"words":1981},"filePathRelative":"activemq/docs/advanced.md","excerpt":"\\n<h2>异步投递</h2>\\n<h3>什么是异步投递</h3>","autoDesc":true}');export{r as comp,d as data};
