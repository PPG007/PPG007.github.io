import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as s,d as l,b as e,e as t,w as r,r as c,o as h}from"./app-rQI8KFp-.js";const k={};function o(d,a){const i=c("RouteLink");return h(),p("div",null,[a[2]||(a[2]=s("h1",{id:"集群",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#集群"},[s("span",null,"集群")])],-1)),a[3]||(a[3]=s("ul",null,[s("li",null,[e("三种集群方式： "),s("ul",null,[s("li",null,"基于 sharedFileSystem 共享文件系统。"),s("li",null,"基于 JDBC。"),s("li",null,"基于可复制的 LevelDB。")])])],-1)),a[4]||(a[4]=s("h2",{id:"配置-zookeeper-leveldb-集群",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#配置-zookeeper-leveldb-集群"},[s("span",null,"配置 ZooKeeper+LevelDB 集群")])],-1)),s("p",null,[a[1]||(a[1]=e("首先要有一个 ZooKeeper 集群，配置方法参考：")),t(i,{to:"/zookeeper/"},{default:r(()=>a[0]||(a[0]=[e("ZooKeeper")])),_:1,__:[0]})]),a[5]||(a[5]=l(`<ul><li>使用 ZooKeeper 集群注册所有的 ActiveMQ Broker 但只有其中的一个 Broker 可以提供服务它将被视为 Master,其他的 Broker 处于待机状态被视为 Slave。如果 Master 因故障而不能提供服务 ZooKeeper 会从 Slave 中选举出一个 Broker 充当 Master。</li><li>Slave 连接 Master 并同步他们的存储状态, <em>Slave不接受客户端连接</em>。所有的存储操作都将被复制到连接至 Master 的 Slaves。如果 Master 宕机得到了最新更新的 Slave 会成为 Master。故障节点在恢复后会重新加入到集群中并接 Master 进入 Slave 模式。所有需要同步的消息操作都将等待存储状态被复制到其他法定节点的操作完成才能完成。所以,如果你配置了 replicas=3,那么法定大小是(3/2)+1=2。 Master 将会存储并更新然后等待(2-1)=1 个 Save 存储和更新完成才汇报 success。</li><li>有一个 node 要作为观察者存在。当一个新的 Master 被选中,你需要至少保障一个法定 node 在线以能够找到拥有最新状态的 node。这个 node 才可以成为新的 Master。</li><li>因此,推荐运行至少 3 个 replica nodes 以防止一个 node 失败后服务中断。</li></ul><h3 id="修改配置文件" tabindex="-1"><a class="header-anchor" href="#修改配置文件"><span>修改配置文件</span></a></h3><p>首先修改 <code>broker</code> 标签的 name 属性，集群中所有的 ActiveMQ 同名：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-xml"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&lt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#800000;">broker</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#E50000;">xmlns</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#0000FF;">&quot;http://activemq.apache.org/schema/core&quot;</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#E50000;">brokerName</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#0000FF;">&quot;ppgmq&quot;</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#E50000;">dataDirectory</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#0000FF;">&quot;\${activemq.data}&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>修改持久化配置，这里所有 ActiveMQ 都相同：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-xml"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&lt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#800000;">persistenceAdapter</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&gt;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&lt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#800000;">replicatedLevelDB</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#E50000;">directory</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#0000FF;">&quot;\${activemq.data}/leveldb&quot;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#E50000;">replicas</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#0000FF;">&quot;3&quot;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#E50000;">bind</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#0000FF;">&quot;tcp://0.0.0.0:61619&quot;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#E50000;">zkAddress</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#0000FF;">&quot;150.158.153.216:2181,39.107.112.172:2181,115.28.211.227:2181&quot;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#E50000;">sync</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#0000FF;">&quot;local_disk&quot;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#E50000;">zkPath</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#0000FF;">&quot;/activemq/leveldb-stores&quot;</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">/&gt;</span></span>
<span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&lt;/</span><span style="--shiki-dark:#E06C75;--shiki-light:#800000;">persistenceAdapter</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>replicas：集群中将存在的节点数。至少 (replicas/2)+1 个节点必须在线以避免服务中断。</li><li>bind：当这个节点成为主节点时，它将绑定配置的地址和端口来为复制协议提供服务。</li><li>zkAddress：ZooKeeper 服务器的逗号分隔列表。</li><li>zkPath： Zookeeper 上存放 MQServer 主从选举信息的节点位置。</li><li>sync：MQ 节点间的数据同步策略。可选项如下：local_mem、local_disk、remote_mem、remote_disk、quorum_mem、quorum_disk；建议：quorum_mem。</li></ul><p><a href="https://activemq.apache.org/replicated-leveldb-store" target="_blank" rel="noopener noreferrer">配置参考</a></p><h3 id="启动集群" tabindex="-1"><a class="header-anchor" href="#启动集群"><span>启动集群</span></a></h3><p>分别启动三台服务器上的 ActiveMQ 即可。</p><h3 id="使用集群" tabindex="-1"><a class="header-anchor" href="#使用集群"><span>使用集群</span></a></h3><p>对于 Java 程序，只要修改访问URL即可</p><p>ActiveMQ 的客户端只能访问 Master 的 Broker，其他处于 Slave的Broker 不能访问，所以客户端连接的 Broker 应该使用 <strong>failover 协议</strong>(转移失败)</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-java"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">private</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">static</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">final</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">String</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">URL</span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&quot;failover:(&quot;</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">+</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&quot;tcp://39.107.112.172:61616&quot;</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">+</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&quot;,tcp://150.158.153.216:61616&quot;</span><span class="space"> </span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">+</span></span>
<span class="line"><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span class="space"> </span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&quot;,tcp://115.28.211.227:61616)&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h3><ul><li>ActiveMQ 的客户端只能访问 Master 的 Broker，其他处于 Slave 的 Broker 不能访问，所以客户端连接的 Broker 应该使用 <strong>failover 协议</strong>(转移失败)。</li><li>当一个 ActiveMQ 节点挂掉或者一个 Zookeeper 节点挂掉，ActiveMQ 服务依然正常运转，如果仅剩一个 ActiveMQ 节点，由于不能选举 Master，所以 ActiveMQ 不能正常运行。</li><li>同样的，如果 Zookeeper 仅剩一个节点活动，不管 ActiveMQ 各节点存活，ActiveMQ 也不能正常提供服务。(ActiveMQ 集群的高可用，依赖于 Zookeeper 集群的高可用)。</li><li>如果使用 sync 设置为 local_disk，如果向集群投递了消息，那么在停止集群又重启后集群将不可用，因为 levelDB 的脏数据问题，需要删除所有 ActiveMQ 的 data 目录下的 leveldb 文件夹。</li></ul>`,16))])}const m=n(k,[["render",o]]),v=JSON.parse('{"path":"/activemq/docs/cluster.html","title":"集群","lang":"zh-CN","frontmatter":{"description":"集群 三种集群方式： 基于 sharedFileSystem 共享文件系统。 基于 JDBC。 基于可复制的 LevelDB。 配置 ZooKeeper+LevelDB 集群 首先要有一个 ZooKeeper 集群，配置方法参考： 使用 ZooKeeper 集群注册所有的 ActiveMQ Broker 但只有其中的一个 Broker 可以提供服务它将...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"集群\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-13T05:52:32.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/activemq/docs/cluster.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"集群"}],["meta",{"property":"og:description","content":"集群 三种集群方式： 基于 sharedFileSystem 共享文件系统。 基于 JDBC。 基于可复制的 LevelDB。 配置 ZooKeeper+LevelDB 集群 首先要有一个 ZooKeeper 集群，配置方法参考： 使用 ZooKeeper 集群注册所有的 ActiveMQ Broker 但只有其中的一个 Broker 可以提供服务它将..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-13T05:52:32.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-13T05:52:32.000Z"}]]},"git":{"createdTime":1640575858000,"updatedTime":1747115552000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"},{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":2}]},"readingTime":{"minutes":2.95,"words":884},"filePathRelative":"activemq/docs/cluster.md","excerpt":"\\n<ul>\\n<li>三种集群方式：\\n<ul>\\n<li>基于 sharedFileSystem 共享文件系统。</li>\\n<li>基于 JDBC。</li>\\n<li>基于可复制的 LevelDB。</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{m as comp,v as data};
