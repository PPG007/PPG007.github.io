import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as e,o as t}from"./app-rQI8KFp-.js";const n="/assets/image-20210821130437502-CnhDsrOn.png",p={};function r(l,s){return t(),a("div",null,s[0]||(s[0]=[e('<h1 id="activemq-传输协议" tabindex="-1"><a class="header-anchor" href="#activemq-传输协议"><span>ActiveMQ 传输协议</span></a></h1><p><img src="'+n+`" alt="image-20210821130437502"></p><h2 id="tcp-协议-默认" tabindex="-1"><a class="header-anchor" href="#tcp-协议-默认"><span>TCP 协议 （默认）</span></a></h2><p>默认 Broker 协议，默认端口 61616。</p><p>在进行网络传输前，必须要序列化数据，消息是通过一个 wire protocol 来序列化成字节流即 openwire。</p><p>tcp 优点：</p><ul><li>传输可靠性高，稳定性强。</li><li>高效性，字节流方式传递，效率很高。</li><li>有效性、可用性：应用广泛，支持任何平台。</li></ul><p>TCP 协议可以在 URL 中携带配置参数，具体参考：</p><p><a href="https://activemq.apache.org/tcp-transport-reference" target="_blank" rel="noopener noreferrer">TCP协议可选参数</a></p><h2 id="nio-协议" tabindex="-1"><a class="header-anchor" href="#nio-协议"><span>NIO 协议</span></a></h2><p>NIO 协议更侧重于底层的访问操作。它允许开发人员对同一资源可有更多的 client 调用和服务端有更多的负载。</p><p>适合使用 NIO 协议的场景：</p><ul><li>可能有大量的 Client 去连接到 Broker 上,一般情况下,大量的 Client 去连接 Broker 是被操作系统的线程所限制的。因此,NIO 的实现比 TCP 需要更少的线程去运行,所以建议使用 NIO 协议。</li><li>可能对于 Broker 有一个很迟钝的网络传输,NIO 比 TCP 提供更好的性能。</li></ul><p><a href="https://activemq.apache.org/nio-transport-reference" target="_blank" rel="noopener noreferrer">NIO配置</a></p><h2 id="amqp-协议" tabindex="-1"><a class="header-anchor" href="#amqp-协议"><span>AMQP 协议</span></a></h2><p>AMQP（高级消息队列协议）是一个网络协议。它支持符合要求的客户端应用（application）和消息中间件代理（messaging middleware broker）之间进行通信。</p><h2 id="stomp-协议" tabindex="-1"><a class="header-anchor" href="#stomp-协议"><span>stomp 协议</span></a></h2><p>简单(流)文本定向消息协议，它提供了一个可互操作的连接格式，允许 STOMP 客户端与任意 STOMP 消息代理（Broker）进行交互。STOMP 协议由于设计简单，易于开发客户端，因此在多种语言和多种平台上得到广泛地应用。</p><h2 id="ssl-协议" tabindex="-1"><a class="header-anchor" href="#ssl-协议"><span>SSL 协议</span></a></h2><p>安全套接层。是由 Netscape 公司于 1990 年开发，用于保障 Word Wide Web（WWW）通讯的安全。主要任务是提供<strong>私密性，信息完整性和身份认证</strong>。SSL 是一个不依赖于平台和运用程序的协议，位于 TCP/IP 协议与各种应用层协议之间，为数据通信提高安全支持。</p><h2 id="mqtt-协议" tabindex="-1"><a class="header-anchor" href="#mqtt-协议"><span>mqtt 协议</span></a></h2><p>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于发布/订阅（publish/subscribe）模式的&quot;轻量级&quot;通讯协议，该协议构建于 TCP/IP 协议上，由 IBM 在 1999 年发布。MQTT 最大优点在于，可以以极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务。作为一种低开销、低带宽占用的即时通讯协议，使其在物联网、小型设备、移动应用等方面有较广泛的应用。</p><h2 id="ws-协议" tabindex="-1"><a class="header-anchor" href="#ws-协议"><span>ws 协议</span></a></h2><p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</p><p>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><h2 id="nio编码示例" tabindex="-1"><a class="header-anchor" href="#nio编码示例"><span>NIO编码示例</span></a></h2><p>修改 ActiveMQ 配置文件 <code>activemq.xml</code>，添加：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-xml"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&lt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#800000;">transportConnector</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#E50000;">name</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#0000FF;">&quot;nio&quot;</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#E50000;">uri</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#0000FF;">&quot;nio://0.0.0.0:61615?trace=true&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>修改发送与接收 url：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-java"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">private</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">static</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">final</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">String</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">URL</span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&quot;nio://150.158.153.216:61615&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其他代码无需改动。</p><h2 id="nio-加强" tabindex="-1"><a class="header-anchor" href="#nio-加强"><span>NIO 加强</span></a></h2><p>让一个端口既支持 NIO 网络 IO 模型又支持多个协议，以上配置还是 NIO+TCP，如果要修改成 NIO+TCP/MQTT……需要使用 <code>auto</code>。</p><p>修改 ActiveMQ 配置文件 <code>activemq.xml</code>：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-xml"><span class="line"><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">&lt;</span><span style="--shiki-dark:#E06C75;--shiki-light:#800000;">transportConnector</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#E50000;">name</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#0000FF;">&quot;auto+nio&quot;</span><span class="space"> </span><span style="--shiki-dark:#D19A66;--shiki-light:#E50000;">uri</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#0000FF;">&quot;auto+nio://0.0.0.0:61615?trace=true&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#800000;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样，在进行访问时，对于 61615 端口，既可以使用 nio 协议，也可以使用 TCP 协议。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-dark:#abb2bf;--shiki-light:#000000;--shiki-dark-bg:#282c34;--shiki-light-bg:#FFFFFF;"><pre class="shiki shiki-themes one-dark-pro light-plus vp-code"><code class="language-java"><span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">private</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">static</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">final</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">String</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">URL</span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&quot;nio://150.158.153.216:61615&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">private</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">static</span><span class="space"> </span><span style="--shiki-dark:#C678DD;--shiki-light:#0000FF;">final</span><span class="space"> </span><span style="--shiki-dark:#E5C07B;--shiki-light:#267F99;">String</span><span class="space"> </span><span style="--shiki-dark:#E06C75;--shiki-light:#001080;">URL</span><span style="--shiki-dark:#56B6C2;--shiki-light:#000000;">=</span><span style="--shiki-dark:#98C379;--shiki-light:#A31515;">&quot;tcp://150.158.153.216:61615&quot;</span><span style="--shiki-dark:#ABB2BF;--shiki-light:#000000;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,37)]))}const c=i(p,[["render",r]]),k=JSON.parse('{"path":"/activemq/docs/protocol.html","title":"ActiveMQ 传输协议","lang":"zh-CN","frontmatter":{"description":"ActiveMQ 传输协议 image-20210821130437502 TCP 协议 （默认） 默认 Broker 协议，默认端口 61616。 在进行网络传输前，必须要序列化数据，消息是通过一个 wire protocol 来序列化成字节流即 openwire。 tcp 优点： 传输可靠性高，稳定性强。 高效性，字节流方式传递，效率很高。 有效性...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ActiveMQ 传输协议\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-08-15T09:32:39.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/activemq/docs/protocol.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"ActiveMQ 传输协议"}],["meta",{"property":"og:description","content":"ActiveMQ 传输协议 image-20210821130437502 TCP 协议 （默认） 默认 Broker 协议，默认端口 61616。 在进行网络传输前，必须要序列化数据，消息是通过一个 wire protocol 来序列化成字节流即 openwire。 tcp 优点： 传输可靠性高，稳定性强。 高效性，字节流方式传递，效率很高。 有效性..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-15T09:32:39.000Z"}],["meta",{"property":"article:modified_time","content":"2022-08-15T09:32:39.000Z"}]]},"git":{"createdTime":1640575858000,"updatedTime":1660555959000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"},{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":1}]},"readingTime":{"minutes":3.1,"words":931},"filePathRelative":"activemq/docs/protocol.md","excerpt":"\\n<p></p>\\n<h2>TCP 协议 （默认）</h2>\\n","autoDesc":true}');export{c as comp,k as data};
