import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as i,o as c}from"./app-rQI8KFp-.js";const o={};function r(l,t){return c(),a("div",null,t[0]||(t[0]=[i('<h1 id="接口与抽象类" tabindex="-1"><a class="header-anchor" href="#接口与抽象类"><span>接口与抽象类</span></a></h1><h2 id="抽象类" tabindex="-1"><a class="header-anchor" href="#抽象类"><span>抽象类</span></a></h2><p>在 Java 中被 abstract 关键字修饰的类称为抽象类，被 abstract 关键字修饰的方法称为抽象方法，抽象方法只有方法的声明，没有方法体。抽象类的特点：</p><ul><li>抽象类不能被实例化只能被继承。</li><li>包含抽象方法的一定是抽象类，但是抽象类不一定含有抽象方法。</li><li>JDK 1.8以前，抽象类的方法默认访问权限为 protected。</li><li>JDK 1.8时，抽象类的方法默认访问权限变为 default。</li><li>一个子类继承一个抽象类，则子类必须实现父类抽象方法，否则子类也必须定义为抽象类。</li><li>抽象类可以包含属性、方法、构造方法，但是构造方法不能用于实例化，主要用途是被子类调用。</li></ul><h2 id="接口" tabindex="-1"><a class="header-anchor" href="#接口"><span>接口</span></a></h2><p>Java 中接口使用 interface 关键字修饰，特点为:</p><ul><li>接口可以包含变量、方法；变量被隐式指定为 <code>public static final</code>，方法被隐式指定为 <code>public abstract</code>（JDK1.8 之前）。</li><li>接口支持多继承，即一个接口可以 extends 多个接口，间接的解决了 Java 中类的单继承问题。</li><li>一个类可以实现多个接口。</li><li>JDK1.8 中对接口增加了新的特性： <ul><li>默认方法（default method）：JDK 1.8 允许给接口添加非抽象的方法实现，但必须使用 <code>default</code> 关键字修饰；定义了 <code>default</code> 的方法可以不被实现子类所实现，但只能被实现子类的对象调用；如果子类实现了多个接口，并且这些接口包含一样的默认方法，则子类必须重写默认方法。</li><li>静态方法（static method）：JDK 1.8 中允许使用 <code>static</code> 关键字修饰一个方法，并提供实现，称为接口静态方法。接口静态方法只能通过接口调用（接口名.静态方法名）。</li><li>JDK 1.8 以前，接口中的方法必须是 public 的。</li><li>JDK 1.8 时，接口中的方法可以是 public 的，也可以是 default 的。</li><li>JDK 1.9 时，接口中的方法可以是 private 的。</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>JDK1.9 允许接口中出现 <code>private</code> 修饰的默认方法和静态方法。</p></div>',8)]))}const d=e(o,[["render",r]]),p=JSON.parse('{"path":"/javaknowledge/docs/interface_and_abstract_class.html","title":"接口与抽象类","lang":"zh-CN","frontmatter":{"description":"接口与抽象类 抽象类 在 Java 中被 abstract 关键字修饰的类称为抽象类，被 abstract 关键字修饰的方法称为抽象方法，抽象方法只有方法的声明，没有方法体。抽象类的特点： 抽象类不能被实例化只能被继承。 包含抽象方法的一定是抽象类，但是抽象类不一定含有抽象方法。 JDK 1.8以前，抽象类的方法默认访问权限为 protected。 J...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"接口与抽象类\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-13T01:18:18.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://ppg007.github.io/javaknowledge/docs/interface_and_abstract_class.html"}],["meta",{"property":"og:site_name","content":"PPG007 的文档"}],["meta",{"property":"og:title","content":"接口与抽象类"}],["meta",{"property":"og:description","content":"接口与抽象类 抽象类 在 Java 中被 abstract 关键字修饰的类称为抽象类，被 abstract 关键字修饰的方法称为抽象方法，抽象方法只有方法的声明，没有方法体。抽象类的特点： 抽象类不能被实例化只能被继承。 包含抽象方法的一定是抽象类，但是抽象类不一定含有抽象方法。 JDK 1.8以前，抽象类的方法默认访问权限为 protected。 J..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-13T01:18:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-13T01:18:18.000Z"}]]},"git":{"createdTime":1640699484000,"updatedTime":1747099098000,"contributors":[{"name":"PPG007","username":"PPG007","email":"1658272229@com请求","commits":1,"url":"https://github.com/PPG007"},{"name":"Koston Zhuang","username":"","email":"koston.zhuang@maiscrm.com","commits":1}]},"readingTime":{"minutes":1.85,"words":556},"filePathRelative":"javaknowledge/docs/interface_and_abstract_class.md","excerpt":"\\n<h2>抽象类</h2>\\n<p>在 Java 中被 abstract 关键字修饰的类称为抽象类，被 abstract 关键字修饰的方法称为抽象方法，抽象方法只有方法的声明，没有方法体。抽象类的特点：</p>","autoDesc":true}');export{d as comp,p as data};
